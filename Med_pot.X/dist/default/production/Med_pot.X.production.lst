CCS PCH C Compiler, Version 5.048, 5967               02-nov-16 12:16

               Filename:   C:\Users\MARCOS\Proyecto_final\Med_pot.X\dist\default\production\Med_pot.X.production.lst

               ROM used:   6098 bytes (19%)
                           Largest free fragment is 26666
               RAM used:   80 (4%) at main() level
                           142 (7%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   1790
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00BC
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #import(file="build/default/production/main.o") 
.................... #import(file="build/default/production/funciones.o") 
.................... /** 
.................... *	\file main.c 
.................... *	\brief Resumen del contenido del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
00AE:  DATA 50,72
00B0:  DATA 69,6D
00B2:  DATA 65,72
00B4:  DATA 20,70
00B6:  DATA 72,75
00B8:  DATA 65,62
00BA:  DATA 61,00
*
0360:  TBLRD*+
0362:  MOVF   FF5,F
0364:  BZ    037E
0366:  MOVFF  FF6,50
036A:  MOVFF  FF7,51
036E:  MOVFF  FF5,5E
0372:  RCALL  02F2
0374:  MOVFF  50,FF6
0378:  MOVFF  51,FF7
037C:  BRA    0360
037E:  GOTO   03A4 (RETURN)
*
0574:  MOVLW  8E
0576:  MOVWF  00
0578:  MOVFF  7F,01
057C:  MOVFF  7E,02
0580:  CLRF   03
0582:  MOVF   01,F
0584:  BNZ   0598
0586:  MOVFF  02,01
058A:  CLRF   02
058C:  MOVLW  08
058E:  SUBWF  00,F
0590:  MOVF   01,F
0592:  BNZ   0598
0594:  CLRF   00
0596:  BRA    05A8
0598:  BCF    FD8.0
059A:  BTFSC  01.7
059C:  BRA    05A6
059E:  RLCF   02,F
05A0:  RLCF   01,F
05A2:  DECF   00,F
05A4:  BRA    0598
05A6:  BCF    01.7
05A8:  RETURN 0
05AA:  MOVF   x7E,W
05AC:  BTFSC  FD8.2
05AE:  BRA    0692
05B0:  MOVWF  00
05B2:  MOVF   x82,W
05B4:  BTFSC  FD8.2
05B6:  BRA    0692
05B8:  ADDWF  00,F
05BA:  BNC   05C4
05BC:  MOVLW  81
05BE:  ADDWF  00,F
05C0:  BC    0692
05C2:  BRA    05CC
05C4:  MOVLW  7F
05C6:  SUBWF  00,F
05C8:  BNC   0692
05CA:  BZ    0692
05CC:  MOVFF  7F,86
05D0:  MOVF   x83,W
05D2:  XORWF  x86,F
05D4:  BSF    x7F.7
05D6:  BSF    x83.7
05D8:  MOVF   x81,W
05DA:  MULWF  x85
05DC:  MOVFF  FF4,88
05E0:  MOVF   x80,W
05E2:  MULWF  x84
05E4:  MOVFF  FF4,03
05E8:  MOVFF  FF3,87
05EC:  MULWF  x85
05EE:  MOVF   FF3,W
05F0:  ADDWF  x88,F
05F2:  MOVF   FF4,W
05F4:  ADDWFC x87,F
05F6:  MOVLW  00
05F8:  ADDWFC 03,F
05FA:  MOVF   x81,W
05FC:  MULWF  x84
05FE:  MOVF   FF3,W
0600:  ADDWF  x88,F
0602:  MOVF   FF4,W
0604:  ADDWFC x87,F
0606:  MOVLW  00
0608:  CLRF   02
060A:  ADDWFC 03,F
060C:  ADDWFC 02,F
060E:  MOVF   x7F,W
0610:  MULWF  x85
0612:  MOVF   FF3,W
0614:  ADDWF  x87,F
0616:  MOVF   FF4,W
0618:  ADDWFC 03,F
061A:  MOVLW  00
061C:  ADDWFC 02,F
061E:  MOVF   x7F,W
0620:  MULWF  x84
0622:  MOVF   FF3,W
0624:  ADDWF  03,F
0626:  MOVF   FF4,W
0628:  ADDWFC 02,F
062A:  MOVLW  00
062C:  CLRF   01
062E:  ADDWFC 01,F
0630:  MOVF   x81,W
0632:  MULWF  x83
0634:  MOVF   FF3,W
0636:  ADDWF  x87,F
0638:  MOVF   FF4,W
063A:  ADDWFC 03,F
063C:  MOVLW  00
063E:  ADDWFC 02,F
0640:  ADDWFC 01,F
0642:  MOVF   x80,W
0644:  MULWF  x83
0646:  MOVF   FF3,W
0648:  ADDWF  03,F
064A:  MOVF   FF4,W
064C:  ADDWFC 02,F
064E:  MOVLW  00
0650:  ADDWFC 01,F
0652:  MOVF   x7F,W
0654:  MULWF  x83
0656:  MOVF   FF3,W
0658:  ADDWF  02,F
065A:  MOVF   FF4,W
065C:  ADDWFC 01,F
065E:  INCF   00,F
0660:  BTFSC  01.7
0662:  BRA    066E
0664:  RLCF   x87,F
0666:  RLCF   03,F
0668:  RLCF   02,F
066A:  RLCF   01,F
066C:  DECF   00,F
066E:  MOVLW  00
0670:  BTFSS  x87.7
0672:  BRA    0688
0674:  INCF   03,F
0676:  ADDWFC 02,F
0678:  ADDWFC 01,F
067A:  MOVF   01,W
067C:  BNZ   0688
067E:  MOVF   02,W
0680:  BNZ   0688
0682:  MOVF   03,W
0684:  BNZ   0688
0686:  INCF   00,F
0688:  BTFSC  x86.7
068A:  BSF    01.7
068C:  BTFSS  x86.7
068E:  BCF    01.7
0690:  BRA    069A
0692:  CLRF   00
0694:  CLRF   01
0696:  CLRF   02
0698:  CLRF   03
069A:  RETURN 0
069C:  MOVF   x62,W
069E:  BTFSC  FD8.2
06A0:  BRA    07EC
06A2:  MOVWF  x6E
06A4:  MOVF   x66,W
06A6:  BTFSC  FD8.2
06A8:  BRA    07EC
06AA:  SUBWF  x6E,F
06AC:  BNC   06B8
06AE:  MOVLW  7F
06B0:  ADDWF  x6E,F
06B2:  BTFSC  FD8.0
06B4:  BRA    07EC
06B6:  BRA    06C4
06B8:  MOVLW  81
06BA:  SUBWF  x6E,F
06BC:  BTFSS  FD8.0
06BE:  BRA    07EC
06C0:  BTFSC  FD8.2
06C2:  BRA    07EC
06C4:  MOVFF  6E,00
06C8:  CLRF   01
06CA:  CLRF   02
06CC:  CLRF   03
06CE:  CLRF   x6D
06D0:  MOVFF  63,6C
06D4:  BSF    x6C.7
06D6:  MOVFF  64,6B
06DA:  MOVFF  65,6A
06DE:  MOVLW  19
06E0:  MOVWF  x6E
06E2:  MOVF   x69,W
06E4:  SUBWF  x6A,F
06E6:  BC    0702
06E8:  MOVLW  01
06EA:  SUBWF  x6B,F
06EC:  BC    0702
06EE:  SUBWF  x6C,F
06F0:  BC    0702
06F2:  SUBWF  x6D,F
06F4:  BC    0702
06F6:  INCF   x6D,F
06F8:  INCF   x6C,F
06FA:  INCF   x6B,F
06FC:  MOVF   x69,W
06FE:  ADDWF  x6A,F
0700:  BRA    0752
0702:  MOVF   x68,W
0704:  SUBWF  x6B,F
0706:  BC    072C
0708:  MOVLW  01
070A:  SUBWF  x6C,F
070C:  BC    072C
070E:  SUBWF  x6D,F
0710:  BC    072C
0712:  INCF   x6D,F
0714:  INCF   x6C,F
0716:  MOVF   x68,W
0718:  ADDWF  x6B,F
071A:  MOVF   x69,W
071C:  ADDWF  x6A,F
071E:  BNC   0752
0720:  INCF   x6B,F
0722:  BNZ   0752
0724:  INCF   x6C,F
0726:  BNZ   0752
0728:  INCF   x6D,F
072A:  BRA    0752
072C:  MOVF   x67,W
072E:  IORLW  80
0730:  SUBWF  x6C,F
0732:  BC    0750
0734:  MOVLW  01
0736:  SUBWF  x6D,F
0738:  BC    0750
073A:  INCF   x6D,F
073C:  MOVF   x67,W
073E:  IORLW  80
0740:  ADDWF  x6C,F
0742:  MOVF   x68,W
0744:  ADDWF  x6B,F
0746:  BNC   071A
0748:  INCF   x6C,F
074A:  BNZ   071A
074C:  INCF   x6D,F
074E:  BRA    071A
0750:  BSF    03.0
0752:  DECFSZ x6E,F
0754:  BRA    0758
0756:  BRA    076E
0758:  BCF    FD8.0
075A:  RLCF   x6A,F
075C:  RLCF   x6B,F
075E:  RLCF   x6C,F
0760:  RLCF   x6D,F
0762:  BCF    FD8.0
0764:  RLCF   03,F
0766:  RLCF   02,F
0768:  RLCF   01,F
076A:  RLCF   x6F,F
076C:  BRA    06E2
076E:  BTFSS  x6F.0
0770:  BRA    077E
0772:  BCF    FD8.0
0774:  RRCF   01,F
0776:  RRCF   02,F
0778:  RRCF   03,F
077A:  RRCF   x6F,F
077C:  BRA    0782
077E:  DECF   00,F
0780:  BZ    07EC
0782:  BTFSC  x6F.7
0784:  BRA    07C2
0786:  BCF    FD8.0
0788:  RLCF   x6A,F
078A:  RLCF   x6B,F
078C:  RLCF   x6C,F
078E:  RLCF   x6D,F
0790:  MOVF   x69,W
0792:  SUBWF  x6A,F
0794:  BC    07A4
0796:  MOVLW  01
0798:  SUBWF  x6B,F
079A:  BC    07A4
079C:  SUBWF  x6C,F
079E:  BC    07A4
07A0:  SUBWF  x6D,F
07A2:  BNC   07D8
07A4:  MOVF   x68,W
07A6:  SUBWF  x6B,F
07A8:  BC    07B4
07AA:  MOVLW  01
07AC:  SUBWF  x6C,F
07AE:  BC    07B4
07B0:  SUBWF  x6D,F
07B2:  BNC   07D8
07B4:  MOVF   x67,W
07B6:  IORLW  80
07B8:  SUBWF  x6C,F
07BA:  BC    07C2
07BC:  MOVLW  01
07BE:  SUBWF  x6D,F
07C0:  BNC   07D8
07C2:  INCF   03,F
07C4:  BNZ   07D8
07C6:  INCF   02,F
07C8:  BNZ   07D8
07CA:  INCF   01,F
07CC:  BNZ   07D8
07CE:  INCF   00,F
07D0:  BZ    07EC
07D2:  RRCF   01,F
07D4:  RRCF   02,F
07D6:  RRCF   03,F
07D8:  MOVFF  63,6E
07DC:  MOVF   x67,W
07DE:  XORWF  x6E,F
07E0:  BTFSS  x6E.7
07E2:  BRA    07E8
07E4:  BSF    01.7
07E6:  BRA    07F4
07E8:  BCF    01.7
07EA:  BRA    07F4
07EC:  CLRF   00
07EE:  CLRF   01
07F0:  CLRF   02
07F2:  CLRF   03
07F4:  RETURN 0
07F6:  MOVLW  80
07F8:  BTFSC  FD8.1
07FA:  XORWF  x83,F
07FC:  CLRF   x88
07FE:  CLRF   x89
0800:  MOVFF  7F,87
0804:  MOVF   x83,W
0806:  XORWF  x87,F
0808:  MOVF   x7E,W
080A:  BTFSC  FD8.2
080C:  BRA    09C6
080E:  MOVWF  x86
0810:  MOVWF  00
0812:  MOVF   x82,W
0814:  BTFSC  FD8.2
0816:  BRA    09D8
0818:  SUBWF  x86,F
081A:  BTFSC  FD8.2
081C:  BRA    0920
081E:  BNC   089A
0820:  MOVFF  83,8C
0824:  BSF    x8C.7
0826:  MOVFF  84,8B
082A:  MOVFF  85,8A
082E:  CLRF   x89
0830:  BCF    FD8.0
0832:  RRCF   x8C,F
0834:  RRCF   x8B,F
0836:  RRCF   x8A,F
0838:  RRCF   x89,F
083A:  DECFSZ x86,F
083C:  BRA    082E
083E:  BTFSS  x87.7
0840:  BRA    0848
0842:  BSF    x88.0
0844:  BRA    0A00
0846:  BCF    x88.0
0848:  BCF    x86.0
084A:  BSF    x88.4
084C:  CLRF   FEA
084E:  MOVLW  81
0850:  MOVWF  FE9
0852:  BRA    0A26
0854:  BCF    x88.4
0856:  BTFSC  x87.7
0858:  BRA    086E
085A:  BTFSS  x86.0
085C:  BRA    0884
085E:  RRCF   x8C,F
0860:  RRCF   x8B,F
0862:  RRCF   x8A,F
0864:  RRCF   x89,F
0866:  INCF   00,F
0868:  BTFSC  FD8.2
086A:  BRA    09F6
086C:  BRA    0884
086E:  BTFSC  x8C.7
0870:  BRA    088A
0872:  BCF    FD8.0
0874:  RLCF   x89,F
0876:  RLCF   x8A,F
0878:  RLCF   x8B,F
087A:  RLCF   x8C,F
087C:  DECF   00,F
087E:  BTFSC  FD8.2
0880:  BRA    09F6
0882:  BRA    086E
0884:  BSF    x88.6
0886:  BRA    095E
0888:  BCF    x88.6
088A:  MOVFF  7F,87
088E:  BTFSS  x7F.7
0890:  BRA    0896
0892:  BSF    x8C.7
0894:  BRA    09E8
0896:  BCF    x8C.7
0898:  BRA    09E8
089A:  MOVFF  82,86
089E:  MOVFF  82,00
08A2:  MOVF   x7E,W
08A4:  SUBWF  x86,F
08A6:  MOVFF  7F,8C
08AA:  BSF    x8C.7
08AC:  MOVFF  80,8B
08B0:  MOVFF  81,8A
08B4:  CLRF   x89
08B6:  BCF    FD8.0
08B8:  RRCF   x8C,F
08BA:  RRCF   x8B,F
08BC:  RRCF   x8A,F
08BE:  RRCF   x89,F
08C0:  DECFSZ x86,F
08C2:  BRA    08B4
08C4:  BTFSS  x87.7
08C6:  BRA    08CE
08C8:  BSF    x88.1
08CA:  BRA    0A00
08CC:  BCF    x88.1
08CE:  BCF    x86.0
08D0:  BSF    x88.5
08D2:  CLRF   FEA
08D4:  MOVLW  85
08D6:  MOVWF  FE9
08D8:  BRA    0A26
08DA:  BCF    x88.5
08DC:  BTFSC  x87.7
08DE:  BRA    08F4
08E0:  BTFSS  x86.0
08E2:  BRA    090A
08E4:  RRCF   x8C,F
08E6:  RRCF   x8B,F
08E8:  RRCF   x8A,F
08EA:  RRCF   x89,F
08EC:  INCF   00,F
08EE:  BTFSC  FD8.2
08F0:  BRA    09F6
08F2:  BRA    090A
08F4:  BTFSC  x8C.7
08F6:  BRA    0910
08F8:  BCF    FD8.0
08FA:  RLCF   x89,F
08FC:  RLCF   x8A,F
08FE:  RLCF   x8B,F
0900:  RLCF   x8C,F
0902:  DECF   00,F
0904:  BTFSC  FD8.2
0906:  BRA    09F6
0908:  BRA    08F4
090A:  BSF    x88.7
090C:  BRA    095E
090E:  BCF    x88.7
0910:  MOVFF  83,87
0914:  BTFSS  x83.7
0916:  BRA    091C
0918:  BSF    x8C.7
091A:  BRA    09E8
091C:  BCF    x8C.7
091E:  BRA    09E8
0920:  MOVFF  83,8C
0924:  BSF    x8C.7
0926:  MOVFF  84,8B
092A:  MOVFF  85,8A
092E:  BTFSS  x87.7
0930:  BRA    093A
0932:  BCF    x8C.7
0934:  BSF    x88.2
0936:  BRA    0A00
0938:  BCF    x88.2
093A:  CLRF   x89
093C:  BCF    x86.0
093E:  CLRF   FEA
0940:  MOVLW  81
0942:  MOVWF  FE9
0944:  BRA    0A26
0946:  BTFSC  x87.7
0948:  BRA    0982
094A:  MOVFF  7F,87
094E:  BTFSS  x86.0
0950:  BRA    095E
0952:  RRCF   x8C,F
0954:  RRCF   x8B,F
0956:  RRCF   x8A,F
0958:  RRCF   x89,F
095A:  INCF   00,F
095C:  BZ    09F6
095E:  BTFSS  x89.7
0960:  BRA    0978
0962:  INCF   x8A,F
0964:  BNZ   0978
0966:  INCF   x8B,F
0968:  BNZ   0978
096A:  INCF   x8C,F
096C:  BNZ   0978
096E:  RRCF   x8C,F
0970:  RRCF   x8B,F
0972:  RRCF   x8A,F
0974:  INCF   00,F
0976:  BZ    09F6
0978:  BTFSC  x88.6
097A:  BRA    0888
097C:  BTFSC  x88.7
097E:  BRA    090E
0980:  BRA    09BA
0982:  MOVLW  80
0984:  XORWF  x8C,F
0986:  BTFSS  x8C.7
0988:  BRA    0992
098A:  BRA    0A00
098C:  MOVFF  83,87
0990:  BRA    09A6
0992:  MOVFF  7F,87
0996:  MOVF   x8C,F
0998:  BNZ   09A6
099A:  MOVF   x8B,F
099C:  BNZ   09A6
099E:  MOVF   x8A,F
09A0:  BNZ   09A6
09A2:  CLRF   00
09A4:  BRA    09E8
09A6:  BTFSC  x8C.7
09A8:  BRA    09BA
09AA:  BCF    FD8.0
09AC:  RLCF   x89,F
09AE:  RLCF   x8A,F
09B0:  RLCF   x8B,F
09B2:  RLCF   x8C,F
09B4:  DECFSZ 00,F
09B6:  BRA    09A6
09B8:  BRA    09F6
09BA:  BTFSS  x87.7
09BC:  BRA    09C2
09BE:  BSF    x8C.7
09C0:  BRA    09E8
09C2:  BCF    x8C.7
09C4:  BRA    09E8
09C6:  MOVFF  82,00
09CA:  MOVFF  83,8C
09CE:  MOVFF  84,8B
09D2:  MOVFF  85,8A
09D6:  BRA    09E8
09D8:  MOVFF  7E,00
09DC:  MOVFF  7F,8C
09E0:  MOVFF  80,8B
09E4:  MOVFF  81,8A
09E8:  MOVFF  8C,01
09EC:  MOVFF  8B,02
09F0:  MOVFF  8A,03
09F4:  BRA    0A5E
09F6:  CLRF   00
09F8:  CLRF   01
09FA:  CLRF   02
09FC:  CLRF   03
09FE:  BRA    0A5E
0A00:  CLRF   x89
0A02:  COMF   x8A,F
0A04:  COMF   x8B,F
0A06:  COMF   x8C,F
0A08:  COMF   x89,F
0A0A:  INCF   x89,F
0A0C:  BNZ   0A18
0A0E:  INCF   x8A,F
0A10:  BNZ   0A18
0A12:  INCF   x8B,F
0A14:  BNZ   0A18
0A16:  INCF   x8C,F
0A18:  BTFSC  x88.0
0A1A:  BRA    0846
0A1C:  BTFSC  x88.1
0A1E:  BRA    08CC
0A20:  BTFSC  x88.2
0A22:  BRA    0938
0A24:  BRA    098C
0A26:  MOVF   FEF,W
0A28:  ADDWF  x8A,F
0A2A:  BNC   0A36
0A2C:  INCF   x8B,F
0A2E:  BNZ   0A36
0A30:  INCF   x8C,F
0A32:  BTFSC  FD8.2
0A34:  BSF    x86.0
0A36:  MOVF   FED,F
0A38:  MOVF   FEF,W
0A3A:  ADDWF  x8B,F
0A3C:  BNC   0A44
0A3E:  INCF   x8C,F
0A40:  BTFSC  FD8.2
0A42:  BSF    x86.0
0A44:  MOVF   FED,F
0A46:  MOVF   FEF,W
0A48:  BTFSC  FEF.7
0A4A:  BRA    0A4E
0A4C:  XORLW  80
0A4E:  ADDWF  x8C,F
0A50:  BTFSC  FD8.0
0A52:  BSF    x86.0
0A54:  BTFSC  x88.4
0A56:  BRA    0854
0A58:  BTFSC  x88.5
0A5A:  BRA    08DA
0A5C:  BRA    0946
0A5E:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #fuses NOWDT,MCLR,HS,NOUSBDIV,NOIESO,            //Selecciona el oscilador externo 
.................... #use delay(clock=48 Mhz, crystal= 48 MHz)   // Selecciona la velocidad del oscilador interno 
*
00FE:  CLRF   FEA
0100:  MOVLW  5F
0102:  MOVWF  FE9
0104:  MOVF   FEF,W
0106:  BZ    0124
0108:  MOVLW  0F
010A:  MOVWF  01
010C:  CLRF   00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  DECFSZ 01,F
0114:  BRA    010C
0116:  MOVLW  8F
0118:  MOVWF  00
011A:  DECFSZ 00,F
011C:  BRA    011A
011E:  NOP   
0120:  DECFSZ FEF,F
0122:  BRA    0108
0124:  RETURN 0
.................... #use i2c(Master,Fast=100000, sda=PIN_D6, scl=PIN_D7,force_sw) 
0126:  MOVLW  08
0128:  MOVWF  01
012A:  MOVLW  11
012C:  MOVWF  00
012E:  DECFSZ 00,F
0130:  BRA    012E
0132:  BCF    F8C.7
0134:  BCF    F95.7
0136:  MOVLW  11
0138:  MOVWF  00
013A:  DECFSZ 00,F
013C:  BRA    013A
013E:  RLCF   x63,F
0140:  BCF    F8C.6
0142:  BTFSC  FD8.0
0144:  BSF    F95.6
0146:  BTFSS  FD8.0
0148:  BCF    F95.6
014A:  BSF    F95.7
014C:  BTFSS  F83.7
014E:  BRA    014C
0150:  DECFSZ 01,F
0152:  BRA    012A
0154:  MOVLW  11
0156:  MOVWF  00
0158:  DECFSZ 00,F
015A:  BRA    0158
015C:  BCF    F8C.7
015E:  BCF    F95.7
0160:  NOP   
0162:  BSF    F95.6
0164:  MOVLW  11
0166:  MOVWF  00
0168:  DECFSZ 00,F
016A:  BRA    0168
016C:  MOVLW  11
016E:  MOVWF  00
0170:  DECFSZ 00,F
0172:  BRA    0170
0174:  BSF    F95.7
0176:  BTFSS  F83.7
0178:  BRA    0176
017A:  CLRF   01
017C:  MOVLW  11
017E:  MOVWF  00
0180:  DECFSZ 00,F
0182:  BRA    0180
0184:  BTFSC  F83.6
0186:  BSF    01.0
0188:  BCF    F8C.7
018A:  BCF    F95.7
018C:  BCF    F8C.6
018E:  BCF    F95.6
0190:  RETURN 0
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
*
17A0:  CLRF   19
17A2:  CLRF   1A
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... size_t mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #include "funciones.h" 
.................... /** 
.................... *	\file funciones.h 
.................... *	\brief Resumen del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <i2c_Flex_LCD.h> 
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.0 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
*
17B6:  CLRF   26
17B8:  MOVF   FC1,W
17BA:  ANDLW  C0
17BC:  IORLW  0F
17BE:  MOVWF  FC1
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD dispay 
.................... //     \1 Set write position on LCD Line 1 
.................... //     \2 Set write position on LCD Line 2 
.................... //     \3 Set write position on LCD Line 3 
.................... //     \4 Set write position on LCD Line 4 
.................... // 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with 
.................... //              an EXPANDER of I/O with connection I2C. The tests of these 
.................... //              routines have been programmed using the IC PCF8574T of Phillips. 
.................... //              I used 4 bits mode programming. The 8 bits mode programming 
.................... //              is possible if you use 2 x PCF8574T. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... //For PCF8574T the addressing is: 
....................  
.................... //Jp3 Jp2 Jp1 
.................... //A2 A1 A0  Hex 
.................... //L L L  0x40 
.................... //L L H  0x42 
.................... //L H L  0x44 
.................... //L H H  0x46 
.................... //H L L  0x48 
.................... //H L H  0x4A 
.................... //H H L  0x4C 
.................... //H H H  0x4E 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module 
....................  
.................... #define ON             1 
.................... #define OFF            0 
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1 
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2 
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3 
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4 
....................   
.................... byte address; 
.................... int1 lcd_backlight=ON; 
....................  
.................... void i2c_lcd_backlight_On(){ 
....................       lcd_backlight=ON; 
.................... } 
....................  
.................... void i2c_lcd_backlight_Off(){ 
....................       lcd_backlight=OFF; 
.................... } 
....................  
.................... void i2c_send_nibble(unsigned char data) 
....................    {    
....................         i2c_start(); 
....................         delay_us(20); 
....................         i2c_write(LCD_ADDR); //the slave addresse 
....................         delay_us(20); 
....................         i2c_write(data); 
....................         delay_us(20); 
....................         i2c_stop(); 
....................         delay_us(20); 
....................    } 
....................  
.................... void lcd_send_byte(unsigned char data) 
....................    { 
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN 
....................         i2c_send_nibble(data); 
....................         data=data-4;       //toggle EN back to 0 
....................         i2c_send_nibble(data); 
....................    } 
....................     
.................... void lcd_clear() 
.................... { 
....................     lcd_send_byte(0x00); 
....................     lcd_send_byte(0x10); 
....................     delay_ms(2); 
.................... } 
....................  
.................... void lcd_init() 
.................... { 
....................     delay_ms(200); //LCD power up delay 
....................         
....................    //Request works on the command by set the RS = 0 R/W = 0 write 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................            //First state in 8 bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x30); 
....................            //Then set to 4-bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x20); 
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h) 
....................         lcd_send_byte(0x20); 
....................         lcd_send_byte(0x80); 
....................            //no need cursor on (0Ch) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0xC0); 
....................            //the cursor moves to the left (06 h) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x60); 
....................            //clears the display 
....................         lcd_clear(); 
.................... } 
....................  
.................... void lcd_gotoxy( byte x, byte y) 
*
17A4:  CLRF   21
.................... {      
.................... static char data; 
....................       
....................    switch(y) 
....................    { 
....................       case 1:  address= lcd_line_one;     break; 
....................       case 2:  address= lcd_line_two;     break; 
....................       case 3:  address= lcd_line_three;   break; 
....................       case 4:  address= lcd_line_four;    break; 
....................       default: address= lcd_line_one;     break;  
....................    } 
....................   
....................    address+=x-1; 
....................    data=address&0xF0; 
....................    lcd_send_byte(data); 
....................    data=address&0x0F; 
....................    data=data<<4; 
....................    lcd_send_byte(data); 
.................... } 
....................  
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... { 
....................  char data;      
....................   switch(in_data) 
....................    {  
....................      case '\f': lcd_clear()    ;  break;                
....................      case '\1': lcd_gotoxy(1,1);  break; 
....................      case '\2': lcd_gotoxy(1,2);  break; 
....................      case '\3': lcd_gotoxy(1,3);  break; 
....................      case '\4': lcd_gotoxy(1,4);  break; 
....................  
....................      default: 
....................         data=in_data&0xF0; 
....................         data=data|RS; //set RS pin to 1 
....................         lcd_send_byte(data); 
....................         data=in_data&0x0F; 
....................         data=data<<4; 
....................         data=data|RS; //set RS pin to 1 
....................         lcd_send_byte(data); 
....................      break; 
....................    } 
.................... }  
....................  
....................  
....................  
.................... #ifndef FUNCIONES_H 
.................... #define FUNCIONES_H 
.................... //Declaracion de estados 
....................  
.................... #define 	PUNTO_TENS_CORR	0 
.................... #define 	CONVERSION_DESFASE	1 
.................... #define 	TENS_CORR_RMS	2 
.................... #define 	CALCULO_POT_ENER	3 
.................... #define 	MOSTRAR_DATOS	4 
....................  
.................... //Prototipos de los eventos 
.................... void maquina_estado(void); 
....................  
.................... #endif 
....................  
.................... #use fast_io(A) 
.................... #use fast_io(B) 
....................  
.................... const long carga= 0xE8AB; 
.................... extern int contador; 
.................... extern long pulso_timer; 
....................  
.................... void inicializar(); 
....................  
.................... void main() 
*
1790:  CLRF   FF8
1792:  BCF    FD0.7
1794:  BSF    07.7
1796:  BSF    20.0
1798:  CLRF   24
179A:  CLRF   23
179C:  BSF    20.0
179E:  BSF    20.0
*
17A6:  CLRF   22
17A8:  CLRF   25
17AA:  BSF    20.0
17AC:  MOVLW  14
17AE:  MOVWF  32
17B0:  CLRF   4F
17B2:  CLRF   24
17B4:  CLRF   23
*
17C0:  MOVLW  07
17C2:  MOVWF  FB4
.................... { 
....................  
.................... //declaracion de variables 
.................... //inicializacion de perifericos 
....................  
.................... 	inicializar() ; 
17C4:  GOTO   0382
....................      
....................     set_timer0(carga); 
17C8:  MOVLW  E8
17CA:  MOVWF  FD7
17CC:  MOVLW  AB
17CE:  MOVWF  FD6
.................... 	while(1) 
.................... 	{ 
....................  
.................... 		maquina_estado(); 
17D0:  BRA    11F4
17D2:  BRA    17D0
....................  
.................... 	} 
.................... } 
....................  
17D4:  SLEEP 
.................... void Inicializar(){ 
....................     setup_timer_0( RTCC_INTERNAL | T0_DIV_2); 
*
0382:  MOVLW  80
0384:  MOVWF  FD5
....................     set_tris_a(0xE8);// configuracion portA necesaria para la libreria control_ADC 
0386:  MOVLW  E8
0388:  MOVWF  F92
....................     set_tris_b(0xFF); 
038A:  MOVLW  FF
038C:  MOVWF  F93
....................     contador=0; 
038E:  CLRF   22
....................     lcd_init(); 
0390:  BRA    0240
....................     lcd_gotoxy(1,1); 
0392:  MOVLW  01
0394:  MOVWF  5F
0396:  MOVWF  x60
0398:  RCALL  029C
....................     printf(LCD_PUTC,"Primer prueba"); 
039A:  MOVLW  AE
039C:  MOVWF  FF6
039E:  MOVLW  00
03A0:  MOVWF  FF7
03A2:  BRA    0360
....................     lcd_backlight=ON; 
03A4:  BSF    20.0
....................     enable_interrupts (INT_RTCC); 
03A6:  BSF    FF2.5
....................     enable_interrupts (GLOBAL); 
03A8:  MOVLW  C0
03AA:  IORWF  FF2,F
....................     output_high (PIN_A0); //pone en alto el chipselect del AD7450 
03AC:  BSF    F89.0
....................     output_high (PIN_A1); // pone en alto el chipselect del MAX186 
03AE:  BSF    F89.1
03B0:  GOTO   17C8 (RETURN)
.................... } 
....................  
....................  
.................... /** 
.................... *	\file funciones.c 
.................... *	\brief  
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
00CC:  DATA 53,65
00CE:  DATA 20,6D
00D0:  DATA 69,64
00D2:  DATA 69,6F
00D4:  DATA 20,64
00D6:  DATA 65,73
00D8:  DATA 66,61
00DA:  DATA 73,65
00DC:  DATA 00,00
00DE:  DATA 50,6F
00E0:  DATA 74,65
00E2:  DATA 6E,63
00E4:  DATA 69,61
00E6:  DATA 3D,20
00E8:  DATA 25,66
00EA:  DATA 20,57
00EC:  DATA 00,00
00EE:  DATA 54,3D
00F0:  DATA 25,66
00F2:  DATA 20,56
00F4:  DATA 20,20
00F6:  DATA 49,3D
00F8:  DATA 25,66
00FA:  DATA 20,41
00FC:  DATA 00,00
*
052A:  MOVLW  8E
052C:  MOVWF  00
052E:  MOVFF  51,01
0532:  MOVFF  50,02
0536:  CLRF   03
0538:  BTFSS  51.7
053A:  BRA    0546
053C:  COMF   01,F
053E:  COMF   02,F
0540:  INCF   02,F
0542:  BNZ   0546
0544:  INCF   01,F
0546:  MOVF   01,F
0548:  BNZ   055C
054A:  MOVFF  02,01
054E:  CLRF   02
0550:  MOVLW  08
0552:  SUBWF  00,F
0554:  MOVF   01,F
0556:  BNZ   055C
0558:  CLRF   00
055A:  BRA    0570
055C:  BCF    FD8.0
055E:  BTFSC  01.7
0560:  BRA    056A
0562:  RLCF   02,F
0564:  RLCF   01,F
0566:  DECF   00,F
0568:  BRA    055C
056A:  BTFSC  51.7
056C:  BRA    0570
056E:  BCF    01.7
0570:  GOTO   1236 (RETURN)
*
0A60:  MOVFF  7B,82
0A64:  MOVF   x7F,W
0A66:  XORWF  x82,F
0A68:  BTFSS  x82.7
0A6A:  BRA    0A76
0A6C:  BCF    FD8.2
0A6E:  BCF    FD8.0
0A70:  BTFSC  x7B.7
0A72:  BSF    FD8.0
0A74:  BRA    0AD4
0A76:  MOVFF  7B,82
0A7A:  MOVFF  7E,83
0A7E:  MOVF   x7A,W
0A80:  SUBWF  x83,F
0A82:  BZ    0A90
0A84:  BTFSS  x82.7
0A86:  BRA    0AD4
0A88:  MOVF   FD8,W
0A8A:  XORLW  01
0A8C:  MOVWF  FD8
0A8E:  BRA    0AD4
0A90:  MOVFF  7F,83
0A94:  MOVF   x7B,W
0A96:  SUBWF  x83,F
0A98:  BZ    0AA6
0A9A:  BTFSS  x82.7
0A9C:  BRA    0AD4
0A9E:  MOVF   FD8,W
0AA0:  XORLW  01
0AA2:  MOVWF  FD8
0AA4:  BRA    0AD4
0AA6:  MOVFF  80,83
0AAA:  MOVF   x7C,W
0AAC:  SUBWF  x83,F
0AAE:  BZ    0ABC
0AB0:  BTFSS  x82.7
0AB2:  BRA    0AD4
0AB4:  MOVF   FD8,W
0AB6:  XORLW  01
0AB8:  MOVWF  FD8
0ABA:  BRA    0AD4
0ABC:  MOVFF  81,83
0AC0:  MOVF   x7D,W
0AC2:  SUBWF  x83,F
0AC4:  BZ    0AD2
0AC6:  BTFSS  x82.7
0AC8:  BRA    0AD4
0ACA:  MOVF   FD8,W
0ACC:  XORLW  01
0ACE:  MOVWF  FD8
0AD0:  BRA    0AD4
0AD2:  BCF    FD8.0
0AD4:  RETURN 0
*
0BE0:  TBLRD*+
0BE2:  MOVF   FF5,F
0BE4:  BZ    0C00
0BE6:  MOVFF  FF6,50
0BEA:  MOVFF  FF7,51
0BEE:  MOVFF  FF5,5E
0BF2:  CALL   02F2
0BF6:  MOVFF  50,FF6
0BFA:  MOVFF  51,FF7
0BFE:  BRA    0BE0
0C00:  GOTO   15F6 (RETURN)
0C04:  MOVLW  8E
0C06:  MOVWF  00
0C08:  MOVF   x7A,W
0C0A:  SUBWF  00,F
0C0C:  MOVFF  7B,02
0C10:  MOVFF  7C,01
0C14:  BSF    02.7
0C16:  MOVF   00,F
0C18:  BZ    0C2C
0C1A:  BCF    FD8.0
0C1C:  MOVF   02,F
0C1E:  BNZ   0C24
0C20:  MOVF   01,F
0C22:  BZ    0C2C
0C24:  RRCF   02,F
0C26:  RRCF   01,F
0C28:  DECFSZ 00,F
0C2A:  BRA    0C1A
0C2C:  BTFSS  x7B.7
0C2E:  BRA    0C3A
0C30:  COMF   01,F
0C32:  COMF   02,F
0C34:  INCF   01,F
0C36:  BTFSC  FD8.2
0C38:  INCF   02,F
0C3A:  GOTO   0CEA (RETURN)
*
0F84:  TBLRD*+
0F86:  MOVFF  FF6,51
0F8A:  MOVFF  FF7,52
0F8E:  MOVFF  FF5,5E
0F92:  CALL   02F2
0F96:  MOVFF  51,FF6
0F9A:  MOVFF  52,FF7
0F9E:  DECFSZ 50,F
0FA0:  BRA    0F84
0FA2:  RETURN 0
0FA4:  MOVF   5D,W
0FA6:  SUBLW  B6
0FA8:  MOVWF  5D
0FAA:  CLRF   03
0FAC:  MOVFF  5E,61
0FB0:  BSF    5E.7
0FB2:  BCF    FD8.0
0FB4:  RRCF   5E,F
0FB6:  RRCF   5F,F
0FB8:  RRCF   x60,F
0FBA:  RRCF   03,F
0FBC:  RRCF   02,F
0FBE:  RRCF   01,F
0FC0:  RRCF   00,F
0FC2:  DECFSZ 5D,F
0FC4:  BRA    0FB2
0FC6:  BTFSS  x61.7
0FC8:  BRA    0FE0
0FCA:  COMF   00,F
0FCC:  COMF   01,F
0FCE:  COMF   02,F
0FD0:  COMF   03,F
0FD2:  INCF   00,F
0FD4:  BTFSC  FD8.2
0FD6:  INCF   01,F
0FD8:  BTFSC  FD8.2
0FDA:  INCF   02,F
0FDC:  BTFSC  FD8.2
0FDE:  INCF   03,F
0FE0:  GOTO   10C2 (RETURN)
0FE4:  BTFSC  FD8.1
0FE6:  BRA    0FEE
0FE8:  CLRF   FEA
0FEA:  MOVLW  65
0FEC:  MOVWF  FE9
0FEE:  CLRF   00
0FF0:  CLRF   01
0FF2:  CLRF   02
0FF4:  CLRF   03
0FF6:  CLRF   x65
0FF8:  CLRF   x66
0FFA:  CLRF   x67
0FFC:  CLRF   x68
0FFE:  MOVF   x64,W
1000:  IORWF  x63,W
1002:  IORWF  x62,W
1004:  IORWF  x61,W
1006:  BZ    1060
1008:  MOVLW  20
100A:  MOVWF  x69
100C:  BCF    FD8.0
100E:  RLCF   5D,F
1010:  RLCF   5E,F
1012:  RLCF   5F,F
1014:  RLCF   x60,F
1016:  RLCF   x65,F
1018:  RLCF   x66,F
101A:  RLCF   x67,F
101C:  RLCF   x68,F
101E:  MOVF   x64,W
1020:  SUBWF  x68,W
1022:  BNZ   1034
1024:  MOVF   x63,W
1026:  SUBWF  x67,W
1028:  BNZ   1034
102A:  MOVF   x62,W
102C:  SUBWF  x66,W
102E:  BNZ   1034
1030:  MOVF   x61,W
1032:  SUBWF  x65,W
1034:  BNC   1054
1036:  MOVF   x61,W
1038:  SUBWF  x65,F
103A:  MOVF   x62,W
103C:  BTFSS  FD8.0
103E:  INCFSZ x62,W
1040:  SUBWF  x66,F
1042:  MOVF   x63,W
1044:  BTFSS  FD8.0
1046:  INCFSZ x63,W
1048:  SUBWF  x67,F
104A:  MOVF   x64,W
104C:  BTFSS  FD8.0
104E:  INCFSZ x64,W
1050:  SUBWF  x68,F
1052:  BSF    FD8.0
1054:  RLCF   00,F
1056:  RLCF   01,F
1058:  RLCF   02,F
105A:  RLCF   03,F
105C:  DECFSZ x69,F
105E:  BRA    100C
1060:  MOVFF  65,FEF
1064:  MOVFF  66,FEC
1068:  MOVFF  67,FEC
106C:  MOVFF  68,FEC
1070:  RETURN 0
1072:  MOVF   FE9,W
1074:  MOVWF  55
1076:  MOVF   54,W
1078:  MOVWF  57
107A:  BZ    10B0
107C:  MOVFF  53,81
1080:  MOVFF  52,80
1084:  MOVFF  51,7F
1088:  MOVFF  50,7E
108C:  CLRF   x85
108E:  CLRF   x84
1090:  MOVLW  20
1092:  MOVWF  x83
1094:  MOVLW  82
1096:  MOVWF  x82
1098:  CALL   05AA
109C:  MOVFF  03,53
10A0:  MOVFF  02,52
10A4:  MOVFF  01,51
10A8:  MOVFF  00,50
10AC:  DECFSZ 57,F
10AE:  BRA    107C
10B0:  MOVFF  53,60
10B4:  MOVFF  52,5F
10B8:  MOVFF  51,5E
10BC:  MOVFF  50,5D
10C0:  BRA    0FA4
10C2:  MOVFF  03,53
10C6:  MOVFF  02,52
10CA:  MOVFF  01,51
10CE:  MOVFF  00,50
10D2:  BTFSS  53.7
10D4:  BRA    10F0
10D6:  DECF   55,F
10D8:  BSF    55.5
10DA:  COMF   50,F
10DC:  COMF   51,F
10DE:  COMF   52,F
10E0:  COMF   53,F
10E2:  INCF   50,F
10E4:  BTFSC  FD8.2
10E6:  INCF   51,F
10E8:  BTFSC  FD8.2
10EA:  INCF   52,F
10EC:  BTFSC  FD8.2
10EE:  INCF   53,F
10F0:  MOVLW  3B
10F2:  MOVWF  5C
10F4:  MOVLW  9A
10F6:  MOVWF  5B
10F8:  MOVLW  CA
10FA:  MOVWF  5A
10FC:  CLRF   59
10FE:  MOVLW  0A
1100:  MOVWF  57
1102:  MOVF   54,W
1104:  BTFSC  FD8.2
1106:  INCF   55,F
1108:  BSF    FD8.1
110A:  CLRF   FEA
110C:  MOVLW  50
110E:  MOVWF  FE9
1110:  MOVFF  53,60
1114:  MOVFF  52,5F
1118:  MOVFF  51,5E
111C:  MOVFF  50,5D
1120:  MOVFF  5C,64
1124:  MOVFF  5B,63
1128:  MOVFF  5A,62
112C:  MOVFF  59,61
1130:  RCALL  0FE4
1132:  MOVF   01,W
1134:  MOVF   00,F
1136:  BNZ   1156
1138:  INCF   54,W
113A:  SUBWF  57,W
113C:  BZ    1156
113E:  MOVF   55,W
1140:  BZ    115A
1142:  ANDLW  0F
1144:  SUBWF  57,W
1146:  BZ    114A
1148:  BC    11C0
114A:  BTFSC  55.7
114C:  BRA    11C0
114E:  BTFSC  55.6
1150:  BRA    115A
1152:  MOVLW  20
1154:  BRA    11B6
1156:  MOVLW  20
1158:  ANDWF  55,F
115A:  BTFSS  55.5
115C:  BRA    1178
115E:  BCF    55.5
1160:  MOVF   54,W
1162:  BTFSS  FD8.2
1164:  DECF   55,F
1166:  MOVF   00,W
1168:  MOVWF  55
116A:  MOVLW  2D
116C:  MOVWF  5E
116E:  CALL   02F2
1172:  MOVF   55,W
1174:  MOVWF  00
1176:  CLRF   55
1178:  MOVF   54,W
117A:  SUBWF  57,W
117C:  BNZ   1194
117E:  MOVF   00,W
1180:  MOVWF  55
1182:  MOVLW  2E
1184:  MOVWF  5E
1186:  CALL   02F2
118A:  MOVF   55,W
118C:  MOVWF  00
118E:  MOVLW  20
1190:  ANDWF  55,F
1192:  MOVLW  00
1194:  MOVLW  30
1196:  BTFSS  55.5
1198:  BRA    11B6
119A:  BCF    55.5
119C:  MOVF   54,W
119E:  BTFSS  FD8.2
11A0:  DECF   55,F
11A2:  MOVF   00,W
11A4:  MOVWF  55
11A6:  MOVLW  2D
11A8:  MOVWF  5E
11AA:  CALL   02F2
11AE:  MOVF   55,W
11B0:  MOVWF  00
11B2:  CLRF   55
11B4:  MOVLW  30
11B6:  ADDWF  00,F
11B8:  MOVFF  00,5E
11BC:  CALL   02F2
11C0:  BCF    FD8.1
11C2:  MOVFF  5C,60
11C6:  MOVFF  5B,5F
11CA:  MOVFF  5A,5E
11CE:  MOVFF  59,5D
11D2:  CLRF   x64
11D4:  CLRF   x63
11D6:  CLRF   x62
11D8:  MOVLW  0A
11DA:  MOVWF  x61
11DC:  RCALL  0FE4
11DE:  MOVFF  03,5C
11E2:  MOVFF  02,5B
11E6:  MOVFF  01,5A
11EA:  MOVFF  00,59
11EE:  DECFSZ 57,F
11F0:  BRA    1108
11F2:  RETURN 0
....................  
.................... #list 
....................  
.................... #fuses NOWDT,MCLR,HS,NOUSBDIV,NOIESO,            //Selecciona el oscilador externo 
.................... #use delay(clock=48 Mhz, crystal= 48 MHz)   // Selecciona la velocidad del oscilador interno 
.................... #use i2c(Master,Fast=100000, sda=PIN_D6, scl=PIN_D7,force_sw) 
.................... int contador = 0 ;int pulso_timer = 0 ; 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
*
0AD6:  MOVFF  57,7D
0ADA:  MOVFF  56,7C
0ADE:  MOVFF  55,7B
0AE2:  MOVFF  54,7A
0AE6:  CLRF   x81
0AE8:  CLRF   x80
0AEA:  CLRF   x7F
0AEC:  CLRF   x7E
0AEE:  RCALL  0A60
0AF0:  BC    0AF4
0AF2:  BNZ   0AFE
....................       return(0.0); 
0AF4:  CLRF   00
0AF6:  CLRF   01
0AF8:  CLRF   02
0AFA:  CLRF   03
0AFC:  BRA    0BDE
....................  
....................    y=x; 
0AFE:  MOVFF  57,5B
0B02:  MOVFF  56,5A
0B06:  MOVFF  55,59
0B0A:  MOVFF  54,58
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
0B0E:  CLRF   x61
0B10:  MOVLW  58
0B12:  MOVWF  x60
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
0B14:  MOVFF  60,FE9
0B18:  MOVFF  61,FEA
0B1C:  MOVF   FEF,W
0B1E:  CLRF   x65
0B20:  MOVWF  x64
0B22:  MOVLW  7F
0B24:  ADDWF  x64,F
0B26:  MOVLW  00
0B28:  ADDWFC x65,F
0B2A:  BCF    FD8.0
0B2C:  RRCF   x65,W
0B2E:  RRCF   x64,W
0B30:  MOVFF  61,FEA
0B34:  MOVFF  60,FE9
0B38:  MOVWF  FEF
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
0B3A:  MOVFF  5B,5F
0B3E:  MOVFF  5A,5E
0B42:  MOVFF  59,5D
0B46:  MOVFF  58,5C
....................       y+=(x/y); 
0B4A:  MOVFF  57,65
0B4E:  MOVFF  56,64
0B52:  MOVFF  55,63
0B56:  MOVFF  54,62
0B5A:  MOVFF  5B,69
0B5E:  MOVFF  5A,68
0B62:  MOVFF  59,67
0B66:  MOVFF  58,66
0B6A:  RCALL  069C
0B6C:  BCF    FD8.1
0B6E:  MOVFF  5B,81
0B72:  MOVFF  5A,80
0B76:  MOVFF  59,7F
0B7A:  MOVFF  58,7E
0B7E:  MOVFF  03,85
0B82:  MOVFF  02,84
0B86:  MOVFF  01,83
0B8A:  MOVFF  00,82
0B8E:  RCALL  07F6
0B90:  MOVFF  03,5B
0B94:  MOVFF  02,5A
0B98:  MOVFF  01,59
0B9C:  MOVFF  00,58
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
0BA0:  MOVFF  60,FE9
0BA4:  MOVFF  61,FEA
0BA8:  DECF   FEF,F
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
0BAA:  MOVFF  5F,7D
0BAE:  MOVFF  5E,7C
0BB2:  MOVFF  5D,7B
0BB6:  MOVFF  5C,7A
0BBA:  MOVFF  5B,81
0BBE:  MOVFF  5A,80
0BC2:  MOVFF  59,7F
0BC6:  MOVFF  58,7E
0BCA:  RCALL  0A60
0BCC:  BNZ   0B3A
....................  
....................    return(res); 
0BCE:  MOVFF  5C,00
0BD2:  MOVFF  5D,01
0BD6:  MOVFF  5E,02
0BDA:  MOVFF  5F,03
0BDE:  RETURN 0
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0C3E:  CLRF   5F
0C40:  CLRF   5E
0C42:  CLRF   5D
0C44:  MOVLW  7F
0C46:  MOVWF  5C
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
0C48:  MOVLW  7E
0C4A:  MOVWF  x66
0C4C:  MOVLW  80
0C4E:  MOVWF  x67
0C50:  CLRF   x68
0C52:  CLRF   x69
0C54:  MOVLW  7A
0C56:  MOVWF  x6A
0C58:  MOVLW  2A
0C5A:  MOVWF  x6B
0C5C:  MOVLW  AA
0C5E:  MOVWF  x6C
0C60:  MOVLW  A3
0C62:  MOVWF  x6D
0C64:  MOVLW  75
0C66:  MOVWF  x6E
0C68:  MOVLW  B6
0C6A:  MOVWF  x6F
0C6C:  MOVLW  09
0C6E:  MOVWF  x70
0C70:  MOVLW  B4
0C72:  MOVWF  x71
0C74:  MOVLW  6F
0C76:  MOVWF  x72
0C78:  MOVLW  4F
0C7A:  MOVWF  x73
0C7C:  MOVLW  B6
0C7E:  MOVWF  x74
0C80:  MOVLW  AA
0C82:  MOVWF  x75
0C84:  MOVLW  69
0C86:  MOVWF  x76
0C88:  MOVLW  8B
0C8A:  MOVWF  x77
0C8C:  MOVLW  F6
0C8E:  MOVWF  x78
0C90:  MOVLW  E8
0C92:  MOVWF  x79
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
0C94:  MOVFF  53,7D
0C98:  MOVFF  52,7C
0C9C:  MOVFF  51,7B
0CA0:  MOVFF  50,7A
0CA4:  CLRF   x81
0CA6:  CLRF   x80
0CA8:  CLRF   x7F
0CAA:  CLRF   x7E
0CAC:  RCALL  0A60
0CAE:  BNC   0CB6
0CB0:  MOVF   51,W
0CB2:  XORLW  80
0CB4:  MOVWF  51
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
0CB6:  MOVFF  53,81
0CBA:  MOVFF  52,80
0CBE:  MOVFF  51,7F
0CC2:  MOVFF  50,7E
0CC6:  MOVLW  83
0CC8:  MOVWF  x85
0CCA:  MOVLW  F9
0CCC:  MOVWF  x84
0CCE:  MOVLW  22
0CD0:  MOVWF  x83
0CD2:  MOVLW  7E
0CD4:  MOVWF  x82
0CD6:  RCALL  05AA
0CD8:  MOVFF  03,7D
0CDC:  MOVFF  02,7C
0CE0:  MOVFF  01,7B
0CE4:  MOVFF  00,7A
0CE8:  BRA    0C04
0CEA:  MOVFF  01,60
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
0CEE:  MOVFF  53,81
0CF2:  MOVFF  52,80
0CF6:  MOVFF  51,7F
0CFA:  MOVFF  50,7E
0CFE:  MOVLW  83
0D00:  MOVWF  x85
0D02:  MOVLW  F9
0D04:  MOVWF  x84
0D06:  MOVLW  22
0D08:  MOVWF  x83
0D0A:  MOVLW  7E
0D0C:  MOVWF  x82
0D0E:  RCALL  05AA
0D10:  MOVFF  03,7D
0D14:  MOVFF  02,7C
0D18:  MOVFF  01,7B
0D1C:  MOVFF  00,7A
0D20:  CLRF   x7F
0D22:  MOVFF  60,7E
0D26:  RCALL  0574
0D28:  BSF    FD8.1
0D2A:  MOVFF  7D,81
0D2E:  MOVFF  7C,80
0D32:  MOVFF  7B,7F
0D36:  MOVFF  7A,7E
0D3A:  MOVFF  03,85
0D3E:  MOVFF  02,84
0D42:  MOVFF  01,83
0D46:  MOVFF  00,82
0D4A:  RCALL  07F6
0D4C:  MOVFF  03,65
0D50:  MOVFF  02,64
0D54:  MOVFF  01,63
0D58:  MOVFF  00,62
....................    quad = quad % 4;                    // quadrant (0 to 3) 
0D5C:  MOVLW  03
0D5E:  ANDWF  x60,F
....................  
....................    if (quad == 0 || quad == 2) 
0D60:  MOVF   x60,F
0D62:  BZ    0D6A
0D64:  MOVF   x60,W
0D66:  SUBLW  02
0D68:  BNZ   0D9E
....................       t = frac * PI_DIV_BY_TWO; 
0D6A:  MOVFF  65,81
0D6E:  MOVFF  64,80
0D72:  MOVFF  63,7F
0D76:  MOVFF  62,7E
0D7A:  MOVLW  DB
0D7C:  MOVWF  x85
0D7E:  MOVLW  0F
0D80:  MOVWF  x84
0D82:  MOVLW  49
0D84:  MOVWF  x83
0D86:  MOVLW  7F
0D88:  MOVWF  x82
0D8A:  RCALL  05AA
0D8C:  MOVFF  03,5B
0D90:  MOVFF  02,5A
0D94:  MOVFF  01,59
0D98:  MOVFF  00,58
0D9C:  BRA    0E68
....................    else if (quad == 1) 
0D9E:  DECFSZ x60,W
0DA0:  BRA    0E06
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0DA2:  BSF    FD8.1
0DA4:  CLRF   x81
0DA6:  CLRF   x80
0DA8:  CLRF   x7F
0DAA:  MOVLW  7F
0DAC:  MOVWF  x7E
0DAE:  MOVFF  65,85
0DB2:  MOVFF  64,84
0DB6:  MOVFF  63,83
0DBA:  MOVFF  62,82
0DBE:  RCALL  07F6
0DC0:  MOVFF  03,7D
0DC4:  MOVFF  02,7C
0DC8:  MOVFF  01,7B
0DCC:  MOVFF  00,7A
0DD0:  MOVFF  03,81
0DD4:  MOVFF  02,80
0DD8:  MOVFF  01,7F
0DDC:  MOVFF  00,7E
0DE0:  MOVLW  DB
0DE2:  MOVWF  x85
0DE4:  MOVLW  0F
0DE6:  MOVWF  x84
0DE8:  MOVLW  49
0DEA:  MOVWF  x83
0DEC:  MOVLW  7F
0DEE:  MOVWF  x82
0DF0:  CALL   05AA
0DF4:  MOVFF  03,5B
0DF8:  MOVFF  02,5A
0DFC:  MOVFF  01,59
0E00:  MOVFF  00,58
0E04:  BRA    0E68
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0E06:  BSF    FD8.1
0E08:  MOVFF  65,81
0E0C:  MOVFF  64,80
0E10:  MOVFF  63,7F
0E14:  MOVFF  62,7E
0E18:  CLRF   x85
0E1A:  CLRF   x84
0E1C:  CLRF   x83
0E1E:  MOVLW  7F
0E20:  MOVWF  x82
0E22:  RCALL  07F6
0E24:  MOVFF  03,7D
0E28:  MOVFF  02,7C
0E2C:  MOVFF  01,7B
0E30:  MOVFF  00,7A
0E34:  MOVFF  03,81
0E38:  MOVFF  02,80
0E3C:  MOVFF  01,7F
0E40:  MOVFF  00,7E
0E44:  MOVLW  DB
0E46:  MOVWF  x85
0E48:  MOVLW  0F
0E4A:  MOVWF  x84
0E4C:  MOVLW  49
0E4E:  MOVWF  x83
0E50:  MOVLW  7F
0E52:  MOVWF  x82
0E54:  CALL   05AA
0E58:  MOVFF  03,5B
0E5C:  MOVFF  02,5A
0E60:  MOVFF  01,59
0E64:  MOVFF  00,58
....................  
....................    y = 1.0; 
0E68:  CLRF   57
0E6A:  CLRF   56
0E6C:  CLRF   55
0E6E:  MOVLW  7F
0E70:  MOVWF  54
....................    t = t * t; 
0E72:  MOVFF  5B,81
0E76:  MOVFF  5A,80
0E7A:  MOVFF  59,7F
0E7E:  MOVFF  58,7E
0E82:  MOVFF  5B,85
0E86:  MOVFF  5A,84
0E8A:  MOVFF  59,83
0E8E:  MOVFF  58,82
0E92:  CALL   05AA
0E96:  MOVFF  03,5B
0E9A:  MOVFF  02,5A
0E9E:  MOVFF  01,59
0EA2:  MOVFF  00,58
....................    for (i = 0; i <= 4; i++) 
0EA6:  CLRF   x61
0EA8:  MOVF   x61,W
0EAA:  SUBLW  04
0EAC:  BNC   0F60
....................    { 
....................       t2 = t2 * t; 
0EAE:  MOVFF  5F,81
0EB2:  MOVFF  5E,80
0EB6:  MOVFF  5D,7F
0EBA:  MOVFF  5C,7E
0EBE:  MOVFF  5B,85
0EC2:  MOVFF  5A,84
0EC6:  MOVFF  59,83
0ECA:  MOVFF  58,82
0ECE:  CALL   05AA
0ED2:  MOVFF  03,5F
0ED6:  MOVFF  02,5E
0EDA:  MOVFF  01,5D
0EDE:  MOVFF  00,5C
....................       y = y + p[i] * t2; 
0EE2:  MOVF   x61,W
0EE4:  MULLW  04
0EE6:  MOVF   FF3,W
0EE8:  CLRF   03
0EEA:  ADDLW  66
0EEC:  MOVWF  FE9
0EEE:  MOVLW  00
0EF0:  ADDWFC 03,W
0EF2:  MOVWF  FEA
0EF4:  MOVFF  FEF,7E
0EF8:  MOVFF  FEC,7F
0EFC:  MOVFF  FEC,80
0F00:  MOVFF  FEC,81
0F04:  MOVFF  5F,85
0F08:  MOVFF  5E,84
0F0C:  MOVFF  5D,83
0F10:  MOVFF  5C,82
0F14:  CALL   05AA
0F18:  MOVFF  FEA,7B
0F1C:  MOVFF  FE9,7A
0F20:  BCF    FD8.1
0F22:  MOVFF  57,81
0F26:  MOVFF  56,80
0F2A:  MOVFF  55,7F
0F2E:  MOVFF  54,7E
0F32:  MOVFF  03,85
0F36:  MOVFF  02,84
0F3A:  MOVFF  01,83
0F3E:  MOVFF  00,82
0F42:  RCALL  07F6
0F44:  MOVFF  7B,FEA
0F48:  MOVFF  7A,FE9
0F4C:  MOVFF  03,57
0F50:  MOVFF  02,56
0F54:  MOVFF  01,55
0F58:  MOVFF  00,54
0F5C:  INCF   x61,F
0F5E:  BRA    0EA8
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0F60:  MOVF   x60,W
0F62:  SUBLW  02
0F64:  BZ    0F6A
0F66:  DECFSZ x60,W
0F68:  BRA    0F70
....................       y = -y;  // correct sign 
0F6A:  MOVF   55,W
0F6C:  XORLW  80
0F6E:  MOVWF  55
....................  
....................    return (y); 
0F70:  MOVFF  54,00
0F74:  MOVFF  55,01
0F78:  MOVFF  56,02
0F7C:  MOVFF  57,03
0F80:  GOTO   161A (RETURN)
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "funciones.h" 
.................... /** 
.................... *	\file funciones.h 
.................... *	\brief Resumen del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <i2c_Flex_LCD.h> 
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.0 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD dispay 
.................... //     \1 Set write position on LCD Line 1 
.................... //     \2 Set write position on LCD Line 2 
.................... //     \3 Set write position on LCD Line 3 
.................... //     \4 Set write position on LCD Line 4 
.................... // 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with 
.................... //              an EXPANDER of I/O with connection I2C. The tests of these 
.................... //              routines have been programmed using the IC PCF8574T of Phillips. 
.................... //              I used 4 bits mode programming. The 8 bits mode programming 
.................... //              is possible if you use 2 x PCF8574T. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... //For PCF8574T the addressing is: 
....................  
.................... //Jp3 Jp2 Jp1 
.................... //A2 A1 A0  Hex 
.................... //L L L  0x40 
.................... //L L H  0x42 
.................... //L H L  0x44 
.................... //L H H  0x46 
.................... //H L L  0x48 
.................... //H L H  0x4A 
.................... //H H L  0x4C 
.................... //H H H  0x4E 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module 
....................  
.................... #define ON             1 
.................... #define OFF            0 
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1 
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2 
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3 
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4 
....................   
.................... byte address; 
.................... int1 lcd_backlight=ON; 
....................  
.................... void i2c_lcd_backlight_On(){ 
....................       lcd_backlight=ON; 
.................... } 
....................  
.................... void i2c_lcd_backlight_Off(){ 
....................       lcd_backlight=OFF; 
.................... } 
....................  
.................... void i2c_send_nibble(unsigned char data) 
....................    {    
....................         i2c_start(); 
*
0192:  BSF    F95.6
0194:  MOVLW  11
0196:  MOVWF  00
0198:  DECFSZ 00,F
019A:  BRA    0198
019C:  BSF    F95.7
019E:  MOVLW  11
01A0:  MOVWF  00
01A2:  DECFSZ 00,F
01A4:  BRA    01A2
01A6:  BCF    F8C.6
01A8:  BCF    F95.6
01AA:  MOVLW  11
01AC:  MOVWF  00
01AE:  DECFSZ 00,F
01B0:  BRA    01AE
01B2:  BCF    F8C.7
01B4:  BCF    F95.7
....................         delay_us(20); 
01B6:  MOVLW  4F
01B8:  MOVWF  00
01BA:  DECFSZ 00,F
01BC:  BRA    01BA
01BE:  BRA    01C0
....................         i2c_write(LCD_ADDR); //the slave addresse 
01C0:  MOVLW  4E
01C2:  MOVWF  x63
01C4:  RCALL  0126
....................         delay_us(20); 
01C6:  MOVLW  4F
01C8:  MOVWF  00
01CA:  DECFSZ 00,F
01CC:  BRA    01CA
01CE:  BRA    01D0
....................         i2c_write(data); 
01D0:  MOVFF  62,63
01D4:  RCALL  0126
....................         delay_us(20); 
01D6:  MOVLW  4F
01D8:  MOVWF  00
01DA:  DECFSZ 00,F
01DC:  BRA    01DA
01DE:  BRA    01E0
....................         i2c_stop(); 
01E0:  BCF    F95.6
01E2:  NOP   
01E4:  BSF    F95.7
01E6:  BTFSS  F83.7
01E8:  BRA    01E6
01EA:  MOVLW  11
01EC:  MOVWF  00
01EE:  DECFSZ 00,F
01F0:  BRA    01EE
01F2:  BRA    01F4
01F4:  NOP   
01F6:  BSF    F95.6
01F8:  MOVLW  11
01FA:  MOVWF  00
01FC:  DECFSZ 00,F
01FE:  BRA    01FC
....................         delay_us(20); 
0200:  MOVLW  4F
0202:  MOVWF  00
0204:  DECFSZ 00,F
0206:  BRA    0204
0208:  BRA    020A
020A:  RETURN 0
....................    } 
....................  
.................... void lcd_send_byte(unsigned char data) 
....................    { 
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN 
020C:  BTFSS  20.0
020E:  BRA    021A
0210:  MOVF   x61,W
0212:  IORLW  04
0214:  IORLW  08
0216:  MOVWF  x61
0218:  BRA    021C
021A:  BSF    x61.2
....................         i2c_send_nibble(data); 
021C:  MOVFF  61,62
0220:  RCALL  0192
....................         data=data-4;       //toggle EN back to 0 
0222:  MOVLW  04
0224:  SUBWF  x61,F
....................         i2c_send_nibble(data); 
0226:  MOVFF  61,62
022A:  RCALL  0192
022C:  RETURN 0
....................    } 
....................     
.................... void lcd_clear() 
.................... { 
....................     lcd_send_byte(0x00); 
022E:  CLRF   x61
0230:  RCALL  020C
....................     lcd_send_byte(0x10); 
0232:  MOVLW  10
0234:  MOVWF  x61
0236:  RCALL  020C
....................     delay_ms(2); 
0238:  MOVLW  02
023A:  MOVWF  5F
023C:  RCALL  00FE
023E:  RETURN 0
.................... } 
....................  
.................... void lcd_init() 
.................... { 
....................     delay_ms(200); //LCD power up delay 
0240:  MOVLW  C8
0242:  MOVWF  5F
0244:  RCALL  00FE
....................         
....................    //Request works on the command by set the RS = 0 R/W = 0 write 
....................         lcd_send_byte(0x00); 
0246:  CLRF   x61
0248:  RCALL  020C
....................         lcd_send_byte(0x10); 
024A:  MOVLW  10
024C:  MOVWF  x61
024E:  RCALL  020C
....................         lcd_send_byte(0x00); 
0250:  CLRF   x61
0252:  RCALL  020C
....................         lcd_send_byte(0x00); 
0254:  CLRF   x61
0256:  RCALL  020C
....................         lcd_send_byte(0x10); 
0258:  MOVLW  10
025A:  MOVWF  x61
025C:  RCALL  020C
....................            //First state in 8 bit mode 
....................         lcd_send_byte(0x30); 
025E:  MOVLW  30
0260:  MOVWF  x61
0262:  RCALL  020C
....................         lcd_send_byte(0x30); 
0264:  MOVLW  30
0266:  MOVWF  x61
0268:  RCALL  020C
....................            //Then set to 4-bit mode 
....................         lcd_send_byte(0x30); 
026A:  MOVLW  30
026C:  MOVWF  x61
026E:  RCALL  020C
....................         lcd_send_byte(0x20); 
0270:  MOVLW  20
0272:  MOVWF  x61
0274:  RCALL  020C
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h) 
....................         lcd_send_byte(0x20); 
0276:  MOVLW  20
0278:  MOVWF  x61
027A:  RCALL  020C
....................         lcd_send_byte(0x80); 
027C:  MOVLW  80
027E:  MOVWF  x61
0280:  RCALL  020C
....................            //no need cursor on (0Ch) 
....................         lcd_send_byte(0x00); 
0282:  CLRF   x61
0284:  RCALL  020C
....................         lcd_send_byte(0xC0); 
0286:  MOVLW  C0
0288:  MOVWF  x61
028A:  RCALL  020C
....................            //the cursor moves to the left (06 h) 
....................         lcd_send_byte(0x00); 
028C:  CLRF   x61
028E:  RCALL  020C
....................         lcd_send_byte(0x60); 
0290:  MOVLW  60
0292:  MOVWF  x61
0294:  RCALL  020C
....................            //clears the display 
....................         lcd_clear(); 
0296:  RCALL  022E
0298:  GOTO   0392 (RETURN)
.................... } 
....................  
.................... void lcd_gotoxy( byte x, byte y) 
.................... {      
.................... static char data; 
....................       
....................    switch(y) 
029C:  MOVF   x60,W
029E:  XORLW  01
02A0:  BZ    02B0
02A2:  XORLW  03
02A4:  BZ    02B6
02A6:  XORLW  01
02A8:  BZ    02BC
02AA:  XORLW  07
02AC:  BZ    02C2
02AE:  BRA    02C8
....................    { 
....................       case 1:  address= lcd_line_one;     break; 
02B0:  MOVLW  80
02B2:  MOVWF  1F
02B4:  BRA    02CC
....................       case 2:  address= lcd_line_two;     break; 
02B6:  MOVLW  C0
02B8:  MOVWF  1F
02BA:  BRA    02CC
....................       case 3:  address= lcd_line_three;   break; 
02BC:  MOVLW  94
02BE:  MOVWF  1F
02C0:  BRA    02CC
....................       case 4:  address= lcd_line_four;    break; 
02C2:  MOVLW  D4
02C4:  MOVWF  1F
02C6:  BRA    02CC
....................       default: address= lcd_line_one;     break;  
02C8:  MOVLW  80
02CA:  MOVWF  1F
....................    } 
....................   
....................    address+=x-1; 
02CC:  MOVLW  01
02CE:  SUBWF  5F,W
02D0:  ADDWF  1F,F
....................    data=address&0xF0; 
02D2:  MOVF   1F,W
02D4:  ANDLW  F0
02D6:  MOVWF  26
....................    lcd_send_byte(data); 
02D8:  MOVFF  26,61
02DC:  RCALL  020C
....................    data=address&0x0F; 
02DE:  MOVF   1F,W
02E0:  ANDLW  0F
02E2:  MOVWF  26
....................    data=data<<4; 
02E4:  SWAPF  26,F
02E6:  MOVLW  F0
02E8:  ANDWF  26,F
....................    lcd_send_byte(data); 
02EA:  MOVFF  26,61
02EE:  RCALL  020C
02F0:  RETURN 0
.................... } 
....................  
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... { 
....................  char data;      
....................   switch(in_data) 
02F2:  MOVF   5E,W
02F4:  XORLW  0C
02F6:  BZ    030A
02F8:  XORLW  0D
02FA:  BZ    030E
02FC:  XORLW  03
02FE:  BZ    0318
0300:  XORLW  01
0302:  BZ    0324
0304:  XORLW  07
0306:  BZ    0330
0308:  BRA    033C
....................    {  
....................      case '\f': lcd_clear()    ;  break;                
030A:  RCALL  022E
030C:  BRA    035E
....................      case '\1': lcd_gotoxy(1,1);  break; 
030E:  MOVLW  01
0310:  MOVWF  5F
0312:  MOVWF  x60
0314:  RCALL  029C
0316:  BRA    035E
....................      case '\2': lcd_gotoxy(1,2);  break; 
0318:  MOVLW  01
031A:  MOVWF  5F
031C:  MOVLW  02
031E:  MOVWF  x60
0320:  RCALL  029C
0322:  BRA    035E
....................      case '\3': lcd_gotoxy(1,3);  break; 
0324:  MOVLW  01
0326:  MOVWF  5F
0328:  MOVLW  03
032A:  MOVWF  x60
032C:  RCALL  029C
032E:  BRA    035E
....................      case '\4': lcd_gotoxy(1,4);  break; 
0330:  MOVLW  01
0332:  MOVWF  5F
0334:  MOVLW  04
0336:  MOVWF  x60
0338:  RCALL  029C
033A:  BRA    035E
....................  
....................      default: 
....................         data=in_data&0xF0; 
033C:  MOVF   5E,W
033E:  ANDLW  F0
0340:  MOVWF  5F
....................         data=data|RS; //set RS pin to 1 
0342:  BSF    5F.0
....................         lcd_send_byte(data); 
0344:  MOVFF  5F,61
0348:  RCALL  020C
....................         data=in_data&0x0F; 
034A:  MOVF   5E,W
034C:  ANDLW  0F
034E:  MOVWF  5F
....................         data=data<<4; 
0350:  SWAPF  5F,F
0352:  MOVLW  F0
0354:  ANDWF  5F,F
....................         data=data|RS; //set RS pin to 1 
0356:  BSF    5F.0
....................         lcd_send_byte(data); 
0358:  MOVFF  5F,61
035C:  RCALL  020C
....................      break; 
....................    } 
035E:  RETURN 0
.................... }  
....................  
....................  
....................  
.................... #ifndef FUNCIONES_H 
.................... #define FUNCIONES_H 
.................... //Declaracion de estados 
....................  
.................... #define 	PUNTO_TENS_CORR	0 
.................... #define 	CONVERSION_DESFASE	1 
.................... #define 	TENS_CORR_RMS	2 
.................... #define 	CALCULO_POT_ENER	3 
.................... #define 	MOSTRAR_DATOS	4 
....................  
.................... //Prototipos de los eventos 
.................... void maquina_estado(void); 
....................  
.................... #endif 
....................  
.................... #include <Control_ADCs.h> 
.................... /*  
....................  * File:   MAX191.h 
....................  * Author: MARCOS 
....................  * 
....................  * Created on 23 de septiembre de 2016, 08:14 
....................  */ 
....................  
.................... #ifndef Control_ADCs_H 
.................... #define Control_ADCs_H 
....................  
.................... #define ADC_CSCorriente PIN_A0  // salida 
.................... #define ADC_CSTension PIN_A1 // salida 
.................... #define ADC_SCLK PIN_A2 // salida clock tension 
.................... #define ADC_SCLKcorr PIN_B1 
.................... #define ADC_DOUT PIN_B0  // entrada, por aqui ingresa la info del MAX186 
.................... #define ADC_DIN PIN_A4 //salida, se envia la informacion al MAX186 
.................... #define ADC_SSTRB PIN_A5//entrada 
.................... #define ADC_SDATA PIN_A3//entrada SDATA en AD7450 
....................  
.................... //control AD7450 
.................... signed long leer_Tension(){ 
*
03B4:  CLRF   51
03B6:  CLRF   50
....................     signed long dato=0,dato_t; 
....................     int i; 
....................     output_low (ADC_CSTension); 
03B8:  BCF    F92.1
03BA:  BCF    F89.1
....................     delay_us(1); 
03BC:  MOVLW  03
03BE:  MOVWF  00
03C0:  DECFSZ 00,F
03C2:  BRA    03C0
03C4:  BRA    03C6
....................     output_low (ADC_SCLK); 
03C6:  BCF    F92.2
03C8:  BCF    F89.2
....................     delay_us(1); 
03CA:  MOVLW  03
03CC:  MOVWF  00
03CE:  DECFSZ 00,F
03D0:  BRA    03CE
03D2:  BRA    03D4
....................     output_high (ADC_SCLK); 
03D4:  BCF    F92.2
03D6:  BSF    F89.2
....................     delay_us(1); 
03D8:  MOVLW  03
03DA:  MOVWF  00
03DC:  DECFSZ 00,F
03DE:  BRA    03DC
03E0:  BRA    03E2
....................      
....................         for(i=0;i<15;i++){ 
03E2:  CLRF   54
03E4:  MOVF   54,W
03E6:  SUBLW  0E
03E8:  BNC   041A
....................           shift_left(&dato,2,input(ADC_SDATA)); 
03EA:  BSF    F92.3
03EC:  BTFSC  F80.3
03EE:  BRA    03F4
03F0:  BCF    FD8.0
03F2:  BRA    03F6
03F4:  BSF    FD8.0
03F6:  RLCF   50,F
03F8:  RLCF   51,F
....................           output_low(ADC_SCLK); 
03FA:  BCF    F92.2
03FC:  BCF    F89.2
....................           delay_us(1);  
03FE:  MOVLW  03
0400:  MOVWF  00
0402:  DECFSZ 00,F
0404:  BRA    0402
0406:  BRA    0408
....................           output_high(ADC_SCLK);  
0408:  BCF    F92.2
040A:  BSF    F89.2
....................           delay_us(1); 
040C:  MOVLW  03
040E:  MOVWF  00
0410:  DECFSZ 00,F
0412:  BRA    0410
0414:  BRA    0416
0416:  INCF   54,F
0418:  BRA    03E4
....................         } 
....................  
....................        // output_high (ADC_SCLK); 
....................        // delay_us(1); 
....................         output_high (ADC_CSTension); 
041A:  BCF    F92.1
041C:  BSF    F89.1
....................          
....................        dato_t=(dato&0x0800); 
041E:  CLRF   52
0420:  MOVF   51,W
0422:  ANDLW  08
0424:  MOVWF  53
....................          
....................       if (dato_t==0x0800){ 
0426:  MOVF   52,F
0428:  BNZ   0444
042A:  MOVF   53,W
042C:  SUBLW  08
042E:  BNZ   0444
....................             dato=-2048+(dato&0xF7FF); 
0430:  MOVFF  50,00
0434:  MOVF   51,W
0436:  ANDLW  F7
0438:  MOVWF  03
043A:  MOVFF  50,50
043E:  MOVLW  F8
0440:  ADDWF  03,W
0442:  MOVWF  51
....................       } 
....................     return(dato); 
0444:  MOVFF  50,01
0448:  MOVFF  51,02
044C:  GOTO   1216 (RETURN)
.................... } 
....................  
.................... //control MAX186 
.................... long leer_Corriente(){ 
0450:  CLRF   51
0452:  CLRF   50
0454:  MOVLW  8E
0456:  MOVWF  52
....................     long dato=0; 
....................     BYTE config= 0b10001110; 
....................     int i; 
....................     output_low (ADC_CSCorriente); 
0458:  BCF    F92.0
045A:  BCF    F89.0
....................     output_low (ADC_DIN); 
045C:  BCF    F92.4
045E:  BCF    F89.4
....................     delay_us(1); 
0460:  MOVLW  03
0462:  MOVWF  00
0464:  DECFSZ 00,F
0466:  BRA    0464
0468:  BRA    046A
....................      
....................     for(i=0; i<8; i++) { 
046A:  CLRF   53
046C:  MOVF   53,W
046E:  SUBLW  07
0470:  BNC   04A0
....................       output_bit(ADC_DIN, shift_left(&config,1,0)); 
0472:  BCF    FD8.0
0474:  RLCF   52,F
0476:  BC    047C
0478:  BCF    F89.4
047A:  BRA    047E
047C:  BSF    F89.4
047E:  BCF    F92.4
....................       output_high(ADC_SCLKcorr); 
0480:  BCF    F93.1
0482:  BSF    F8A.1
....................       delay_us(1); 
0484:  MOVLW  03
0486:  MOVWF  00
0488:  DECFSZ 00,F
048A:  BRA    0488
048C:  BRA    048E
....................       output_low(ADC_SCLKcorr);	 
048E:  BCF    F93.1
0490:  BCF    F8A.1
....................       delay_us(1); 
0492:  MOVLW  03
0494:  MOVWF  00
0496:  DECFSZ 00,F
0498:  BRA    0496
049A:  BRA    049C
049C:  INCF   53,F
049E:  BRA    046C
....................    } 
....................  
....................     output_high(ADC_CSCorriente); 
04A0:  BCF    F92.0
04A2:  BSF    F89.0
....................      
....................     while(input(ADC_SSTRB)=='0');    
....................          
....................         output_low (ADC_CSCorriente); 
04A4:  BCF    F92.0
04A6:  BCF    F89.0
....................         output_high (ADC_SCLKcorr); 
04A8:  BCF    F93.1
04AA:  BSF    F8A.1
....................         delay_us(1); 
04AC:  MOVLW  03
04AE:  MOVWF  00
04B0:  DECFSZ 00,F
04B2:  BRA    04B0
04B4:  BRA    04B6
....................         output_low (ADC_SCLKcorr); 
04B6:  BCF    F93.1
04B8:  BCF    F8A.1
....................         delay_us(1); 
04BA:  MOVLW  03
04BC:  MOVWF  00
04BE:  DECFSZ 00,F
04C0:  BRA    04BE
04C2:  BRA    04C4
....................          
....................         for(i=0;i<15;i++){ 
04C4:  CLRF   53
04C6:  MOVF   53,W
04C8:  SUBLW  0E
04CA:  BNC   04FC
....................           output_high(ADC_SCLKcorr); 
04CC:  BCF    F93.1
04CE:  BSF    F8A.1
....................           delay_us(1); 
04D0:  MOVLW  03
04D2:  MOVWF  00
04D4:  DECFSZ 00,F
04D6:  BRA    04D4
04D8:  BRA    04DA
....................           shift_left(&dato,2,input(ADC_DOUT));  
04DA:  BSF    F93.0
04DC:  BTFSC  F81.0
04DE:  BRA    04E4
04E0:  BCF    FD8.0
04E2:  BRA    04E6
04E4:  BSF    FD8.0
04E6:  RLCF   50,F
04E8:  RLCF   51,F
....................           output_low(ADC_SCLKcorr); 
04EA:  BCF    F93.1
04EC:  BCF    F8A.1
....................           delay_us(1); 
04EE:  MOVLW  03
04F0:  MOVWF  00
04F2:  DECFSZ 00,F
04F4:  BRA    04F2
04F6:  BRA    04F8
04F8:  INCF   53,F
04FA:  BRA    04C6
....................         } 
....................   
....................          
....................         output_high (ADC_CSCorriente); 
04FC:  BCF    F92.0
04FE:  BSF    F89.0
....................      
....................        
....................     dato= (dato>>3)& 0x0FFF; 
0500:  RRCF   51,W
0502:  MOVWF  55
0504:  RRCF   50,W
0506:  MOVWF  54
0508:  RRCF   55,F
050A:  RRCF   54,F
050C:  RRCF   55,F
050E:  RRCF   54,F
0510:  MOVLW  1F
0512:  ANDWF  55,F
0514:  MOVFF  54,50
0518:  MOVF   55,W
051A:  ANDLW  0F
051C:  MOVWF  51
....................     return(dato); 
051E:  MOVFF  50,01
0522:  MOVFF  51,02
0526:  GOTO   1222 (RETURN)
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... //Implementacion Switch-Case 
....................  
.................... /** 
.................... *	\fn void maquina_estado() 
.................... *	\brief Implementacion Switch-Case 
.................... *	\details  
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
....................  **/ 
.................... signed long punto1; 
.................... long punto2; 
.................... int8 pos_V,pos_I,pos_V_A,pos_I_A; 
.................... int control_V, control_I; 
.................... int desfase; 
.................... int puntos=20;//puntos por periodo 
.................... float tension, corriente, tension_RMS,corriente_RMS, t_desfase, potencia_ins,angulo; 
....................  
.................... const long carga= 0xE8AB; 
....................  
.................... #INT_RTCC                // interrupcion para demora de 1 ms 
.................... void interrtimer_0(){ 
....................     set_timer0(carga);   // interrupcion cada 1 ms 
*
00BC:  MOVLW  E8
00BE:  MOVWF  FD7
00C0:  MOVLW  AB
00C2:  MOVWF  FD6
....................     pulso_timer++; 
00C4:  INCF   25,F
....................  
00C6:  BCF    FF2.2
00C8:  GOTO   0060
....................    } 
....................  
.................... void maquina_estado() 
.................... { 
.................... 		static int estado = PUNTO_TENS_CORR; 
....................  
.................... 		switch(estado) 
*
11F4:  MOVF   4F,W
11F6:  XORLW  00
11F8:  BZ    1212
11FA:  XORLW  01
11FC:  BZ    126A
11FE:  XORLW  03
1200:  BTFSC  FD8.2
1202:  BRA    13D8
1204:  XORLW  01
1206:  BTFSC  FD8.2
1208:  BRA    14AA
120A:  XORLW  07
120C:  BTFSC  FD8.2
120E:  BRA    16A6
1210:  BRA    178A
.................... 		{ 
.................... 			case PUNTO_TENS_CORR: 
....................                 punto1= leer_Tension(); 
1212:  GOTO   03B4
1216:  MOVFF  02,28
121A:  MOVFF  01,27
....................                 punto2= leer_Corriente(); // comprobar si funciona con el tiempo de demora de la lectura del externo 
121E:  GOTO   0450
1222:  MOVFF  02,2A
1226:  MOVFF  01,29
....................                 // convierte los valores de long a float 
....................                 tension=punto1; 
122A:  MOVFF  28,51
122E:  MOVFF  27,50
1232:  GOTO   052A
1236:  MOVFF  03,36
123A:  MOVFF  02,35
123E:  MOVFF  01,34
1242:  MOVFF  00,33
....................                 corriente=punto2; 
1246:  MOVFF  2A,7F
124A:  MOVFF  29,7E
124E:  CALL   0574
1252:  MOVFF  03,3A
1256:  MOVFF  02,39
125A:  MOVFF  01,38
125E:  MOVFF  00,37
....................                 contador++; 
1262:  INCF   22,F
.................... 					estado = CONVERSION_DESFASE; 
1264:  MOVLW  01
1266:  MOVWF  4F
....................  
.................... 				break; 
1268:  BRA    178C
.................... 			 
.................... 			case CONVERSION_DESFASE: 
....................                 tension= (tension)*2.5/2048; 
126A:  MOVFF  36,81
126E:  MOVFF  35,80
1272:  MOVFF  34,7F
1276:  MOVFF  33,7E
127A:  CLRF   x85
127C:  CLRF   x84
127E:  MOVLW  20
1280:  MOVWF  x83
1282:  MOVLW  80
1284:  MOVWF  x82
1286:  CALL   05AA
128A:  MOVFF  03,53
128E:  MOVFF  02,52
1292:  MOVFF  01,51
1296:  MOVFF  00,50
129A:  MOVFF  03,65
129E:  MOVFF  02,64
12A2:  MOVFF  01,63
12A6:  MOVFF  00,62
12AA:  CLRF   x69
12AC:  CLRF   x68
12AE:  CLRF   x67
12B0:  MOVLW  8A
12B2:  MOVWF  x66
12B4:  CALL   069C
12B8:  MOVFF  03,36
12BC:  MOVFF  02,35
12C0:  MOVFF  01,34
12C4:  MOVFF  00,33
....................                 corriente= (corriente)/1000-2.5; 
12C8:  MOVFF  3A,65
12CC:  MOVFF  39,64
12D0:  MOVFF  38,63
12D4:  MOVFF  37,62
12D8:  CLRF   x69
12DA:  CLRF   x68
12DC:  MOVLW  7A
12DE:  MOVWF  x67
12E0:  MOVLW  88
12E2:  MOVWF  x66
12E4:  CALL   069C
12E8:  MOVFF  03,53
12EC:  MOVFF  02,52
12F0:  MOVFF  01,51
12F4:  MOVFF  00,50
12F8:  BSF    FD8.1
12FA:  MOVFF  03,81
12FE:  MOVFF  02,80
1302:  MOVFF  01,7F
1306:  MOVFF  00,7E
130A:  CLRF   x85
130C:  CLRF   x84
130E:  MOVLW  20
1310:  MOVWF  x83
1312:  MOVLW  80
1314:  MOVWF  x82
1316:  CALL   07F6
131A:  MOVFF  03,3A
131E:  MOVFF  02,39
1322:  MOVFF  01,38
1326:  MOVFF  00,37
....................                 //se convierte a la tension y corriente real 
....................                 tension= tension*155.57; // conversion con 2 V igual a 311.13 V 
132A:  MOVFF  36,81
132E:  MOVFF  35,80
1332:  MOVFF  34,7F
1336:  MOVFF  33,7E
133A:  MOVLW  EC
133C:  MOVWF  x85
133E:  MOVLW  91
1340:  MOVWF  x84
1342:  MOVLW  1B
1344:  MOVWF  x83
1346:  MOVLW  86
1348:  MOVWF  x82
134A:  CALL   05AA
134E:  MOVFF  03,36
1352:  MOVFF  02,35
1356:  MOVFF  01,34
135A:  MOVFF  00,33
....................                 corriente= corriente*12; // 2.5 V es igual a +30 A (recordar que el sensor mide ±30A) 
135E:  MOVFF  3A,81
1362:  MOVFF  39,80
1366:  MOVFF  38,7F
136A:  MOVFF  37,7E
136E:  CLRF   x85
1370:  CLRF   x84
1372:  MOVLW  40
1374:  MOVWF  x83
1376:  MOVLW  82
1378:  MOVWF  x82
137A:  CALL   05AA
137E:  MOVFF  03,3A
1382:  MOVFF  02,39
1386:  MOVFF  01,38
138A:  MOVFF  00,37
....................                  
....................                 // Analisis del punto POSITVO O NEGATIVO 
....................                 // valor positivo estado=0-- valor negativo estado=1 
....................                  
....................                 //TENSION 
....................                 #asm 
....................                 clrf &pos_V; 
138E:  CLRF   2B
....................                 btfsc (&tension + 0x01), 7; 
1390:  BTFSC  34.7
....................                 bsf &pos_V,0; 
1392:  BSF    2B.0
....................                 #endasm 
.................... 				 
....................                 //CORRIENTE 
....................                 #asm 
....................                 clrf &pos_I; 
1394:  CLRF   2C
....................                 btfsc (&corriente + 0x01), 7; // comprueba signo en un bit de los 4 byte del float 
1396:  BTFSC  38.7
....................                 bsf &pos_I,0; 
1398:  BSF    2C.0
....................                 #endasm 
....................  
....................                  
....................                  
.................... 				 
....................                 // si el punto actual de tension es positivo, el anterior es negativo  
....................                 //y se tiene mas de un punto (contaodr distinto de cero) 
....................                 if (pos_V==1 && contador!=0 && pos_V_A==0 && control_V != 0){  
139A:  DECFSZ 2B,W
139C:  BRA    13B2
139E:  MOVF   22,F
13A0:  BZ    13B2
13A2:  MOVF   2D,F
13A4:  BNZ   13B2
13A6:  MOVF   2F,F
13A8:  BZ    13B2
....................                  control_V= contador; // tiempo en el que cruzó la tension  
13AA:  MOVFF  22,2F
....................                  desfase=1; 
13AE:  MOVLW  01
13B0:  MOVWF  31
....................                 } 
....................                  
....................                 // si el punto actual de tension es positivo, el anterior es negativo  
....................                 //y se tiene mas de un punto (contaodr distinto de cero) 
....................                 if (pos_I==1 && contador!=0 && pos_I_A==0 && control_I != 0){ 
13B2:  DECFSZ 2C,W
13B4:  BRA    13CA
13B6:  MOVF   22,F
13B8:  BZ    13CA
13BA:  MOVF   2E,F
13BC:  BNZ   13CA
13BE:  MOVF   30,F
13C0:  BZ    13CA
....................                      
....................                  control_I= contador; // tiempo en el que cruzó la corriente 
13C2:  MOVFF  22,30
....................                  desfase=2; 
13C6:  MOVLW  02
13C8:  MOVWF  31
....................                 } 
....................                  
....................                 pos_V_A=pos_V; 
13CA:  MOVFF  2B,2D
....................                 pos_I_A=pos_I; 
13CE:  MOVFF  2C,2E
....................                  
....................                  
.................... 					estado = TENS_CORR_RMS; 
13D2:  MOVLW  02
13D4:  MOVWF  4F
.................... 		 
.................... 				 
....................  
.................... 				break; 
13D6:  BRA    178C
.................... 			 
.................... 			case TENS_CORR_RMS: 
.................... 			 
.................... 				if((contador<30)&& (pulso_timer==1)) 
13D8:  MOVF   22,W
13DA:  SUBLW  1D
13DC:  BNC   14A8
13DE:  DECFSZ 25,W
13E0:  BRA    14A8
.................... 				{ 
.................... 					tension_RMS=tension_RMS+ tension * tension;       //calcula tension eficaz 
13E2:  MOVFF  36,81
13E6:  MOVFF  35,80
13EA:  MOVFF  34,7F
13EE:  MOVFF  33,7E
13F2:  MOVFF  36,85
13F6:  MOVFF  35,84
13FA:  MOVFF  34,83
13FE:  MOVFF  33,82
1402:  CALL   05AA
1406:  BCF    FD8.1
1408:  MOVFF  3E,81
140C:  MOVFF  3D,80
1410:  MOVFF  3C,7F
1414:  MOVFF  3B,7E
1418:  MOVFF  03,85
141C:  MOVFF  02,84
1420:  MOVFF  01,83
1424:  MOVFF  00,82
1428:  CALL   07F6
142C:  MOVFF  03,3E
1430:  MOVFF  02,3D
1434:  MOVFF  01,3C
1438:  MOVFF  00,3B
....................                     corriente_RMS= corriente_RMS+ corriente * corriente; // calcula corriente eficaz 
143C:  MOVFF  3A,81
1440:  MOVFF  39,80
1444:  MOVFF  38,7F
1448:  MOVFF  37,7E
144C:  MOVFF  3A,85
1450:  MOVFF  39,84
1454:  MOVFF  38,83
1458:  MOVFF  37,82
145C:  CALL   05AA
1460:  BCF    FD8.1
1462:  MOVFF  42,81
1466:  MOVFF  41,80
146A:  MOVFF  40,7F
146E:  MOVFF  3F,7E
1472:  MOVFF  03,85
1476:  MOVFF  02,84
147A:  MOVFF  01,83
147E:  MOVFF  00,82
1482:  CALL   07F6
1486:  MOVFF  03,42
148A:  MOVFF  02,41
148E:  MOVFF  01,40
1492:  MOVFF  00,3F
....................                     pulso_timer=0; 
1496:  CLRF   25
....................                      
.................... 					estado = PUNTO_TENS_CORR; 
1498:  CLRF   4F
....................                      
....................                     if((contador== 29)){ 
149A:  MOVF   22,W
149C:  SUBLW  1D
149E:  BNZ   14A8
.................... 					disable_interrupts(INT_RTCC);// deshabilita la interrupcion para no entrar al timer 
14A0:  BCF    FF2.5
....................                     contador=0; //se reinicia el contador, para comenzar nuevamente  
14A2:  CLRF   22
.................... 					estado = CALCULO_POT_ENER; 
14A4:  MOVLW  03
14A6:  MOVWF  4F
.................... 				} 
.................... 				} 
.................... 				 
....................  
.................... 				break; 
14A8:  BRA    178C
.................... 			 
.................... 			case CALCULO_POT_ENER: // falta calculo de energia 
....................                 //calcula las raices para completar el calculo RMS 
.................... 				tension_RMS= sqrt(tension_RMS/30); 
14AA:  MOVFF  3E,65
14AE:  MOVFF  3D,64
14B2:  MOVFF  3C,63
14B6:  MOVFF  3B,62
14BA:  CLRF   x69
14BC:  CLRF   x68
14BE:  MOVLW  70
14C0:  MOVWF  x67
14C2:  MOVLW  83
14C4:  MOVWF  x66
14C6:  CALL   069C
14CA:  MOVFF  03,53
14CE:  MOVFF  02,52
14D2:  MOVFF  01,51
14D6:  MOVFF  00,50
14DA:  MOVFF  03,57
14DE:  MOVFF  02,56
14E2:  MOVFF  01,55
14E6:  MOVFF  00,54
14EA:  CALL   0AD6
14EE:  MOVFF  03,3E
14F2:  MOVFF  02,3D
14F6:  MOVFF  01,3C
14FA:  MOVFF  00,3B
....................                 corriente_RMS= sqrt(corriente_RMS/30); 
14FE:  MOVFF  42,65
1502:  MOVFF  41,64
1506:  MOVFF  40,63
150A:  MOVFF  3F,62
150E:  CLRF   x69
1510:  CLRF   x68
1512:  MOVLW  70
1514:  MOVWF  x67
1516:  MOVLW  83
1518:  MOVWF  x66
151A:  CALL   069C
151E:  MOVFF  03,53
1522:  MOVFF  02,52
1526:  MOVFF  01,51
152A:  MOVFF  00,50
152E:  MOVFF  03,57
1532:  MOVFF  02,56
1536:  MOVFF  01,55
153A:  MOVFF  00,54
153E:  CALL   0AD6
1542:  MOVFF  03,42
1546:  MOVFF  02,41
154A:  MOVFF  01,40
154E:  MOVFF  00,3F
....................                  
....................                 // se controla si se pudo calcular desfase en el estado anterior  
....................                 // se realiza las diferencia de cruce por cero y se convierte de tiempo a radianes 
....................                 angulo=0; 
1552:  CLRF   4E
1554:  CLRF   4D
1556:  CLRF   4C
1558:  CLRF   4B
....................                 if (desfase==2){ 
155A:  MOVF   31,W
155C:  SUBLW  02
155E:  BNZ   1606
....................                     t_desfase= (control_I-control_V); 
1560:  MOVF   2F,W
1562:  SUBWF  30,W
1564:  CLRF   x7F
1566:  MOVWF  x7E
1568:  CALL   0574
156C:  MOVFF  03,46
1570:  MOVFF  02,45
1574:  MOVFF  01,44
1578:  MOVFF  00,43
....................                     angulo= (t_desfase*pi)/10;      // angulo de desfase en radianes. 20 puntos por periodo 
157C:  MOVFF  46,81
1580:  MOVFF  45,80
1584:  MOVFF  44,7F
1588:  MOVFF  43,7E
158C:  MOVLW  DB
158E:  MOVWF  x85
1590:  MOVLW  0F
1592:  MOVWF  x84
1594:  MOVLW  49
1596:  MOVWF  x83
1598:  MOVLW  80
159A:  MOVWF  x82
159C:  CALL   05AA
15A0:  MOVFF  03,53
15A4:  MOVFF  02,52
15A8:  MOVFF  01,51
15AC:  MOVFF  00,50
15B0:  MOVFF  03,65
15B4:  MOVFF  02,64
15B8:  MOVFF  01,63
15BC:  MOVFF  00,62
15C0:  CLRF   x69
15C2:  CLRF   x68
15C4:  MOVLW  20
15C6:  MOVWF  x67
15C8:  MOVLW  82
15CA:  MOVWF  x66
15CC:  CALL   069C
15D0:  MOVFF  03,4E
15D4:  MOVFF  02,4D
15D8:  MOVFF  01,4C
15DC:  MOVFF  00,4B
....................                      lcd_gotoxy(1,1); 
15E0:  MOVLW  01
15E2:  MOVWF  5F
15E4:  MOVWF  x60
15E6:  CALL   029C
....................                      printf(LCD_PUTC,"Se midio desfase"); 
15EA:  MOVLW  CC
15EC:  MOVWF  FF6
15EE:  MOVLW  00
15F0:  MOVWF  FF7
15F2:  GOTO   0BE0
....................                      delay_ms(1000); 
15F6:  MOVLW  04
15F8:  MOVWF  50
15FA:  MOVLW  FA
15FC:  MOVWF  5F
15FE:  CALL   00FE
1602:  DECFSZ 50,F
1604:  BRA    15FA
....................                 }                 
....................                 angulo=cos(angulo); 
1606:  MOVFF  4E,53
160A:  MOVFF  4D,52
160E:  MOVFF  4C,51
1612:  MOVFF  4B,50
1616:  GOTO   0C3E
161A:  MOVFF  03,4E
161E:  MOVFF  02,4D
1622:  MOVFF  01,4C
1626:  MOVFF  00,4B
....................                // calculo de potencia  
....................                 potencia_ins= tension_RMS*corriente_RMS*angulo; 
162A:  MOVFF  3E,81
162E:  MOVFF  3D,80
1632:  MOVFF  3C,7F
1636:  MOVFF  3B,7E
163A:  MOVFF  42,85
163E:  MOVFF  41,84
1642:  MOVFF  40,83
1646:  MOVFF  3F,82
164A:  CALL   05AA
164E:  MOVFF  03,53
1652:  MOVFF  02,52
1656:  MOVFF  01,51
165A:  MOVFF  00,50
165E:  MOVFF  03,81
1662:  MOVFF  02,80
1666:  MOVFF  01,7F
166A:  MOVFF  00,7E
166E:  MOVFF  4E,85
1672:  MOVFF  4D,84
1676:  MOVFF  4C,83
167A:  MOVFF  4B,82
167E:  CALL   05AA
1682:  MOVFF  03,4A
1686:  MOVFF  02,49
168A:  MOVFF  01,48
168E:  MOVFF  00,47
....................                 //se limpian las variables para la próxima tanta de muestreo 
....................                 control_V=0;       
1692:  CLRF   2F
....................                 control_I=0; 
1694:  CLRF   30
....................                 angulo=0; 
1696:  CLRF   4E
1698:  CLRF   4D
169A:  CLRF   4C
169C:  CLRF   4B
....................                 desfase=0;  
169E:  CLRF   31
....................                  
.................... 					estado = MOSTRAR_DATOS; 
16A0:  MOVLW  04
16A2:  MOVWF  4F
.................... 				break; 
16A4:  BRA    178C
.................... 			 
.................... 			case MOSTRAR_DATOS: 
....................                 //este estado solo muestra los datos en la pantalla LCD 
....................                 lcd_gotoxy(1,1); 
16A6:  MOVLW  01
16A8:  MOVWF  5F
16AA:  MOVWF  x60
16AC:  CALL   029C
....................                 printf(LCD_PUTC,"Potencia= \%f W",potencia_ins); 
16B0:  MOVLW  DE
16B2:  MOVWF  FF6
16B4:  MOVLW  00
16B6:  MOVWF  FF7
16B8:  MOVLW  0A
16BA:  MOVWF  50
16BC:  RCALL  0F84
16BE:  MOVLW  89
16C0:  MOVWF  FE9
16C2:  MOVFF  4A,53
16C6:  MOVFF  49,52
16CA:  MOVFF  48,51
16CE:  MOVFF  47,50
16D2:  MOVLW  02
16D4:  MOVWF  54
16D6:  RCALL  1072
16D8:  MOVLW  20
16DA:  MOVWF  5E
16DC:  CALL   02F2
16E0:  MOVLW  57
16E2:  MOVWF  5E
16E4:  CALL   02F2
....................                 lcd_gotoxy(1,2); 
16E8:  MOVLW  01
16EA:  MOVWF  5F
16EC:  MOVLW  02
16EE:  MOVWF  x60
16F0:  CALL   029C
....................                 printf (LCD_PUTC, "T=\%f V  I=\%f A",tension_RMS,corriente_RMS); 
16F4:  MOVLW  54
16F6:  MOVWF  5E
16F8:  CALL   02F2
16FC:  MOVLW  3D
16FE:  MOVWF  5E
1700:  CALL   02F2
1704:  MOVLW  89
1706:  MOVWF  FE9
1708:  MOVFF  3E,53
170C:  MOVFF  3D,52
1710:  MOVFF  3C,51
1714:  MOVFF  3B,50
1718:  MOVLW  02
171A:  MOVWF  54
171C:  RCALL  1072
171E:  MOVLW  F2
1720:  MOVWF  FF6
1722:  MOVLW  00
1724:  MOVWF  FF7
1726:  MOVLW  06
1728:  MOVWF  50
172A:  RCALL  0F84
172C:  MOVLW  89
172E:  MOVWF  FE9
1730:  MOVFF  42,53
1734:  MOVFF  41,52
1738:  MOVFF  40,51
173C:  MOVFF  3F,50
1740:  MOVLW  02
1742:  MOVWF  54
1744:  RCALL  1072
1746:  MOVLW  20
1748:  MOVWF  5E
174A:  CALL   02F2
174E:  MOVLW  41
1750:  MOVWF  5E
1752:  CALL   02F2
....................                 delay_ms(1000); 
1756:  MOVLW  04
1758:  MOVWF  50
175A:  MOVLW  FA
175C:  MOVWF  5F
175E:  CALL   00FE
1762:  DECFSZ 50,F
1764:  BRA    175A
....................                 enable_interrupts(INT_RTCC); 
1766:  BSF    FF2.5
....................                 enable_interrupts(GLOBAL); 
1768:  MOVLW  C0
176A:  IORWF  FF2,F
....................                 pulso_timer=0; 
176C:  CLRF   25
....................                 set_timer0(carga);    
176E:  MOVLW  E8
1770:  MOVWF  FD7
1772:  MOVLW  AB
1774:  MOVWF  FD6
.................... 				//reinicia todo 
....................                 corriente_RMS=0; 
1776:  CLRF   42
1778:  CLRF   41
177A:  CLRF   40
177C:  CLRF   3F
....................                 tension_RMS=0; 
177E:  CLRF   3E
1780:  CLRF   3D
1782:  CLRF   3C
1784:  CLRF   3B
....................                  
.................... 				estado = PUNTO_TENS_CORR; 
1786:  CLRF   4F
.................... 		 
....................  
.................... 				break; 
1788:  BRA    178C
.................... 			 
.................... 			default: estado = PUNTO_TENS_CORR; 
178A:  CLRF   4F
.................... 		} 
178C:  GOTO   17D2 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Funciones asociadas a los eventos 
....................  
.................... /** 
.................... *	\fn int -(void) 
.................... *	\brief Resumen 
.................... *	\details Detalles 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 4C07   PLL12 CPUDIV1 NOUSBDIV HS FCMEN NOIESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
