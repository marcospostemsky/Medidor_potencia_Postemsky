CCS PCH C Compiler, Version 5.048, 5967               23-sep-16 08:41

               Filename:   C:\Users\MARCOS\Proyecto_final\Med_pot.X\dist\default\production\Med_pot.X.production.lst

               ROM used:   5410 bytes (17%)
                           Largest free fragment is 26522
               RAM used:   71 (3%) at main() level
                           159 (8%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   14F8
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #import(file="build/default/production/main.o") 
.................... #import(file="build/default/production/funciones.o") 
.................... /** 
.................... *	\file main.c 
.................... *	\brief Resumen del contenido del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
036C:  MOVLW  8E
036E:  MOVWF  00
0370:  MOVFF  7A,01
0374:  MOVFF  79,02
0378:  CLRF   03
037A:  MOVF   01,F
037C:  BNZ   0390
037E:  MOVFF  02,01
0382:  CLRF   02
0384:  MOVLW  08
0386:  SUBWF  00,F
0388:  MOVF   01,F
038A:  BNZ   0390
038C:  CLRF   00
038E:  BRA    03A0
0390:  BCF    FD8.0
0392:  BTFSC  01.7
0394:  BRA    039E
0396:  RLCF   02,F
0398:  RLCF   01,F
039A:  DECF   00,F
039C:  BRA    0390
039E:  BCF    01.7
03A0:  RETURN 0
03A2:  MOVF   x79,W
03A4:  BTFSC  FD8.2
03A6:  BRA    048A
03A8:  MOVWF  00
03AA:  MOVF   x7D,W
03AC:  BTFSC  FD8.2
03AE:  BRA    048A
03B0:  ADDWF  00,F
03B2:  BNC   03BC
03B4:  MOVLW  81
03B6:  ADDWF  00,F
03B8:  BC    048A
03BA:  BRA    03C4
03BC:  MOVLW  7F
03BE:  SUBWF  00,F
03C0:  BNC   048A
03C2:  BZ    048A
03C4:  MOVFF  7A,81
03C8:  MOVF   x7E,W
03CA:  XORWF  x81,F
03CC:  BSF    x7A.7
03CE:  BSF    x7E.7
03D0:  MOVF   x7C,W
03D2:  MULWF  x80
03D4:  MOVFF  FF4,83
03D8:  MOVF   x7B,W
03DA:  MULWF  x7F
03DC:  MOVFF  FF4,03
03E0:  MOVFF  FF3,82
03E4:  MULWF  x80
03E6:  MOVF   FF3,W
03E8:  ADDWF  x83,F
03EA:  MOVF   FF4,W
03EC:  ADDWFC x82,F
03EE:  MOVLW  00
03F0:  ADDWFC 03,F
03F2:  MOVF   x7C,W
03F4:  MULWF  x7F
03F6:  MOVF   FF3,W
03F8:  ADDWF  x83,F
03FA:  MOVF   FF4,W
03FC:  ADDWFC x82,F
03FE:  MOVLW  00
0400:  CLRF   02
0402:  ADDWFC 03,F
0404:  ADDWFC 02,F
0406:  MOVF   x7A,W
0408:  MULWF  x80
040A:  MOVF   FF3,W
040C:  ADDWF  x82,F
040E:  MOVF   FF4,W
0410:  ADDWFC 03,F
0412:  MOVLW  00
0414:  ADDWFC 02,F
0416:  MOVF   x7A,W
0418:  MULWF  x7F
041A:  MOVF   FF3,W
041C:  ADDWF  03,F
041E:  MOVF   FF4,W
0420:  ADDWFC 02,F
0422:  MOVLW  00
0424:  CLRF   01
0426:  ADDWFC 01,F
0428:  MOVF   x7C,W
042A:  MULWF  x7E
042C:  MOVF   FF3,W
042E:  ADDWF  x82,F
0430:  MOVF   FF4,W
0432:  ADDWFC 03,F
0434:  MOVLW  00
0436:  ADDWFC 02,F
0438:  ADDWFC 01,F
043A:  MOVF   x7B,W
043C:  MULWF  x7E
043E:  MOVF   FF3,W
0440:  ADDWF  03,F
0442:  MOVF   FF4,W
0444:  ADDWFC 02,F
0446:  MOVLW  00
0448:  ADDWFC 01,F
044A:  MOVF   x7A,W
044C:  MULWF  x7E
044E:  MOVF   FF3,W
0450:  ADDWF  02,F
0452:  MOVF   FF4,W
0454:  ADDWFC 01,F
0456:  INCF   00,F
0458:  BTFSC  01.7
045A:  BRA    0466
045C:  RLCF   x82,F
045E:  RLCF   03,F
0460:  RLCF   02,F
0462:  RLCF   01,F
0464:  DECF   00,F
0466:  MOVLW  00
0468:  BTFSS  x82.7
046A:  BRA    0480
046C:  INCF   03,F
046E:  ADDWFC 02,F
0470:  ADDWFC 01,F
0472:  MOVF   01,W
0474:  BNZ   0480
0476:  MOVF   02,W
0478:  BNZ   0480
047A:  MOVF   03,W
047C:  BNZ   0480
047E:  INCF   00,F
0480:  BTFSC  x81.7
0482:  BSF    01.7
0484:  BTFSS  x81.7
0486:  BCF    01.7
0488:  BRA    0492
048A:  CLRF   00
048C:  CLRF   01
048E:  CLRF   02
0490:  CLRF   03
0492:  RETURN 0
0494:  MOVF   59,W
0496:  BTFSC  FD8.2
0498:  BRA    05E4
049A:  MOVWF  x65
049C:  MOVF   5D,W
049E:  BTFSC  FD8.2
04A0:  BRA    05E4
04A2:  SUBWF  x65,F
04A4:  BNC   04B0
04A6:  MOVLW  7F
04A8:  ADDWF  x65,F
04AA:  BTFSC  FD8.0
04AC:  BRA    05E4
04AE:  BRA    04BC
04B0:  MOVLW  81
04B2:  SUBWF  x65,F
04B4:  BTFSS  FD8.0
04B6:  BRA    05E4
04B8:  BTFSC  FD8.2
04BA:  BRA    05E4
04BC:  MOVFF  65,00
04C0:  CLRF   01
04C2:  CLRF   02
04C4:  CLRF   03
04C6:  CLRF   x64
04C8:  MOVFF  5A,63
04CC:  BSF    x63.7
04CE:  MOVFF  5B,62
04D2:  MOVFF  5C,61
04D6:  MOVLW  19
04D8:  MOVWF  x65
04DA:  MOVF   x60,W
04DC:  SUBWF  x61,F
04DE:  BC    04FA
04E0:  MOVLW  01
04E2:  SUBWF  x62,F
04E4:  BC    04FA
04E6:  SUBWF  x63,F
04E8:  BC    04FA
04EA:  SUBWF  x64,F
04EC:  BC    04FA
04EE:  INCF   x64,F
04F0:  INCF   x63,F
04F2:  INCF   x62,F
04F4:  MOVF   x60,W
04F6:  ADDWF  x61,F
04F8:  BRA    054A
04FA:  MOVF   5F,W
04FC:  SUBWF  x62,F
04FE:  BC    0524
0500:  MOVLW  01
0502:  SUBWF  x63,F
0504:  BC    0524
0506:  SUBWF  x64,F
0508:  BC    0524
050A:  INCF   x64,F
050C:  INCF   x63,F
050E:  MOVF   5F,W
0510:  ADDWF  x62,F
0512:  MOVF   x60,W
0514:  ADDWF  x61,F
0516:  BNC   054A
0518:  INCF   x62,F
051A:  BNZ   054A
051C:  INCF   x63,F
051E:  BNZ   054A
0520:  INCF   x64,F
0522:  BRA    054A
0524:  MOVF   5E,W
0526:  IORLW  80
0528:  SUBWF  x63,F
052A:  BC    0548
052C:  MOVLW  01
052E:  SUBWF  x64,F
0530:  BC    0548
0532:  INCF   x64,F
0534:  MOVF   5E,W
0536:  IORLW  80
0538:  ADDWF  x63,F
053A:  MOVF   5F,W
053C:  ADDWF  x62,F
053E:  BNC   0512
0540:  INCF   x63,F
0542:  BNZ   0512
0544:  INCF   x64,F
0546:  BRA    0512
0548:  BSF    03.0
054A:  DECFSZ x65,F
054C:  BRA    0550
054E:  BRA    0566
0550:  BCF    FD8.0
0552:  RLCF   x61,F
0554:  RLCF   x62,F
0556:  RLCF   x63,F
0558:  RLCF   x64,F
055A:  BCF    FD8.0
055C:  RLCF   03,F
055E:  RLCF   02,F
0560:  RLCF   01,F
0562:  RLCF   x66,F
0564:  BRA    04DA
0566:  BTFSS  x66.0
0568:  BRA    0576
056A:  BCF    FD8.0
056C:  RRCF   01,F
056E:  RRCF   02,F
0570:  RRCF   03,F
0572:  RRCF   x66,F
0574:  BRA    057A
0576:  DECF   00,F
0578:  BZ    05E4
057A:  BTFSC  x66.7
057C:  BRA    05BA
057E:  BCF    FD8.0
0580:  RLCF   x61,F
0582:  RLCF   x62,F
0584:  RLCF   x63,F
0586:  RLCF   x64,F
0588:  MOVF   x60,W
058A:  SUBWF  x61,F
058C:  BC    059C
058E:  MOVLW  01
0590:  SUBWF  x62,F
0592:  BC    059C
0594:  SUBWF  x63,F
0596:  BC    059C
0598:  SUBWF  x64,F
059A:  BNC   05D0
059C:  MOVF   5F,W
059E:  SUBWF  x62,F
05A0:  BC    05AC
05A2:  MOVLW  01
05A4:  SUBWF  x63,F
05A6:  BC    05AC
05A8:  SUBWF  x64,F
05AA:  BNC   05D0
05AC:  MOVF   5E,W
05AE:  IORLW  80
05B0:  SUBWF  x63,F
05B2:  BC    05BA
05B4:  MOVLW  01
05B6:  SUBWF  x64,F
05B8:  BNC   05D0
05BA:  INCF   03,F
05BC:  BNZ   05D0
05BE:  INCF   02,F
05C0:  BNZ   05D0
05C2:  INCF   01,F
05C4:  BNZ   05D0
05C6:  INCF   00,F
05C8:  BZ    05E4
05CA:  RRCF   01,F
05CC:  RRCF   02,F
05CE:  RRCF   03,F
05D0:  MOVFF  5A,65
05D4:  MOVF   5E,W
05D6:  XORWF  x65,F
05D8:  BTFSS  x65.7
05DA:  BRA    05E0
05DC:  BSF    01.7
05DE:  BRA    05EC
05E0:  BCF    01.7
05E2:  BRA    05EC
05E4:  CLRF   00
05E6:  CLRF   01
05E8:  CLRF   02
05EA:  CLRF   03
05EC:  RETURN 0
05EE:  MOVLW  80
05F0:  BTFSC  FD8.1
05F2:  XORWF  x7E,F
05F4:  CLRF   x83
05F6:  CLRF   x84
05F8:  MOVFF  7A,82
05FC:  MOVF   x7E,W
05FE:  XORWF  x82,F
0600:  MOVF   x79,W
0602:  BTFSC  FD8.2
0604:  BRA    07BE
0606:  MOVWF  x81
0608:  MOVWF  00
060A:  MOVF   x7D,W
060C:  BTFSC  FD8.2
060E:  BRA    07D0
0610:  SUBWF  x81,F
0612:  BTFSC  FD8.2
0614:  BRA    0718
0616:  BNC   0692
0618:  MOVFF  7E,87
061C:  BSF    x87.7
061E:  MOVFF  7F,86
0622:  MOVFF  80,85
0626:  CLRF   x84
0628:  BCF    FD8.0
062A:  RRCF   x87,F
062C:  RRCF   x86,F
062E:  RRCF   x85,F
0630:  RRCF   x84,F
0632:  DECFSZ x81,F
0634:  BRA    0626
0636:  BTFSS  x82.7
0638:  BRA    0640
063A:  BSF    x83.0
063C:  BRA    07F8
063E:  BCF    x83.0
0640:  BCF    x81.0
0642:  BSF    x83.4
0644:  CLRF   FEA
0646:  MOVLW  7C
0648:  MOVWF  FE9
064A:  BRA    081E
064C:  BCF    x83.4
064E:  BTFSC  x82.7
0650:  BRA    0666
0652:  BTFSS  x81.0
0654:  BRA    067C
0656:  RRCF   x87,F
0658:  RRCF   x86,F
065A:  RRCF   x85,F
065C:  RRCF   x84,F
065E:  INCF   00,F
0660:  BTFSC  FD8.2
0662:  BRA    07EE
0664:  BRA    067C
0666:  BTFSC  x87.7
0668:  BRA    0682
066A:  BCF    FD8.0
066C:  RLCF   x84,F
066E:  RLCF   x85,F
0670:  RLCF   x86,F
0672:  RLCF   x87,F
0674:  DECF   00,F
0676:  BTFSC  FD8.2
0678:  BRA    07EE
067A:  BRA    0666
067C:  BSF    x83.6
067E:  BRA    0756
0680:  BCF    x83.6
0682:  MOVFF  7A,82
0686:  BTFSS  x7A.7
0688:  BRA    068E
068A:  BSF    x87.7
068C:  BRA    07E0
068E:  BCF    x87.7
0690:  BRA    07E0
0692:  MOVFF  7D,81
0696:  MOVFF  7D,00
069A:  MOVF   x79,W
069C:  SUBWF  x81,F
069E:  MOVFF  7A,87
06A2:  BSF    x87.7
06A4:  MOVFF  7B,86
06A8:  MOVFF  7C,85
06AC:  CLRF   x84
06AE:  BCF    FD8.0
06B0:  RRCF   x87,F
06B2:  RRCF   x86,F
06B4:  RRCF   x85,F
06B6:  RRCF   x84,F
06B8:  DECFSZ x81,F
06BA:  BRA    06AC
06BC:  BTFSS  x82.7
06BE:  BRA    06C6
06C0:  BSF    x83.1
06C2:  BRA    07F8
06C4:  BCF    x83.1
06C6:  BCF    x81.0
06C8:  BSF    x83.5
06CA:  CLRF   FEA
06CC:  MOVLW  80
06CE:  MOVWF  FE9
06D0:  BRA    081E
06D2:  BCF    x83.5
06D4:  BTFSC  x82.7
06D6:  BRA    06EC
06D8:  BTFSS  x81.0
06DA:  BRA    0702
06DC:  RRCF   x87,F
06DE:  RRCF   x86,F
06E0:  RRCF   x85,F
06E2:  RRCF   x84,F
06E4:  INCF   00,F
06E6:  BTFSC  FD8.2
06E8:  BRA    07EE
06EA:  BRA    0702
06EC:  BTFSC  x87.7
06EE:  BRA    0708
06F0:  BCF    FD8.0
06F2:  RLCF   x84,F
06F4:  RLCF   x85,F
06F6:  RLCF   x86,F
06F8:  RLCF   x87,F
06FA:  DECF   00,F
06FC:  BTFSC  FD8.2
06FE:  BRA    07EE
0700:  BRA    06EC
0702:  BSF    x83.7
0704:  BRA    0756
0706:  BCF    x83.7
0708:  MOVFF  7E,82
070C:  BTFSS  x7E.7
070E:  BRA    0714
0710:  BSF    x87.7
0712:  BRA    07E0
0714:  BCF    x87.7
0716:  BRA    07E0
0718:  MOVFF  7E,87
071C:  BSF    x87.7
071E:  MOVFF  7F,86
0722:  MOVFF  80,85
0726:  BTFSS  x82.7
0728:  BRA    0732
072A:  BCF    x87.7
072C:  BSF    x83.2
072E:  BRA    07F8
0730:  BCF    x83.2
0732:  CLRF   x84
0734:  BCF    x81.0
0736:  CLRF   FEA
0738:  MOVLW  7C
073A:  MOVWF  FE9
073C:  BRA    081E
073E:  BTFSC  x82.7
0740:  BRA    077A
0742:  MOVFF  7A,82
0746:  BTFSS  x81.0
0748:  BRA    0756
074A:  RRCF   x87,F
074C:  RRCF   x86,F
074E:  RRCF   x85,F
0750:  RRCF   x84,F
0752:  INCF   00,F
0754:  BZ    07EE
0756:  BTFSS  x84.7
0758:  BRA    0770
075A:  INCF   x85,F
075C:  BNZ   0770
075E:  INCF   x86,F
0760:  BNZ   0770
0762:  INCF   x87,F
0764:  BNZ   0770
0766:  RRCF   x87,F
0768:  RRCF   x86,F
076A:  RRCF   x85,F
076C:  INCF   00,F
076E:  BZ    07EE
0770:  BTFSC  x83.6
0772:  BRA    0680
0774:  BTFSC  x83.7
0776:  BRA    0706
0778:  BRA    07B2
077A:  MOVLW  80
077C:  XORWF  x87,F
077E:  BTFSS  x87.7
0780:  BRA    078A
0782:  BRA    07F8
0784:  MOVFF  7E,82
0788:  BRA    079E
078A:  MOVFF  7A,82
078E:  MOVF   x87,F
0790:  BNZ   079E
0792:  MOVF   x86,F
0794:  BNZ   079E
0796:  MOVF   x85,F
0798:  BNZ   079E
079A:  CLRF   00
079C:  BRA    07E0
079E:  BTFSC  x87.7
07A0:  BRA    07B2
07A2:  BCF    FD8.0
07A4:  RLCF   x84,F
07A6:  RLCF   x85,F
07A8:  RLCF   x86,F
07AA:  RLCF   x87,F
07AC:  DECFSZ 00,F
07AE:  BRA    079E
07B0:  BRA    07EE
07B2:  BTFSS  x82.7
07B4:  BRA    07BA
07B6:  BSF    x87.7
07B8:  BRA    07E0
07BA:  BCF    x87.7
07BC:  BRA    07E0
07BE:  MOVFF  7D,00
07C2:  MOVFF  7E,87
07C6:  MOVFF  7F,86
07CA:  MOVFF  80,85
07CE:  BRA    07E0
07D0:  MOVFF  79,00
07D4:  MOVFF  7A,87
07D8:  MOVFF  7B,86
07DC:  MOVFF  7C,85
07E0:  MOVFF  87,01
07E4:  MOVFF  86,02
07E8:  MOVFF  85,03
07EC:  BRA    0856
07EE:  CLRF   00
07F0:  CLRF   01
07F2:  CLRF   02
07F4:  CLRF   03
07F6:  BRA    0856
07F8:  CLRF   x84
07FA:  COMF   x85,F
07FC:  COMF   x86,F
07FE:  COMF   x87,F
0800:  COMF   x84,F
0802:  INCF   x84,F
0804:  BNZ   0810
0806:  INCF   x85,F
0808:  BNZ   0810
080A:  INCF   x86,F
080C:  BNZ   0810
080E:  INCF   x87,F
0810:  BTFSC  x83.0
0812:  BRA    063E
0814:  BTFSC  x83.1
0816:  BRA    06C4
0818:  BTFSC  x83.2
081A:  BRA    0730
081C:  BRA    0784
081E:  MOVF   FEF,W
0820:  ADDWF  x85,F
0822:  BNC   082E
0824:  INCF   x86,F
0826:  BNZ   082E
0828:  INCF   x87,F
082A:  BTFSC  FD8.2
082C:  BSF    x81.0
082E:  MOVF   FED,F
0830:  MOVF   FEF,W
0832:  ADDWF  x86,F
0834:  BNC   083C
0836:  INCF   x87,F
0838:  BTFSC  FD8.2
083A:  BSF    x81.0
083C:  MOVF   FED,F
083E:  MOVF   FEF,W
0840:  BTFSC  FEF.7
0842:  BRA    0846
0844:  XORLW  80
0846:  ADDWF  x87,F
0848:  BTFSC  FD8.0
084A:  BSF    x81.0
084C:  BTFSC  x83.4
084E:  BRA    064C
0850:  BTFSC  x83.5
0852:  BRA    06D2
0854:  BRA    073E
0856:  RETURN 0
0858:  MOVFF  76,7D
085C:  MOVF   x7A,W
085E:  XORWF  x7D,F
0860:  BTFSS  x7D.7
0862:  BRA    086E
0864:  BCF    FD8.2
0866:  BCF    FD8.0
0868:  BTFSC  x76.7
086A:  BSF    FD8.0
086C:  BRA    08CC
086E:  MOVFF  76,7D
0872:  MOVFF  79,7E
0876:  MOVF   x75,W
0878:  SUBWF  x7E,F
087A:  BZ    0888
087C:  BTFSS  x7D.7
087E:  BRA    08CC
0880:  MOVF   FD8,W
0882:  XORLW  01
0884:  MOVWF  FD8
0886:  BRA    08CC
0888:  MOVFF  7A,7E
088C:  MOVF   x76,W
088E:  SUBWF  x7E,F
0890:  BZ    089E
0892:  BTFSS  x7D.7
0894:  BRA    08CC
0896:  MOVF   FD8,W
0898:  XORLW  01
089A:  MOVWF  FD8
089C:  BRA    08CC
089E:  MOVFF  7B,7E
08A2:  MOVF   x77,W
08A4:  SUBWF  x7E,F
08A6:  BZ    08B4
08A8:  BTFSS  x7D.7
08AA:  BRA    08CC
08AC:  MOVF   FD8,W
08AE:  XORLW  01
08B0:  MOVWF  FD8
08B2:  BRA    08CC
08B4:  MOVFF  7C,7E
08B8:  MOVF   x78,W
08BA:  SUBWF  x7E,F
08BC:  BZ    08CA
08BE:  BTFSS  x7D.7
08C0:  BRA    08CC
08C2:  MOVF   FD8,W
08C4:  XORLW  01
08C6:  MOVWF  FD8
08C8:  BRA    08CC
08CA:  BCF    FD8.0
08CC:  RETURN 0
*
09D8:  MOVLW  8E
09DA:  MOVWF  00
09DC:  MOVF   x75,W
09DE:  SUBWF  00,F
09E0:  MOVFF  76,02
09E4:  MOVFF  77,01
09E8:  BSF    02.7
09EA:  MOVF   00,F
09EC:  BZ    0A00
09EE:  BCF    FD8.0
09F0:  MOVF   02,F
09F2:  BNZ   09F8
09F4:  MOVF   01,F
09F6:  BZ    0A00
09F8:  RRCF   02,F
09FA:  RRCF   01,F
09FC:  DECFSZ 00,F
09FE:  BRA    09EE
0A00:  BTFSS  x76.7
0A02:  BRA    0A0E
0A04:  COMF   01,F
0A06:  COMF   02,F
0A08:  INCF   01,F
0A0A:  BTFSC  FD8.2
0A0C:  INCF   02,F
0A0E:  GOTO   0ABE (RETURN)
....................  
.................... #list 
....................  
.................... #device ICD=2 
.................... #fuses NOWDT,MCLR,HS,NOUSBDIV,NOIESO,            //Selecciona el oscilador interno 
.................... #use delay(clock=12 Mhz, crystal= 12 MHz)   // Selecciona la velocidad del oscilador interno 
*
00DC:  CLRF   FEA
00DE:  MOVLW  56
00E0:  MOVWF  FE9
00E2:  MOVF   FEF,W
00E4:  BZ    0102
00E6:  MOVLW  03
00E8:  MOVWF  01
00EA:  CLRF   00
00EC:  DECFSZ 00,F
00EE:  BRA    00EC
00F0:  DECFSZ 01,F
00F2:  BRA    00EA
00F4:  MOVLW  E3
00F6:  MOVWF  00
00F8:  DECFSZ 00,F
00FA:  BRA    00F8
00FC:  NOP   
00FE:  DECFSZ FEF,F
0100:  BRA    00E6
0102:  RETURN 0
.................... #use i2c(Master,Fast=100000, sda=PIN_D6, scl=PIN_D7,force_sw) 
0104:  MOVLW  08
0106:  MOVWF  01
0108:  MOVLW  02
010A:  MOVWF  00
010C:  DECFSZ 00,F
010E:  BRA    010C
0110:  BCF    F8C.7
0112:  BCF    F95.7
0114:  MOVLW  02
0116:  MOVWF  00
0118:  DECFSZ 00,F
011A:  BRA    0118
011C:  RLCF   5A,F
011E:  BCF    F8C.6
0120:  BTFSC  FD8.0
0122:  BSF    F95.6
0124:  BTFSS  FD8.0
0126:  BCF    F95.6
0128:  BSF    F95.7
012A:  BTFSS  F83.7
012C:  BRA    012A
012E:  DECFSZ 01,F
0130:  BRA    0108
0132:  MOVLW  02
0134:  MOVWF  00
0136:  DECFSZ 00,F
0138:  BRA    0136
013A:  BCF    F8C.7
013C:  BCF    F95.7
013E:  NOP   
0140:  BSF    F95.6
0142:  MOVLW  02
0144:  MOVWF  00
0146:  DECFSZ 00,F
0148:  BRA    0146
014A:  MOVLW  02
014C:  MOVWF  00
014E:  DECFSZ 00,F
0150:  BRA    014E
0152:  BSF    F95.7
0154:  BTFSS  F83.7
0156:  BRA    0154
0158:  CLRF   01
015A:  MOVLW  02
015C:  MOVWF  00
015E:  DECFSZ 00,F
0160:  BRA    015E
0162:  BTFSC  F83.6
0164:  BSF    01.0
0166:  BCF    F8C.7
0168:  BCF    F95.7
016A:  BCF    F8C.6
016C:  BCF    F95.6
016E:  RETURN 0
....................  
.................... #include "funciones.h" 
.................... /** 
.................... *	\file funciones.h 
.................... *	\brief Resumen del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <i2c_Flex_LCD.h> 
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.0 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD dispay 
.................... //     \1 Set write position on LCD Line 1 
.................... //     \2 Set write position on LCD Line 2 
.................... //     \3 Set write position on LCD Line 3 
.................... //     \4 Set write position on LCD Line 4 
.................... // 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with 
.................... //              an EXPANDER of I/O with connection I2C. The tests of these 
.................... //              routines have been programmed using the IC PCF8574T of Phillips. 
.................... //              I used 4 bits mode programming. The 8 bits mode programming 
.................... //              is possible if you use 2 x PCF8574T. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... //For PCF8574T the addressing is: 
....................  
.................... //Jp3 Jp2 Jp1 
.................... //A2 A1 A0  Hex 
.................... //L L L  0x40 
.................... //L L H  0x42 
.................... //L H L  0x44 
.................... //L H H  0x46 
.................... //H L L  0x48 
.................... //H L H  0x4A 
.................... //H H L  0x4C 
.................... //H H H  0x4E 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module 
....................  
.................... #define ON             1 
.................... #define OFF            0 
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1 
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2 
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3 
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4 
....................   
.................... byte address; 
.................... int1 lcd_backlight=ON; 
....................  
.................... void i2c_lcd_backlight_On(){ 
....................       lcd_backlight=ON; 
.................... } 
....................  
.................... void i2c_lcd_backlight_Off(){ 
....................       lcd_backlight=OFF; 
.................... } 
....................  
.................... void i2c_send_nibble(unsigned char data) 
....................    {    
....................         i2c_start(); 
....................         delay_us(20); 
....................         i2c_write(LCD_ADDR); //the slave addresse 
....................         delay_us(20); 
....................         i2c_write(data); 
....................         delay_us(20); 
....................         i2c_stop(); 
....................         delay_us(20); 
....................    } 
....................  
.................... void lcd_send_byte(unsigned char data) 
....................    { 
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN 
....................         i2c_send_nibble(data); 
....................         data=data-4;       //toggle EN back to 0 
....................         i2c_send_nibble(data); 
....................    } 
....................     
.................... void lcd_clear() 
.................... { 
....................     lcd_send_byte(0x00); 
....................     lcd_send_byte(0x10); 
....................     delay_ms(2); 
.................... } 
....................  
.................... void lcd_init() 
.................... { 
....................     delay_ms(200); //LCD power up delay 
....................         
....................    //Request works on the command by set the RS = 0 R/W = 0 write 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................            //First state in 8 bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x30); 
....................            //Then set to 4-bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x20); 
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h) 
....................         lcd_send_byte(0x20); 
....................         lcd_send_byte(0x80); 
....................            //no need cursor on (0Ch) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0xC0); 
....................            //the cursor moves to the left (06 h) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x60); 
....................            //clears the display 
....................         lcd_clear(); 
.................... } 
....................  
*
150E:  CLRF   1E
1510:  MOVF   FC1,W
1512:  ANDLW  C0
1514:  IORLW  0F
1516:  MOVWF  FC1
.................... void lcd_gotoxy( byte x, byte y) 
*
1504:  CLRF   1B
.................... {      
.................... static char data; 
....................       
....................    switch(y) 
....................    { 
....................       case 1:  address= lcd_line_one;     break; 
....................       case 2:  address= lcd_line_two;     break; 
....................       case 3:  address= lcd_line_three;   break; 
....................       case 4:  address= lcd_line_four;    break; 
....................       default: address= lcd_line_one;     break;  
....................    } 
....................   
....................    address+=x-1; 
....................    data=address&0xF0; 
....................    lcd_send_byte(data); 
....................    data=address&0x0F; 
....................    data=data<<4; 
....................    lcd_send_byte(data); 
.................... } 
....................  
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... { 
....................  char data;      
....................   switch(in_data) 
....................    {  
....................      case '\f': lcd_clear()    ;  break;                
....................      case '\1': lcd_gotoxy(1,1);  break; 
....................      case '\2': lcd_gotoxy(1,2);  break; 
....................      case '\3': lcd_gotoxy(1,3);  break; 
....................      case '\4': lcd_gotoxy(1,4);  break; 
....................  
....................      default: 
....................         data=in_data&0xF0; 
....................         data=data|RS; //set RS pin to 1 
....................         lcd_send_byte(data); 
....................         data=in_data&0x0F; 
....................         data=data<<4; 
....................         data=data|RS; //set RS pin to 1 
....................         lcd_send_byte(data); 
....................      break; 
....................    } 
.................... }  
....................  
.................... #include <MAX191.h> 
.................... /*  
....................  * File:   MAX191.h 
....................  * Author: MARCOS 
....................  * 
....................  * Created on 23 de septiembre de 2016, 08:14 
....................  */ 
....................  
.................... #ifndef MAX192_H 
.................... #define MAX192_H 
....................  
.................... #define ADC_CS1 PIN_A1 
.................... #define ADC_SCLK PIN_A2 
.................... #define ADC_DOUT PIN_A3 
....................  
.................... unsigned long leer_ADC(ADC){ 
....................     unsigned long dato; 
....................     int i; 
....................     output_low (ADC_SCLK); 
....................     output_low (ADC_CS1); 
....................      
....................      
....................     if (ADC==2){ 
....................          
....................         output_low (ADC_CS1); // modo CPOL = 0, CPHA = 0 
....................         delay_us(1); 
....................          
....................         for(i=0;i<16;i++){ 
....................           output_high(ADC_SCLK); 
....................           shift_left(&dato,2,input(ADC_DOUT));  
....................           output_low(ADC_SCLK);  
....................         } 
....................   
....................         output_low (ADC_SCLK); 
....................         output_high (ADC_CS1); 
....................     } 
....................  
....................     dato= (dato>>2)& 0x0FFF; 
....................     return(dato); 
.................... } 
.................... #endif 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #ifndef FUNCIONES_H 
.................... #define FUNCIONES_H 
.................... //Declaracion de estados 
....................  
.................... #define 	PUNTO_TENS_CORR	0 
.................... #define 	CONVERSION_DESFASE	1 
.................... #define 	TENS_CORR_RMS	2 
.................... #define 	CALCULO_POT_ENER	3 
.................... #define 	MOSTRAR_DATOS	4 
....................  
.................... //Prototipos de los eventos 
.................... void maquina_estado(void); 
....................  
.................... #endif 
....................  
.................... #use fast_io(A) 
.................... #use fast_io(B) 
....................  
.................... extern int contador; 
.................... extern int pulso_timer; 
....................  
.................... void inicializar(); 
....................  
.................... void main() 
*
14F8:  CLRF   FF8
14FA:  BCF    FD0.7
14FC:  BSF    07.7
14FE:  BSF    1A.0
1500:  BSF    1A.0
1502:  BSF    1A.0
*
1506:  CLRF   1C
1508:  CLRF   1D
150A:  BSF    1A.0
150C:  CLRF   46
*
1518:  MOVLW  07
151A:  MOVWF  FB4
.................... { 
....................  
.................... //declaracion de variables 
.................... //inicializacion de perifericos 
....................  
.................... 	inicializar() ; 
151C:  GOTO   02D0
....................  
....................  
.................... 	while(1) 
.................... 	{ 
....................  
.................... 		maquina_estado(); 
1520:  BRA    101A
1522:  BRA    1520
....................  
.................... 	} 
.................... } 
....................  
1524:  BRA    1524
.................... void Inicializar(){ 
....................  
....................     setup_adc_ports(AN0);                                   //Canal 0 analógico 
*
02D0:  MOVF   FC1,W
02D2:  ANDLW  C0
02D4:  IORLW  0E
02D6:  MOVWF  FC1
....................     setup_adc(ADC_CLOCK_DIV_16);    
02D8:  MOVF   FC0,W
02DA:  ANDLW  C0
02DC:  IORLW  05
02DE:  MOVWF  FC0
02E0:  BCF    FC0.7
02E2:  BSF    FC2.0
....................     setup_timer_0( RTCC_INTERNAL | T0_DIV_2); 
02E4:  MOVLW  80
02E6:  MOVWF  FD5
....................     contador=1; 
02E8:  MOVLW  01
02EA:  MOVWF  1C
....................     lcd_init(); 
02EC:  BRA    021E
....................     lcd_gotoxy(1,1); 
02EE:  MOVLW  01
02F0:  MOVWF  56
02F2:  MOVWF  57
02F4:  RCALL  027A
....................     lcd_backlight=ON; 
02F6:  BSF    1A.0
....................     enable_interrupts (INT_RTCC); 
02F8:  BSF    FF2.5
....................     set_timer0(0x1D); 
02FA:  CLRF   FD7
02FC:  MOVLW  1D
02FE:  MOVWF  FD6
0300:  GOTO   1520 (RETURN)
.................... } 
....................  
....................  
.................... /** 
.................... *	\file funciones.c 
.................... *	\brief  
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
00BC:  DATA 50,6F
00BE:  DATA 74,65
00C0:  DATA 6E,63
00C2:  DATA 69,61
00C4:  DATA 3D,20
00C6:  DATA 25,66
00C8:  DATA 20,57
00CA:  DATA 00,00
00CC:  DATA 54,3D
00CE:  DATA 25,66
00D0:  DATA 20,56
00D2:  DATA 20,20
00D4:  DATA 49,3D
00D6:  DATA 25,66
00D8:  DATA 20,41
00DA:  DATA 00,00
*
0DB4:  TBLRD*+
0DB6:  MOVFF  FF6,48
0DBA:  MOVFF  FF7,49
0DBE:  MOVFF  FF5,55
0DC2:  RCALL  0D38
0DC4:  MOVFF  48,FF6
0DC8:  MOVFF  49,FF7
0DCC:  DECFSZ 47,F
0DCE:  BRA    0DB4
0DD0:  RETURN 0
0DD2:  MOVF   54,W
0DD4:  SUBLW  B6
0DD6:  MOVWF  54
0DD8:  CLRF   03
0DDA:  MOVFF  55,58
0DDE:  BSF    55.7
0DE0:  BCF    FD8.0
0DE2:  RRCF   55,F
0DE4:  RRCF   56,F
0DE6:  RRCF   57,F
0DE8:  RRCF   03,F
0DEA:  RRCF   02,F
0DEC:  RRCF   01,F
0DEE:  RRCF   00,F
0DF0:  DECFSZ 54,F
0DF2:  BRA    0DE0
0DF4:  BTFSS  58.7
0DF6:  BRA    0E0E
0DF8:  COMF   00,F
0DFA:  COMF   01,F
0DFC:  COMF   02,F
0DFE:  COMF   03,F
0E00:  INCF   00,F
0E02:  BTFSC  FD8.2
0E04:  INCF   01,F
0E06:  BTFSC  FD8.2
0E08:  INCF   02,F
0E0A:  BTFSC  FD8.2
0E0C:  INCF   03,F
0E0E:  GOTO   0EF0 (RETURN)
0E12:  BTFSC  FD8.1
0E14:  BRA    0E1C
0E16:  CLRF   FEA
0E18:  MOVLW  5C
0E1A:  MOVWF  FE9
0E1C:  CLRF   00
0E1E:  CLRF   01
0E20:  CLRF   02
0E22:  CLRF   03
0E24:  CLRF   5C
0E26:  CLRF   5D
0E28:  CLRF   5E
0E2A:  CLRF   5F
0E2C:  MOVF   5B,W
0E2E:  IORWF  5A,W
0E30:  IORWF  59,W
0E32:  IORWF  58,W
0E34:  BZ    0E8E
0E36:  MOVLW  20
0E38:  MOVWF  x60
0E3A:  BCF    FD8.0
0E3C:  RLCF   54,F
0E3E:  RLCF   55,F
0E40:  RLCF   56,F
0E42:  RLCF   57,F
0E44:  RLCF   5C,F
0E46:  RLCF   5D,F
0E48:  RLCF   5E,F
0E4A:  RLCF   5F,F
0E4C:  MOVF   5B,W
0E4E:  SUBWF  5F,W
0E50:  BNZ   0E62
0E52:  MOVF   5A,W
0E54:  SUBWF  5E,W
0E56:  BNZ   0E62
0E58:  MOVF   59,W
0E5A:  SUBWF  5D,W
0E5C:  BNZ   0E62
0E5E:  MOVF   58,W
0E60:  SUBWF  5C,W
0E62:  BNC   0E82
0E64:  MOVF   58,W
0E66:  SUBWF  5C,F
0E68:  MOVF   59,W
0E6A:  BTFSS  FD8.0
0E6C:  INCFSZ 59,W
0E6E:  SUBWF  5D,F
0E70:  MOVF   5A,W
0E72:  BTFSS  FD8.0
0E74:  INCFSZ 5A,W
0E76:  SUBWF  5E,F
0E78:  MOVF   5B,W
0E7A:  BTFSS  FD8.0
0E7C:  INCFSZ 5B,W
0E7E:  SUBWF  5F,F
0E80:  BSF    FD8.0
0E82:  RLCF   00,F
0E84:  RLCF   01,F
0E86:  RLCF   02,F
0E88:  RLCF   03,F
0E8A:  DECFSZ x60,F
0E8C:  BRA    0E3A
0E8E:  MOVFF  5C,FEF
0E92:  MOVFF  5D,FEC
0E96:  MOVFF  5E,FEC
0E9A:  MOVFF  5F,FEC
0E9E:  RETURN 0
0EA0:  MOVF   FE9,W
0EA2:  MOVWF  4C
0EA4:  MOVF   4B,W
0EA6:  MOVWF  4E
0EA8:  BZ    0EDE
0EAA:  MOVFF  4A,7C
0EAE:  MOVFF  49,7B
0EB2:  MOVFF  48,7A
0EB6:  MOVFF  47,79
0EBA:  CLRF   x80
0EBC:  CLRF   x7F
0EBE:  MOVLW  20
0EC0:  MOVWF  x7E
0EC2:  MOVLW  82
0EC4:  MOVWF  x7D
0EC6:  CALL   03A2
0ECA:  MOVFF  03,4A
0ECE:  MOVFF  02,49
0ED2:  MOVFF  01,48
0ED6:  MOVFF  00,47
0EDA:  DECFSZ 4E,F
0EDC:  BRA    0EAA
0EDE:  MOVFF  4A,57
0EE2:  MOVFF  49,56
0EE6:  MOVFF  48,55
0EEA:  MOVFF  47,54
0EEE:  BRA    0DD2
0EF0:  MOVFF  03,4A
0EF4:  MOVFF  02,49
0EF8:  MOVFF  01,48
0EFC:  MOVFF  00,47
0F00:  BTFSS  4A.7
0F02:  BRA    0F1E
0F04:  DECF   4C,F
0F06:  BSF    4C.5
0F08:  COMF   47,F
0F0A:  COMF   48,F
0F0C:  COMF   49,F
0F0E:  COMF   4A,F
0F10:  INCF   47,F
0F12:  BTFSC  FD8.2
0F14:  INCF   48,F
0F16:  BTFSC  FD8.2
0F18:  INCF   49,F
0F1A:  BTFSC  FD8.2
0F1C:  INCF   4A,F
0F1E:  MOVLW  3B
0F20:  MOVWF  53
0F22:  MOVLW  9A
0F24:  MOVWF  52
0F26:  MOVLW  CA
0F28:  MOVWF  51
0F2A:  CLRF   50
0F2C:  MOVLW  0A
0F2E:  MOVWF  4E
0F30:  MOVF   4B,W
0F32:  BTFSC  FD8.2
0F34:  INCF   4C,F
0F36:  BSF    FD8.1
0F38:  CLRF   FEA
0F3A:  MOVLW  47
0F3C:  MOVWF  FE9
0F3E:  MOVFF  4A,57
0F42:  MOVFF  49,56
0F46:  MOVFF  48,55
0F4A:  MOVFF  47,54
0F4E:  MOVFF  53,5B
0F52:  MOVFF  52,5A
0F56:  MOVFF  51,59
0F5A:  MOVFF  50,58
0F5E:  RCALL  0E12
0F60:  MOVF   01,W
0F62:  MOVF   00,F
0F64:  BNZ   0F84
0F66:  INCF   4B,W
0F68:  SUBWF  4E,W
0F6A:  BZ    0F84
0F6C:  MOVF   4C,W
0F6E:  BZ    0F88
0F70:  ANDLW  0F
0F72:  SUBWF  4E,W
0F74:  BZ    0F78
0F76:  BC    0FE6
0F78:  BTFSC  4C.7
0F7A:  BRA    0FE6
0F7C:  BTFSC  4C.6
0F7E:  BRA    0F88
0F80:  MOVLW  20
0F82:  BRA    0FDE
0F84:  MOVLW  20
0F86:  ANDWF  4C,F
0F88:  BTFSS  4C.5
0F8A:  BRA    0FA4
0F8C:  BCF    4C.5
0F8E:  MOVF   4B,W
0F90:  BTFSS  FD8.2
0F92:  DECF   4C,F
0F94:  MOVF   00,W
0F96:  MOVWF  4C
0F98:  MOVLW  2D
0F9A:  MOVWF  55
0F9C:  RCALL  0D38
0F9E:  MOVF   4C,W
0FA0:  MOVWF  00
0FA2:  CLRF   4C
0FA4:  MOVF   4B,W
0FA6:  SUBWF  4E,W
0FA8:  BNZ   0FBE
0FAA:  MOVF   00,W
0FAC:  MOVWF  4C
0FAE:  MOVLW  2E
0FB0:  MOVWF  55
0FB2:  RCALL  0D38
0FB4:  MOVF   4C,W
0FB6:  MOVWF  00
0FB8:  MOVLW  20
0FBA:  ANDWF  4C,F
0FBC:  MOVLW  00
0FBE:  MOVLW  30
0FC0:  BTFSS  4C.5
0FC2:  BRA    0FDE
0FC4:  BCF    4C.5
0FC6:  MOVF   4B,W
0FC8:  BTFSS  FD8.2
0FCA:  DECF   4C,F
0FCC:  MOVF   00,W
0FCE:  MOVWF  4C
0FD0:  MOVLW  2D
0FD2:  MOVWF  55
0FD4:  RCALL  0D38
0FD6:  MOVF   4C,W
0FD8:  MOVWF  00
0FDA:  CLRF   4C
0FDC:  MOVLW  30
0FDE:  ADDWF  00,F
0FE0:  MOVFF  00,55
0FE4:  RCALL  0D38
0FE6:  BCF    FD8.1
0FE8:  MOVFF  53,57
0FEC:  MOVFF  52,56
0FF0:  MOVFF  51,55
0FF4:  MOVFF  50,54
0FF8:  CLRF   5B
0FFA:  CLRF   5A
0FFC:  CLRF   59
0FFE:  MOVLW  0A
1000:  MOVWF  58
1002:  RCALL  0E12
1004:  MOVFF  03,53
1008:  MOVFF  02,52
100C:  MOVFF  01,51
1010:  MOVFF  00,50
1014:  DECFSZ 4E,F
1016:  BRA    0F36
1018:  RETURN 0
....................  
.................... #list 
....................  
.................... #use delay(clock=12 Mhz, crystal= 12 MHz)   // Selecciona la velocidad del oscilador interno 
.................... #use i2c(Master,Fast=100000, sda=PIN_D6, scl=PIN_D7,force_sw) 
.................... int contador = 0 ;int pulso_timer = 0 ; 
.................... #include "funciones.h"  
.................... /** 
.................... *	\file funciones.h 
.................... *	\brief Resumen del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <i2c_Flex_LCD.h> 
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.0 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD dispay 
.................... //     \1 Set write position on LCD Line 1 
.................... //     \2 Set write position on LCD Line 2 
.................... //     \3 Set write position on LCD Line 3 
.................... //     \4 Set write position on LCD Line 4 
.................... // 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with 
.................... //              an EXPANDER of I/O with connection I2C. The tests of these 
.................... //              routines have been programmed using the IC PCF8574T of Phillips. 
.................... //              I used 4 bits mode programming. The 8 bits mode programming 
.................... //              is possible if you use 2 x PCF8574T. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... //For PCF8574T the addressing is: 
....................  
.................... //Jp3 Jp2 Jp1 
.................... //A2 A1 A0  Hex 
.................... //L L L  0x40 
.................... //L L H  0x42 
.................... //L H L  0x44 
.................... //L H H  0x46 
.................... //H L L  0x48 
.................... //H L H  0x4A 
.................... //H H L  0x4C 
.................... //H H H  0x4E 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module 
....................  
.................... #define ON             1 
.................... #define OFF            0 
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1 
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2 
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3 
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4 
....................   
.................... byte address; 
.................... int1 lcd_backlight=ON; 
....................  
.................... void i2c_lcd_backlight_On(){ 
....................       lcd_backlight=ON; 
.................... } 
....................  
.................... void i2c_lcd_backlight_Off(){ 
....................       lcd_backlight=OFF; 
.................... } 
....................  
.................... void i2c_send_nibble(unsigned char data) 
....................    {    
....................         i2c_start(); 
*
0170:  BSF    F95.6
0172:  MOVLW  02
0174:  MOVWF  00
0176:  DECFSZ 00,F
0178:  BRA    0176
017A:  BSF    F95.7
017C:  MOVLW  02
017E:  MOVWF  00
0180:  DECFSZ 00,F
0182:  BRA    0180
0184:  BCF    F8C.6
0186:  BCF    F95.6
0188:  MOVLW  02
018A:  MOVWF  00
018C:  DECFSZ 00,F
018E:  BRA    018C
0190:  BCF    F8C.7
0192:  BCF    F95.7
....................         delay_us(20); 
0194:  MOVLW  13
0196:  MOVWF  00
0198:  DECFSZ 00,F
019A:  BRA    0198
019C:  BRA    019E
....................         i2c_write(LCD_ADDR); //the slave addresse 
019E:  MOVLW  4E
01A0:  MOVWF  5A
01A2:  RCALL  0104
....................         delay_us(20); 
01A4:  MOVLW  13
01A6:  MOVWF  00
01A8:  DECFSZ 00,F
01AA:  BRA    01A8
01AC:  BRA    01AE
....................         i2c_write(data); 
01AE:  MOVFF  59,5A
01B2:  RCALL  0104
....................         delay_us(20); 
01B4:  MOVLW  13
01B6:  MOVWF  00
01B8:  DECFSZ 00,F
01BA:  BRA    01B8
01BC:  BRA    01BE
....................         i2c_stop(); 
01BE:  BCF    F95.6
01C0:  NOP   
01C2:  BSF    F95.7
01C4:  BTFSS  F83.7
01C6:  BRA    01C4
01C8:  MOVLW  02
01CA:  MOVWF  00
01CC:  DECFSZ 00,F
01CE:  BRA    01CC
01D0:  BRA    01D2
01D2:  NOP   
01D4:  BSF    F95.6
01D6:  MOVLW  02
01D8:  MOVWF  00
01DA:  DECFSZ 00,F
01DC:  BRA    01DA
....................         delay_us(20); 
01DE:  MOVLW  13
01E0:  MOVWF  00
01E2:  DECFSZ 00,F
01E4:  BRA    01E2
01E6:  BRA    01E8
01E8:  RETURN 0
....................    } 
....................  
.................... void lcd_send_byte(unsigned char data) 
....................    { 
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN 
01EA:  BTFSS  1A.0
01EC:  BRA    01F8
01EE:  MOVF   58,W
01F0:  IORLW  04
01F2:  IORLW  08
01F4:  MOVWF  58
01F6:  BRA    01FA
01F8:  BSF    58.2
....................         i2c_send_nibble(data); 
01FA:  MOVFF  58,59
01FE:  RCALL  0170
....................         data=data-4;       //toggle EN back to 0 
0200:  MOVLW  04
0202:  SUBWF  58,F
....................         i2c_send_nibble(data); 
0204:  MOVFF  58,59
0208:  RCALL  0170
020A:  RETURN 0
....................    } 
....................     
.................... void lcd_clear() 
.................... { 
....................     lcd_send_byte(0x00); 
020C:  CLRF   58
020E:  RCALL  01EA
....................     lcd_send_byte(0x10); 
0210:  MOVLW  10
0212:  MOVWF  58
0214:  RCALL  01EA
....................     delay_ms(2); 
0216:  MOVLW  02
0218:  MOVWF  56
021A:  RCALL  00DC
021C:  RETURN 0
.................... } 
....................  
.................... void lcd_init() 
.................... { 
....................     delay_ms(200); //LCD power up delay 
021E:  MOVLW  C8
0220:  MOVWF  56
0222:  RCALL  00DC
....................         
....................    //Request works on the command by set the RS = 0 R/W = 0 write 
....................         lcd_send_byte(0x00); 
0224:  CLRF   58
0226:  RCALL  01EA
....................         lcd_send_byte(0x10); 
0228:  MOVLW  10
022A:  MOVWF  58
022C:  RCALL  01EA
....................         lcd_send_byte(0x00); 
022E:  CLRF   58
0230:  RCALL  01EA
....................         lcd_send_byte(0x00); 
0232:  CLRF   58
0234:  RCALL  01EA
....................         lcd_send_byte(0x10); 
0236:  MOVLW  10
0238:  MOVWF  58
023A:  RCALL  01EA
....................            //First state in 8 bit mode 
....................         lcd_send_byte(0x30); 
023C:  MOVLW  30
023E:  MOVWF  58
0240:  RCALL  01EA
....................         lcd_send_byte(0x30); 
0242:  MOVLW  30
0244:  MOVWF  58
0246:  RCALL  01EA
....................            //Then set to 4-bit mode 
....................         lcd_send_byte(0x30); 
0248:  MOVLW  30
024A:  MOVWF  58
024C:  RCALL  01EA
....................         lcd_send_byte(0x20); 
024E:  MOVLW  20
0250:  MOVWF  58
0252:  RCALL  01EA
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h) 
....................         lcd_send_byte(0x20); 
0254:  MOVLW  20
0256:  MOVWF  58
0258:  RCALL  01EA
....................         lcd_send_byte(0x80); 
025A:  MOVLW  80
025C:  MOVWF  58
025E:  RCALL  01EA
....................            //no need cursor on (0Ch) 
....................         lcd_send_byte(0x00); 
0260:  CLRF   58
0262:  RCALL  01EA
....................         lcd_send_byte(0xC0); 
0264:  MOVLW  C0
0266:  MOVWF  58
0268:  RCALL  01EA
....................            //the cursor moves to the left (06 h) 
....................         lcd_send_byte(0x00); 
026A:  CLRF   58
026C:  RCALL  01EA
....................         lcd_send_byte(0x60); 
026E:  MOVLW  60
0270:  MOVWF  58
0272:  RCALL  01EA
....................            //clears the display 
....................         lcd_clear(); 
0274:  RCALL  020C
0276:  GOTO   02EE (RETURN)
.................... } 
....................  
.................... void lcd_gotoxy( byte x, byte y) 
.................... {      
.................... static char data; 
....................       
....................    switch(y) 
027A:  MOVF   57,W
027C:  XORLW  01
027E:  BZ    028E
0280:  XORLW  03
0282:  BZ    0294
0284:  XORLW  01
0286:  BZ    029A
0288:  XORLW  07
028A:  BZ    02A0
028C:  BRA    02A6
....................    { 
....................       case 1:  address= lcd_line_one;     break; 
028E:  MOVLW  80
0290:  MOVWF  19
0292:  BRA    02AA
....................       case 2:  address= lcd_line_two;     break; 
0294:  MOVLW  C0
0296:  MOVWF  19
0298:  BRA    02AA
....................       case 3:  address= lcd_line_three;   break; 
029A:  MOVLW  94
029C:  MOVWF  19
029E:  BRA    02AA
....................       case 4:  address= lcd_line_four;    break; 
02A0:  MOVLW  D4
02A2:  MOVWF  19
02A4:  BRA    02AA
....................       default: address= lcd_line_one;     break;  
02A6:  MOVLW  80
02A8:  MOVWF  19
....................    } 
....................   
....................    address+=x-1; 
02AA:  MOVLW  01
02AC:  SUBWF  56,W
02AE:  ADDWF  19,F
....................    data=address&0xF0; 
02B0:  MOVF   19,W
02B2:  ANDLW  F0
02B4:  MOVWF  1E
....................    lcd_send_byte(data); 
02B6:  MOVFF  1E,58
02BA:  RCALL  01EA
....................    data=address&0x0F; 
02BC:  MOVF   19,W
02BE:  ANDLW  0F
02C0:  MOVWF  1E
....................    data=data<<4; 
02C2:  SWAPF  1E,F
02C4:  MOVLW  F0
02C6:  ANDWF  1E,F
....................    lcd_send_byte(data); 
02C8:  MOVFF  1E,58
02CC:  RCALL  01EA
02CE:  RETURN 0
.................... } 
....................  
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... { 
....................  char data;      
....................   switch(in_data) 
*
0D38:  MOVF   55,W
0D3A:  XORLW  0C
0D3C:  BZ    0D50
0D3E:  XORLW  0D
0D40:  BZ    0D56
0D42:  XORLW  03
0D44:  BZ    0D62
0D46:  XORLW  01
0D48:  BZ    0D70
0D4A:  XORLW  07
0D4C:  BZ    0D7E
0D4E:  BRA    0D8C
....................    {  
....................      case '\f': lcd_clear()    ;  break;                
0D50:  CALL   020C
0D54:  BRA    0DB2
....................      case '\1': lcd_gotoxy(1,1);  break; 
0D56:  MOVLW  01
0D58:  MOVWF  56
0D5A:  MOVWF  57
0D5C:  CALL   027A
0D60:  BRA    0DB2
....................      case '\2': lcd_gotoxy(1,2);  break; 
0D62:  MOVLW  01
0D64:  MOVWF  56
0D66:  MOVLW  02
0D68:  MOVWF  57
0D6A:  CALL   027A
0D6E:  BRA    0DB2
....................      case '\3': lcd_gotoxy(1,3);  break; 
0D70:  MOVLW  01
0D72:  MOVWF  56
0D74:  MOVLW  03
0D76:  MOVWF  57
0D78:  CALL   027A
0D7C:  BRA    0DB2
....................      case '\4': lcd_gotoxy(1,4);  break; 
0D7E:  MOVLW  01
0D80:  MOVWF  56
0D82:  MOVLW  04
0D84:  MOVWF  57
0D86:  CALL   027A
0D8A:  BRA    0DB2
....................  
....................      default: 
....................         data=in_data&0xF0; 
0D8C:  MOVF   55,W
0D8E:  ANDLW  F0
0D90:  MOVWF  56
....................         data=data|RS; //set RS pin to 1 
0D92:  BSF    56.0
....................         lcd_send_byte(data); 
0D94:  MOVFF  56,58
0D98:  CALL   01EA
....................         data=in_data&0x0F; 
0D9C:  MOVF   55,W
0D9E:  ANDLW  0F
0DA0:  MOVWF  56
....................         data=data<<4; 
0DA2:  SWAPF  56,F
0DA4:  MOVLW  F0
0DA6:  ANDWF  56,F
....................         data=data|RS; //set RS pin to 1 
0DA8:  BSF    56.0
....................         lcd_send_byte(data); 
0DAA:  MOVFF  56,58
0DAE:  CALL   01EA
....................      break; 
....................    } 
0DB2:  RETURN 0
.................... }  
....................  
.................... #include <MAX191.h> 
.................... /*  
....................  * File:   MAX191.h 
....................  * Author: MARCOS 
....................  * 
....................  * Created on 23 de septiembre de 2016, 08:14 
....................  */ 
....................  
.................... #ifndef MAX192_H 
.................... #define MAX192_H 
....................  
.................... #define ADC_CS1 PIN_A1 
.................... #define ADC_SCLK PIN_A2 
.................... #define ADC_DOUT PIN_A3 
....................  
.................... unsigned long leer_ADC(ADC){ 
....................     unsigned long dato; 
....................     int i; 
....................     output_low (ADC_SCLK); 
*
0304:  BCF    F92.2
0306:  BCF    F89.2
....................     output_low (ADC_CS1); 
0308:  BCF    F92.1
030A:  BCF    F89.1
....................      
....................      
....................     if (ADC==2){ 
030C:  MOVF   4A,W
030E:  SUBLW  02
0310:  BNZ   0346
....................          
....................         output_low (ADC_CS1); // modo CPOL = 0, CPHA = 0 
0312:  BCF    F92.1
0314:  BCF    F89.1
....................         delay_us(1); 
0316:  BRA    0318
0318:  NOP   
....................          
....................         for(i=0;i<16;i++){ 
031A:  CLRF   4D
031C:  MOVF   4D,W
031E:  SUBLW  0F
0320:  BNC   033E
....................           output_high(ADC_SCLK); 
0322:  BCF    F92.2
0324:  BSF    F89.2
....................           shift_left(&dato,2,input(ADC_DOUT));  
0326:  BSF    F92.3
0328:  BTFSC  F80.3
032A:  BRA    0330
032C:  BCF    FD8.0
032E:  BRA    0332
0330:  BSF    FD8.0
0332:  RLCF   4B,F
0334:  RLCF   4C,F
....................           output_low(ADC_SCLK);  
0336:  BCF    F92.2
0338:  BCF    F89.2
033A:  INCF   4D,F
033C:  BRA    031C
....................         } 
....................   
....................         output_low (ADC_SCLK); 
033E:  BCF    F92.2
0340:  BCF    F89.2
....................         output_high (ADC_CS1); 
0342:  BCF    F92.1
0344:  BSF    F89.1
....................     } 
....................  
....................     dato= (dato>>2)& 0x0FFF; 
0346:  RRCF   4C,W
0348:  MOVWF  4F
034A:  RRCF   4B,W
034C:  MOVWF  4E
034E:  RRCF   4F,F
0350:  RRCF   4E,F
0352:  MOVLW  3F
0354:  ANDWF  4F,F
0356:  MOVFF  4E,4B
035A:  MOVF   4F,W
035C:  ANDLW  0F
035E:  MOVWF  4C
....................     return(dato); 
0360:  MOVFF  4B,01
0364:  MOVFF  4C,02
0368:  GOTO   104C (RETURN)
.................... } 
.................... #endif 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
*
08CE:  MOVFF  58,78
08D2:  MOVFF  57,77
08D6:  MOVFF  56,76
08DA:  MOVFF  55,75
08DE:  CLRF   x7C
08E0:  CLRF   x7B
08E2:  CLRF   x7A
08E4:  CLRF   x79
08E6:  RCALL  0858
08E8:  BC    08EC
08EA:  BNZ   08F6
....................       return(0.0); 
08EC:  CLRF   00
08EE:  CLRF   01
08F0:  CLRF   02
08F2:  CLRF   03
08F4:  BRA    09D6
....................  
....................    y=x; 
08F6:  MOVFF  58,5C
08FA:  MOVFF  57,5B
08FE:  MOVFF  56,5A
0902:  MOVFF  55,59
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
0906:  CLRF   x62
0908:  MOVLW  59
090A:  MOVWF  x61
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
090C:  MOVFF  61,FE9
0910:  MOVFF  62,FEA
0914:  MOVF   FEF,W
0916:  CLRF   x66
0918:  MOVWF  x65
091A:  MOVLW  7F
091C:  ADDWF  x65,F
091E:  MOVLW  00
0920:  ADDWFC x66,F
0922:  BCF    FD8.0
0924:  RRCF   x66,W
0926:  RRCF   x65,W
0928:  MOVFF  62,FEA
092C:  MOVFF  61,FE9
0930:  MOVWF  FEF
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
0932:  MOVFF  5C,60
0936:  MOVFF  5B,5F
093A:  MOVFF  5A,5E
093E:  MOVFF  59,5D
....................       y+=(x/y); 
0942:  MOVFF  58,5C
0946:  MOVFF  57,5B
094A:  MOVFF  56,5A
094E:  MOVFF  55,59
0952:  MOVFF  5C,60
0956:  MOVFF  5B,5F
095A:  MOVFF  5A,5E
095E:  MOVFF  59,5D
0962:  RCALL  0494
0964:  BCF    FD8.1
0966:  MOVFF  5C,7C
096A:  MOVFF  5B,7B
096E:  MOVFF  5A,7A
0972:  MOVFF  59,79
0976:  MOVFF  03,80
097A:  MOVFF  02,7F
097E:  MOVFF  01,7E
0982:  MOVFF  00,7D
0986:  RCALL  05EE
0988:  MOVFF  03,5C
098C:  MOVFF  02,5B
0990:  MOVFF  01,5A
0994:  MOVFF  00,59
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
0998:  MOVFF  61,FE9
099C:  MOVFF  62,FEA
09A0:  DECF   FEF,F
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
09A2:  MOVFF  60,78
09A6:  MOVFF  5F,77
09AA:  MOVFF  5E,76
09AE:  MOVFF  5D,75
09B2:  MOVFF  5C,7C
09B6:  MOVFF  5B,7B
09BA:  MOVFF  5A,7A
09BE:  MOVFF  59,79
09C2:  RCALL  0858
09C4:  BNZ   0932
....................  
....................    return(res); 
09C6:  MOVFF  5D,00
09CA:  MOVFF  5E,01
09CE:  MOVFF  5F,02
09D2:  MOVFF  60,03
09D6:  RETURN 0
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0A12:  CLRF   x80
0A14:  CLRF   x7F
0A16:  CLRF   x7E
0A18:  MOVLW  7F
0A1A:  MOVWF  x7D
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
0A1C:  MOVLW  7E
0A1E:  MOVWF  x87
0A20:  MOVLW  80
0A22:  MOVWF  x88
0A24:  CLRF   x89
0A26:  CLRF   x8A
0A28:  MOVLW  7A
0A2A:  MOVWF  x8B
0A2C:  MOVLW  2A
0A2E:  MOVWF  x8C
0A30:  MOVLW  AA
0A32:  MOVWF  x8D
0A34:  MOVLW  A3
0A36:  MOVWF  x8E
0A38:  MOVLW  75
0A3A:  MOVWF  x8F
0A3C:  MOVLW  B6
0A3E:  MOVWF  x90
0A40:  MOVLW  09
0A42:  MOVWF  x91
0A44:  MOVLW  B4
0A46:  MOVWF  x92
0A48:  MOVLW  6F
0A4A:  MOVWF  x93
0A4C:  MOVLW  4F
0A4E:  MOVWF  x94
0A50:  MOVLW  B6
0A52:  MOVWF  x95
0A54:  MOVLW  AA
0A56:  MOVWF  x96
0A58:  MOVLW  69
0A5A:  MOVWF  x97
0A5C:  MOVLW  8B
0A5E:  MOVWF  x98
0A60:  MOVLW  F6
0A62:  MOVWF  x99
0A64:  MOVLW  E8
0A66:  MOVWF  x9A
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
0A68:  MOVFF  74,78
0A6C:  MOVFF  73,77
0A70:  MOVFF  72,76
0A74:  MOVFF  71,75
0A78:  CLRF   x7C
0A7A:  CLRF   x7B
0A7C:  CLRF   x7A
0A7E:  CLRF   x79
0A80:  RCALL  0858
0A82:  BNC   0A8A
0A84:  MOVF   x72,W
0A86:  XORLW  80
0A88:  MOVWF  x72
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
0A8A:  MOVFF  74,7C
0A8E:  MOVFF  73,7B
0A92:  MOVFF  72,7A
0A96:  MOVFF  71,79
0A9A:  MOVLW  83
0A9C:  MOVWF  x80
0A9E:  MOVLW  F9
0AA0:  MOVWF  x7F
0AA2:  MOVLW  22
0AA4:  MOVWF  x7E
0AA6:  MOVLW  7E
0AA8:  MOVWF  x7D
0AAA:  RCALL  03A2
0AAC:  MOVFF  03,78
0AB0:  MOVFF  02,77
0AB4:  MOVFF  01,76
0AB8:  MOVFF  00,75
0ABC:  BRA    09D8
0ABE:  MOVFF  01,81
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
0AC2:  MOVFF  74,7C
0AC6:  MOVFF  73,7B
0ACA:  MOVFF  72,7A
0ACE:  MOVFF  71,79
0AD2:  MOVLW  83
0AD4:  MOVWF  x80
0AD6:  MOVLW  F9
0AD8:  MOVWF  x7F
0ADA:  MOVLW  22
0ADC:  MOVWF  x7E
0ADE:  MOVLW  7E
0AE0:  MOVWF  x7D
0AE2:  RCALL  03A2
0AE4:  MOVFF  03,9E
0AE8:  MOVFF  02,9D
0AEC:  MOVFF  01,9C
0AF0:  MOVFF  00,9B
0AF4:  CLRF   x7A
0AF6:  MOVFF  81,79
0AFA:  RCALL  036C
0AFC:  BSF    FD8.1
0AFE:  MOVFF  9E,7C
0B02:  MOVFF  9D,7B
0B06:  MOVFF  9C,7A
0B0A:  MOVFF  9B,79
0B0E:  MOVFF  03,80
0B12:  MOVFF  02,7F
0B16:  MOVFF  01,7E
0B1A:  MOVFF  00,7D
0B1E:  RCALL  05EE
0B20:  MOVFF  03,86
0B24:  MOVFF  02,85
0B28:  MOVFF  01,84
0B2C:  MOVFF  00,83
....................    quad = quad % 4;                    // quadrant (0 to 3) 
0B30:  MOVLW  03
0B32:  ANDWF  x81,F
....................  
....................    if (quad == 0 || quad == 2) 
0B34:  MOVF   x81,F
0B36:  BZ    0B3E
0B38:  MOVF   x81,W
0B3A:  SUBLW  02
0B3C:  BNZ   0B72
....................       t = frac * PI_DIV_BY_TWO; 
0B3E:  MOVFF  86,7C
0B42:  MOVFF  85,7B
0B46:  MOVFF  84,7A
0B4A:  MOVFF  83,79
0B4E:  MOVLW  DB
0B50:  MOVWF  x80
0B52:  MOVLW  0F
0B54:  MOVWF  x7F
0B56:  MOVLW  49
0B58:  MOVWF  x7E
0B5A:  MOVLW  7F
0B5C:  MOVWF  x7D
0B5E:  RCALL  03A2
0B60:  MOVFF  03,7C
0B64:  MOVFF  02,7B
0B68:  MOVFF  01,7A
0B6C:  MOVFF  00,79
0B70:  BRA    0C3C
....................    else if (quad == 1) 
0B72:  DECFSZ x81,W
0B74:  BRA    0BDA
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0B76:  BSF    FD8.1
0B78:  CLRF   x7C
0B7A:  CLRF   x7B
0B7C:  CLRF   x7A
0B7E:  MOVLW  7F
0B80:  MOVWF  x79
0B82:  MOVFF  86,80
0B86:  MOVFF  85,7F
0B8A:  MOVFF  84,7E
0B8E:  MOVFF  83,7D
0B92:  RCALL  05EE
0B94:  MOVFF  03,9E
0B98:  MOVFF  02,9D
0B9C:  MOVFF  01,9C
0BA0:  MOVFF  00,9B
0BA4:  MOVFF  03,7C
0BA8:  MOVFF  02,7B
0BAC:  MOVFF  01,7A
0BB0:  MOVFF  00,79
0BB4:  MOVLW  DB
0BB6:  MOVWF  x80
0BB8:  MOVLW  0F
0BBA:  MOVWF  x7F
0BBC:  MOVLW  49
0BBE:  MOVWF  x7E
0BC0:  MOVLW  7F
0BC2:  MOVWF  x7D
0BC4:  CALL   03A2
0BC8:  MOVFF  03,7C
0BCC:  MOVFF  02,7B
0BD0:  MOVFF  01,7A
0BD4:  MOVFF  00,79
0BD8:  BRA    0C3C
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0BDA:  BSF    FD8.1
0BDC:  MOVFF  86,7C
0BE0:  MOVFF  85,7B
0BE4:  MOVFF  84,7A
0BE8:  MOVFF  83,79
0BEC:  CLRF   x80
0BEE:  CLRF   x7F
0BF0:  CLRF   x7E
0BF2:  MOVLW  7F
0BF4:  MOVWF  x7D
0BF6:  RCALL  05EE
0BF8:  MOVFF  03,9E
0BFC:  MOVFF  02,9D
0C00:  MOVFF  01,9C
0C04:  MOVFF  00,9B
0C08:  MOVFF  03,7C
0C0C:  MOVFF  02,7B
0C10:  MOVFF  01,7A
0C14:  MOVFF  00,79
0C18:  MOVLW  DB
0C1A:  MOVWF  x80
0C1C:  MOVLW  0F
0C1E:  MOVWF  x7F
0C20:  MOVLW  49
0C22:  MOVWF  x7E
0C24:  MOVLW  7F
0C26:  MOVWF  x7D
0C28:  CALL   03A2
0C2C:  MOVFF  03,7C
0C30:  MOVFF  02,7B
0C34:  MOVFF  01,7A
0C38:  MOVFF  00,79
....................  
....................    y = 1.0; 
0C3C:  CLRF   x78
0C3E:  CLRF   x77
0C40:  CLRF   x76
0C42:  MOVLW  7F
0C44:  MOVWF  x75
....................    t = t * t; 
0C46:  MOVFF  7C,80
0C4A:  MOVFF  7B,7F
0C4E:  MOVFF  7A,7E
0C52:  MOVFF  79,7D
0C56:  CALL   03A2
0C5A:  MOVFF  03,7C
0C5E:  MOVFF  02,7B
0C62:  MOVFF  01,7A
0C66:  MOVFF  00,79
....................    for (i = 0; i <= 4; i++) 
0C6A:  CLRF   x82
0C6C:  MOVF   x82,W
0C6E:  SUBLW  04
0C70:  BNC   0D14
....................    { 
....................       t2 = t2 * t; 
0C72:  MOVFF  80,7C
0C76:  MOVFF  7F,7B
0C7A:  MOVFF  7E,7A
0C7E:  MOVFF  7D,79
0C82:  MOVFF  7C,80
0C86:  MOVFF  7B,7F
0C8A:  MOVFF  7A,7E
0C8E:  MOVFF  79,7D
0C92:  CALL   03A2
0C96:  MOVFF  03,80
0C9A:  MOVFF  02,7F
0C9E:  MOVFF  01,7E
0CA2:  MOVFF  00,7D
....................       y = y + p[i] * t2; 
0CA6:  MOVF   x82,W
0CA8:  MULLW  04
0CAA:  MOVF   FF3,W
0CAC:  CLRF   03
0CAE:  ADDLW  87
0CB0:  MOVWF  FE9
0CB2:  MOVLW  00
0CB4:  ADDWFC 03,W
0CB6:  MOVWF  FEA
0CB8:  MOVFF  FEF,79
0CBC:  MOVFF  FEC,7A
0CC0:  MOVFF  FEC,7B
0CC4:  MOVFF  FEC,7C
0CC8:  CALL   03A2
0CCC:  MOVFF  FEA,9C
0CD0:  MOVFF  FE9,9B
0CD4:  BCF    FD8.1
0CD6:  MOVFF  78,7C
0CDA:  MOVFF  77,7B
0CDE:  MOVFF  76,7A
0CE2:  MOVFF  75,79
0CE6:  MOVFF  03,80
0CEA:  MOVFF  02,7F
0CEE:  MOVFF  01,7E
0CF2:  MOVFF  00,7D
0CF6:  RCALL  05EE
0CF8:  MOVFF  9C,FEA
0CFC:  MOVFF  9B,FE9
0D00:  MOVFF  03,78
0D04:  MOVFF  02,77
0D08:  MOVFF  01,76
0D0C:  MOVFF  00,75
0D10:  INCF   x82,F
0D12:  BRA    0C6C
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0D14:  MOVF   x81,W
0D16:  SUBLW  02
0D18:  BZ    0D1E
0D1A:  DECFSZ x81,W
0D1C:  BRA    0D24
....................       y = -y;  // correct sign 
0D1E:  MOVF   x76,W
0D20:  XORLW  80
0D22:  MOVWF  x76
....................  
....................    return (y); 
0D24:  MOVFF  75,00
0D28:  MOVFF  76,01
0D2C:  MOVFF  77,02
0D30:  MOVFF  78,03
0D34:  GOTO   13EC (RETURN)
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #ifndef FUNCIONES_H 
.................... #define FUNCIONES_H 
.................... //Declaracion de estados 
....................  
.................... #define 	PUNTO_TENS_CORR	0 
.................... #define 	CONVERSION_DESFASE	1 
.................... #define 	TENS_CORR_RMS	2 
.................... #define 	CALCULO_POT_ENER	3 
.................... #define 	MOSTRAR_DATOS	4 
....................  
.................... //Prototipos de los eventos 
.................... void maquina_estado(void); 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... //Implementacion Switch-Case 
....................  
.................... /** 
.................... *	\fn void maquina_estado() 
.................... *	\brief Implementacion Switch-Case 
.................... *	\details  
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
....................  **/ 
.................... unsigned long punto1, punto2; 
.................... int8 pos_V,pos_I,pos_V_A,pos_I_A; 
.................... int control_V, control_I; 
.................... int desfase; 
.................... float tension, corriente, tension_RMS,corriente_RMS, t_desfase, potencia_ins,angulo; 
....................  
....................  
.................... #INT_RTCC                // interrupcion para demora de 500 us 
.................... void interrtimer_0(){ 
....................     set_timer0(0x1D);   // se carga 29 para un desborde en 500 us teniendo en cuenta los tiempos en C 
*
00AE:  CLRF   FD7
00B0:  MOVLW  1D
00B2:  MOVWF  FD6
....................     pulso_timer++; 
00B4:  INCF   1D,F
00B6:  BCF    FF2.2
00B8:  GOTO   0060
....................    } 
....................  
.................... void maquina_estado() 
.................... { 
.................... 		static int estado = PUNTO_TENS_CORR; 
....................  
.................... 		switch(estado) 
*
101A:  MOVF   46,W
101C:  XORLW  00
101E:  BZ    1038
1020:  XORLW  01
1022:  BZ    10A0
1024:  XORLW  03
1026:  BTFSC  FD8.2
1028:  BRA    11A6
102A:  XORLW  01
102C:  BTFSC  FD8.2
102E:  BRA    1276
1030:  XORLW  07
1032:  BTFSC  FD8.2
1034:  BRA    1432
1036:  BRA    14F2
.................... 		{ 
.................... 			case PUNTO_TENS_CORR: 
....................                 set_adc_channel(0);           //Habilitación canal 
1038:  MOVLW  00
103A:  MOVWF  01
103C:  MOVF   FC2,W
103E:  ANDLW  C3
1040:  IORWF  01,W
1042:  MOVWF  FC2
....................                 punto1= leer_ADC(2); 
1044:  MOVLW  02
1046:  MOVWF  4A
1048:  GOTO   0304
104C:  MOVFF  02,20
1050:  MOVFF  01,1F
....................                 punto2= read_adc(); // comprobar si funciona con el tiempo de demora de la lectura del externo 
1054:  BSF    FC2.1
1056:  BTFSC  FC2.1
1058:  BRA    1056
105A:  CLRF   22
105C:  MOVFF  FC4,21
....................                 // convierte los valores de long a float 
....................                 tension=punto1; 
1060:  MOVFF  20,7A
1064:  MOVFF  1F,79
1068:  CALL   036C
106C:  MOVFF  03,2D
1070:  MOVFF  02,2C
1074:  MOVFF  01,2B
1078:  MOVFF  00,2A
....................                 corriente=punto2; 
107C:  MOVFF  22,7A
1080:  MOVFF  21,79
1084:  CALL   036C
1088:  MOVFF  03,31
108C:  MOVFF  02,30
1090:  MOVFF  01,2F
1094:  MOVFF  00,2E
....................                 contador++; 
1098:  INCF   1C,F
.................... 					estado = CONVERSION_DESFASE; 
109A:  MOVLW  01
109C:  MOVWF  46
.................... 		 
.................... 				 
....................  
.................... 				break; 
109E:  BRA    14F4
.................... 			 
.................... 			case CONVERSION_DESFASE: 
....................                 tension= (tension*5)/4096; 
10A0:  MOVFF  2D,7C
10A4:  MOVFF  2C,7B
10A8:  MOVFF  2B,7A
10AC:  MOVFF  2A,79
10B0:  CLRF   x80
10B2:  CLRF   x7F
10B4:  MOVLW  20
10B6:  MOVWF  x7E
10B8:  MOVLW  81
10BA:  MOVWF  x7D
10BC:  CALL   03A2
10C0:  MOVFF  03,4A
10C4:  MOVFF  02,49
10C8:  MOVFF  01,48
10CC:  MOVFF  00,47
10D0:  MOVFF  03,5C
10D4:  MOVFF  02,5B
10D8:  MOVFF  01,5A
10DC:  MOVFF  00,59
10E0:  CLRF   x60
10E2:  CLRF   5F
10E4:  CLRF   5E
10E6:  MOVLW  8B
10E8:  MOVWF  5D
10EA:  CALL   0494
10EE:  MOVFF  03,2D
10F2:  MOVFF  02,2C
10F6:  MOVFF  01,2B
10FA:  MOVFF  00,2A
....................                 corriente= (corriente*5)/1024; 
10FE:  MOVFF  31,7C
1102:  MOVFF  30,7B
1106:  MOVFF  2F,7A
110A:  MOVFF  2E,79
110E:  CLRF   x80
1110:  CLRF   x7F
1112:  MOVLW  20
1114:  MOVWF  x7E
1116:  MOVLW  81
1118:  MOVWF  x7D
111A:  CALL   03A2
111E:  MOVFF  03,4A
1122:  MOVFF  02,49
1126:  MOVFF  01,48
112A:  MOVFF  00,47
112E:  MOVFF  03,5C
1132:  MOVFF  02,5B
1136:  MOVFF  01,5A
113A:  MOVFF  00,59
113E:  CLRF   x60
1140:  CLRF   5F
1142:  CLRF   5E
1144:  MOVLW  89
1146:  MOVWF  5D
1148:  CALL   0494
114C:  MOVFF  03,31
1150:  MOVFF  02,30
1154:  MOVFF  01,2F
1158:  MOVFF  00,2E
....................                  
....................                 // Analisis del punto POSITVO O NEGATIVO 
....................                 // valor positivo estado=0-- valor negativo estado=1 
....................                  
....................                 //TENSION 
....................                 #asm 
....................                 clrf &pos_V; 
115C:  CLRF   23
....................                 btfsc (&tension + 0x01), 7; 
115E:  BTFSC  2B.7
....................                 bsf &pos_V,0; 
1160:  BSF    23.0
....................                 #endasm 
.................... 				 
....................                 //CORRIENTE 
....................                 #asm 
....................                 clrf &pos_I; 
1162:  CLRF   24
....................                 btfsc (&corriente + 0x01), 7; 
1164:  BTFSC  2F.7
....................                 bsf &pos_I,0; 
1166:  BSF    24.0
....................                 #endasm 
.................... 					 
....................                 if (pos_V==1 && contador!=0 && pos_V_A==0 && control_V != 0){ 
1168:  DECFSZ 23,W
116A:  BRA    1180
116C:  MOVF   1C,F
116E:  BZ    1180
1170:  MOVF   25,F
1172:  BNZ   1180
1174:  MOVF   27,F
1176:  BZ    1180
....................                  control_V= contador; // tiempo en el que cruzó la tension  
1178:  MOVFF  1C,27
....................                  desfase=1; 
117C:  MOVLW  01
117E:  MOVWF  29
....................                 } 
....................                  
....................                 if (pos_I==1 && contador!=0 && pos_I_A==0 && control_I != 0){ 
1180:  DECFSZ 24,W
1182:  BRA    1198
1184:  MOVF   1C,F
1186:  BZ    1198
1188:  MOVF   26,F
118A:  BNZ   1198
118C:  MOVF   28,F
118E:  BZ    1198
....................                      
....................                  control_I= contador; // tiempo en el que cruzó la corriente 
1190:  MOVFF  1C,28
....................                  desfase=2; 
1194:  MOVLW  02
1196:  MOVWF  29
....................                 } 
....................                  
....................                 pos_V_A=pos_V; 
1198:  MOVFF  23,25
....................                 pos_I_A=pos_I; 
119C:  MOVFF  24,26
....................                  
....................                  
.................... 					estado = TENS_CORR_RMS; 
11A0:  MOVLW  02
11A2:  MOVWF  46
.................... 		 
.................... 				 
....................  
.................... 				break; 
11A4:  BRA    14F4
.................... 			 
.................... 			case TENS_CORR_RMS: 
.................... 			 
.................... 				if((contador<60)&& (pulso_timer==1)) 
11A6:  MOVF   1C,W
11A8:  SUBLW  3B
11AA:  BNC   1268
11AC:  DECFSZ 1D,W
11AE:  BRA    1268
.................... 				{ 
.................... 					tension_RMS=tension_RMS+ tension * tension;       //calcula tension eficaz 
11B0:  MOVFF  2D,7C
11B4:  MOVFF  2C,7B
11B8:  MOVFF  2B,7A
11BC:  MOVFF  2A,79
11C0:  MOVFF  2D,80
11C4:  MOVFF  2C,7F
11C8:  MOVFF  2B,7E
11CC:  MOVFF  2A,7D
11D0:  CALL   03A2
11D4:  BCF    FD8.1
11D6:  MOVFF  35,7C
11DA:  MOVFF  34,7B
11DE:  MOVFF  33,7A
11E2:  MOVFF  32,79
11E6:  MOVFF  03,80
11EA:  MOVFF  02,7F
11EE:  MOVFF  01,7E
11F2:  MOVFF  00,7D
11F6:  CALL   05EE
11FA:  MOVFF  03,35
11FE:  MOVFF  02,34
1202:  MOVFF  01,33
1206:  MOVFF  00,32
....................                     corriente_RMS= corriente_RMS+ corriente * corriente; // calcula corriente eficaz 
120A:  MOVFF  31,7C
120E:  MOVFF  30,7B
1212:  MOVFF  2F,7A
1216:  MOVFF  2E,79
121A:  MOVFF  31,80
121E:  MOVFF  30,7F
1222:  MOVFF  2F,7E
1226:  MOVFF  2E,7D
122A:  CALL   03A2
122E:  BCF    FD8.1
1230:  MOVFF  39,7C
1234:  MOVFF  38,7B
1238:  MOVFF  37,7A
123C:  MOVFF  36,79
1240:  MOVFF  03,80
1244:  MOVFF  02,7F
1248:  MOVFF  01,7E
124C:  MOVFF  00,7D
1250:  CALL   05EE
1254:  MOVFF  03,39
1258:  MOVFF  02,38
125C:  MOVFF  01,37
1260:  MOVFF  00,36
....................                     pulso_timer=0; 
1264:  CLRF   1D
....................                      
.................... 					estado = PUNTO_TENS_CORR; 
1266:  CLRF   46
.................... 		 
.................... 				} 
.................... 				if((contador==60)) 
1268:  MOVF   1C,W
126A:  SUBLW  3C
126C:  BNZ   1274
.................... 				{ 
.................... 					disable_interrupts(INT_RTCC); 
126E:  BCF    FF2.5
.................... 					estado = CALCULO_POT_ENER; 
1270:  MOVLW  03
1272:  MOVWF  46
.................... 		 
.................... 				} 
....................  
.................... 				break; 
1274:  BRA    14F4
.................... 			 
.................... 			case CALCULO_POT_ENER: 
.................... 			 
.................... 				tension_RMS= SQRT(tension_RMS/60); 
1276:  MOVFF  35,5C
127A:  MOVFF  34,5B
127E:  MOVFF  33,5A
1282:  MOVFF  32,59
1286:  CLRF   x60
1288:  CLRF   5F
128A:  MOVLW  70
128C:  MOVWF  5E
128E:  MOVLW  84
1290:  MOVWF  5D
1292:  CALL   0494
1296:  MOVFF  03,4A
129A:  MOVFF  02,49
129E:  MOVFF  01,48
12A2:  MOVFF  00,47
12A6:  MOVFF  03,58
12AA:  MOVFF  02,57
12AE:  MOVFF  01,56
12B2:  MOVFF  00,55
12B6:  CALL   08CE
12BA:  MOVFF  03,35
12BE:  MOVFF  02,34
12C2:  MOVFF  01,33
12C6:  MOVFF  00,32
....................                 corriente_RMS= SQRT(corriente_RMS/60); 
12CA:  MOVFF  39,5C
12CE:  MOVFF  38,5B
12D2:  MOVFF  37,5A
12D6:  MOVFF  36,59
12DA:  CLRF   x60
12DC:  CLRF   5F
12DE:  MOVLW  70
12E0:  MOVWF  5E
12E2:  MOVLW  84
12E4:  MOVWF  5D
12E6:  CALL   0494
12EA:  MOVFF  03,4A
12EE:  MOVFF  02,49
12F2:  MOVFF  01,48
12F6:  MOVFF  00,47
12FA:  MOVFF  03,58
12FE:  MOVFF  02,57
1302:  MOVFF  01,56
1306:  MOVFF  00,55
130A:  CALL   08CE
130E:  MOVFF  03,39
1312:  MOVFF  02,38
1316:  MOVFF  01,37
131A:  MOVFF  00,36
....................                  
....................                 if (desfase==2){ 
131E:  MOVF   29,W
1320:  SUBLW  02
1322:  BNZ   13A4
....................                     t_desfase= (control_I-control_V); 
1324:  MOVF   27,W
1326:  SUBWF  28,W
1328:  CLRF   x7A
132A:  MOVWF  x79
132C:  CALL   036C
1330:  MOVFF  03,3D
1334:  MOVFF  02,3C
1338:  MOVFF  01,3B
133C:  MOVFF  00,3A
....................                     angulo= (t_desfase*pi)/20;      // angulo de desfase en radianes. 
1340:  MOVFF  3D,7C
1344:  MOVFF  3C,7B
1348:  MOVFF  3B,7A
134C:  MOVFF  3A,79
1350:  MOVLW  DB
1352:  MOVWF  x80
1354:  MOVLW  0F
1356:  MOVWF  x7F
1358:  MOVLW  49
135A:  MOVWF  x7E
135C:  MOVLW  80
135E:  MOVWF  x7D
1360:  CALL   03A2
1364:  MOVFF  03,4A
1368:  MOVFF  02,49
136C:  MOVFF  01,48
1370:  MOVFF  00,47
1374:  MOVFF  03,5C
1378:  MOVFF  02,5B
137C:  MOVFF  01,5A
1380:  MOVFF  00,59
1384:  CLRF   x60
1386:  CLRF   5F
1388:  MOVLW  20
138A:  MOVWF  5E
138C:  MOVLW  83
138E:  MOVWF  5D
1390:  CALL   0494
1394:  MOVFF  03,45
1398:  MOVFF  02,44
139C:  MOVFF  01,43
13A0:  MOVFF  00,42
....................                 }                 
....................                 
....................                 potencia_ins= tension_RMS*corriente_RMS* cos(angulo); 
13A4:  MOVFF  35,7C
13A8:  MOVFF  34,7B
13AC:  MOVFF  33,7A
13B0:  MOVFF  32,79
13B4:  MOVFF  39,80
13B8:  MOVFF  38,7F
13BC:  MOVFF  37,7E
13C0:  MOVFF  36,7D
13C4:  CALL   03A2
13C8:  MOVFF  03,4A
13CC:  MOVFF  02,49
13D0:  MOVFF  01,48
13D4:  MOVFF  00,47
13D8:  MOVFF  45,74
13DC:  MOVFF  44,73
13E0:  MOVFF  43,72
13E4:  MOVFF  42,71
13E8:  GOTO   0A12
13EC:  MOVFF  4A,7C
13F0:  MOVFF  49,7B
13F4:  MOVFF  48,7A
13F8:  MOVFF  47,79
13FC:  MOVFF  03,80
1400:  MOVFF  02,7F
1404:  MOVFF  01,7E
1408:  MOVFF  00,7D
140C:  CALL   03A2
1410:  MOVFF  03,41
1414:  MOVFF  02,40
1418:  MOVFF  01,3F
141C:  MOVFF  00,3E
....................                 //se limpian las variables para la próxima tanta de muestreo 
....................                 control_V=0;       
1420:  CLRF   27
....................                 control_I=0; 
1422:  CLRF   28
....................                 angulo=0; 
1424:  CLRF   45
1426:  CLRF   44
1428:  CLRF   43
142A:  CLRF   42
....................                  
.................... 					estado = MOSTRAR_DATOS; 
142C:  MOVLW  04
142E:  MOVWF  46
.................... 				break; 
1430:  BRA    14F4
.................... 			 
.................... 			case MOSTRAR_DATOS: 
....................                 lcd_gotoxy(1,1); 
1432:  MOVLW  01
1434:  MOVWF  56
1436:  MOVWF  57
1438:  CALL   027A
....................                 printf(LCD_PUTC,"Potencia= \%f W",potencia_ins); 
143C:  MOVLW  BC
143E:  MOVWF  FF6
1440:  MOVLW  00
1442:  MOVWF  FF7
1444:  MOVLW  0A
1446:  MOVWF  47
1448:  RCALL  0DB4
144A:  MOVLW  89
144C:  MOVWF  FE9
144E:  MOVFF  41,4A
1452:  MOVFF  40,49
1456:  MOVFF  3F,48
145A:  MOVFF  3E,47
145E:  MOVLW  02
1460:  MOVWF  4B
1462:  RCALL  0EA0
1464:  MOVLW  20
1466:  MOVWF  55
1468:  RCALL  0D38
146A:  MOVLW  57
146C:  MOVWF  55
146E:  RCALL  0D38
....................                 lcd_gotoxy(1,2); 
1470:  MOVLW  01
1472:  MOVWF  56
1474:  MOVLW  02
1476:  MOVWF  57
1478:  CALL   027A
....................                 printf (LCD_PUTC, "T=\%f V  I=\%f A",tension_RMS,corriente_RMS); 
147C:  MOVLW  54
147E:  MOVWF  55
1480:  RCALL  0D38
1482:  MOVLW  3D
1484:  MOVWF  55
1486:  RCALL  0D38
1488:  MOVLW  89
148A:  MOVWF  FE9
148C:  MOVFF  35,4A
1490:  MOVFF  34,49
1494:  MOVFF  33,48
1498:  MOVFF  32,47
149C:  MOVLW  02
149E:  MOVWF  4B
14A0:  RCALL  0EA0
14A2:  MOVLW  D0
14A4:  MOVWF  FF6
14A6:  MOVLW  00
14A8:  MOVWF  FF7
14AA:  MOVLW  06
14AC:  MOVWF  47
14AE:  RCALL  0DB4
14B0:  MOVLW  89
14B2:  MOVWF  FE9
14B4:  MOVFF  39,4A
14B8:  MOVFF  38,49
14BC:  MOVFF  37,48
14C0:  MOVFF  36,47
14C4:  MOVLW  02
14C6:  MOVWF  4B
14C8:  RCALL  0EA0
14CA:  MOVLW  20
14CC:  MOVWF  55
14CE:  RCALL  0D38
14D0:  MOVLW  41
14D2:  MOVWF  55
14D4:  RCALL  0D38
....................                 delay_ms(750); 
14D6:  MOVLW  03
14D8:  MOVWF  47
14DA:  MOVLW  FA
14DC:  MOVWF  56
14DE:  CALL   00DC
14E2:  DECFSZ 47,F
14E4:  BRA    14DA
....................                 enable_interrupts(INT_RTCC); 
14E6:  BSF    FF2.5
....................                 set_timer0(0x1D);   // se carga 29 para un desborde en 500 us teniendo en cuenta los tiempos en C 
14E8:  CLRF   FD7
14EA:  MOVLW  1D
14EC:  MOVWF  FD6
.................... 					 
.................... 					estado = PUNTO_TENS_CORR; 
14EE:  CLRF   46
.................... 		 
....................  
.................... 				break; 
14F0:  BRA    14F4
.................... 			 
.................... 			default: estado = PUNTO_TENS_CORR; 
14F2:  CLRF   46
.................... 		} 
14F4:  GOTO   1522 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Funciones asociadas a los eventos 
....................  
.................... /** 
.................... *	\fn int -(void) 
.................... *	\brief Resumen 
.................... *	\details Detalles 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
....................  
....................  

Configuration Fuses:
   Word  1: CC02   PLL3 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0021   STVREN NOLVP ICSP2 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
