CCS PCH C Compiler, Version 5.048, 5967               30-oct-16 21:58

               Filename:   C:\Users\MARCOS\Proyecto_final\Med_pot.X\dist\default\debug\Med_pot.X.debug.lst

               ROM used:   5748 bytes (18%)
                           Largest free fragment is 27016
               RAM used:   79 (4%) at main() level
                           145 (7%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   163A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #import(file="build/default/debug/main.o") 
.................... #import(file="build/default/debug/funciones.o") 
.................... /** 
.................... *	\file main.c 
.................... *	\brief Resumen del contenido del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
027A:  MOVLW  8E
027C:  MOVWF  00
027E:  MOVFF  82,01
0282:  MOVFF  81,02
0286:  CLRF   03
0288:  MOVF   01,F
028A:  BNZ   029E
028C:  MOVFF  02,01
0290:  CLRF   02
0292:  MOVLW  08
0294:  SUBWF  00,F
0296:  MOVF   01,F
0298:  BNZ   029E
029A:  CLRF   00
029C:  BRA    02AE
029E:  BCF    FD8.0
02A0:  BTFSC  01.7
02A2:  BRA    02AC
02A4:  RLCF   02,F
02A6:  RLCF   01,F
02A8:  DECF   00,F
02AA:  BRA    029E
02AC:  BCF    01.7
02AE:  RETURN 0
02B0:  MOVF   x61,W
02B2:  BTFSC  FD8.2
02B4:  BRA    0400
02B6:  MOVWF  x6D
02B8:  MOVF   x65,W
02BA:  BTFSC  FD8.2
02BC:  BRA    0400
02BE:  SUBWF  x6D,F
02C0:  BNC   02CC
02C2:  MOVLW  7F
02C4:  ADDWF  x6D,F
02C6:  BTFSC  FD8.0
02C8:  BRA    0400
02CA:  BRA    02D8
02CC:  MOVLW  81
02CE:  SUBWF  x6D,F
02D0:  BTFSS  FD8.0
02D2:  BRA    0400
02D4:  BTFSC  FD8.2
02D6:  BRA    0400
02D8:  MOVFF  6D,00
02DC:  CLRF   01
02DE:  CLRF   02
02E0:  CLRF   03
02E2:  CLRF   x6C
02E4:  MOVFF  62,6B
02E8:  BSF    x6B.7
02EA:  MOVFF  63,6A
02EE:  MOVFF  64,69
02F2:  MOVLW  19
02F4:  MOVWF  x6D
02F6:  MOVF   x68,W
02F8:  SUBWF  x69,F
02FA:  BC    0316
02FC:  MOVLW  01
02FE:  SUBWF  x6A,F
0300:  BC    0316
0302:  SUBWF  x6B,F
0304:  BC    0316
0306:  SUBWF  x6C,F
0308:  BC    0316
030A:  INCF   x6C,F
030C:  INCF   x6B,F
030E:  INCF   x6A,F
0310:  MOVF   x68,W
0312:  ADDWF  x69,F
0314:  BRA    0366
0316:  MOVF   x67,W
0318:  SUBWF  x6A,F
031A:  BC    0340
031C:  MOVLW  01
031E:  SUBWF  x6B,F
0320:  BC    0340
0322:  SUBWF  x6C,F
0324:  BC    0340
0326:  INCF   x6C,F
0328:  INCF   x6B,F
032A:  MOVF   x67,W
032C:  ADDWF  x6A,F
032E:  MOVF   x68,W
0330:  ADDWF  x69,F
0332:  BNC   0366
0334:  INCF   x6A,F
0336:  BNZ   0366
0338:  INCF   x6B,F
033A:  BNZ   0366
033C:  INCF   x6C,F
033E:  BRA    0366
0340:  MOVF   x66,W
0342:  IORLW  80
0344:  SUBWF  x6B,F
0346:  BC    0364
0348:  MOVLW  01
034A:  SUBWF  x6C,F
034C:  BC    0364
034E:  INCF   x6C,F
0350:  MOVF   x66,W
0352:  IORLW  80
0354:  ADDWF  x6B,F
0356:  MOVF   x67,W
0358:  ADDWF  x6A,F
035A:  BNC   032E
035C:  INCF   x6B,F
035E:  BNZ   032E
0360:  INCF   x6C,F
0362:  BRA    032E
0364:  BSF    03.0
0366:  DECFSZ x6D,F
0368:  BRA    036C
036A:  BRA    0382
036C:  BCF    FD8.0
036E:  RLCF   x69,F
0370:  RLCF   x6A,F
0372:  RLCF   x6B,F
0374:  RLCF   x6C,F
0376:  BCF    FD8.0
0378:  RLCF   03,F
037A:  RLCF   02,F
037C:  RLCF   01,F
037E:  RLCF   x6E,F
0380:  BRA    02F6
0382:  BTFSS  x6E.0
0384:  BRA    0392
0386:  BCF    FD8.0
0388:  RRCF   01,F
038A:  RRCF   02,F
038C:  RRCF   03,F
038E:  RRCF   x6E,F
0390:  BRA    0396
0392:  DECF   00,F
0394:  BZ    0400
0396:  BTFSC  x6E.7
0398:  BRA    03D6
039A:  BCF    FD8.0
039C:  RLCF   x69,F
039E:  RLCF   x6A,F
03A0:  RLCF   x6B,F
03A2:  RLCF   x6C,F
03A4:  MOVF   x68,W
03A6:  SUBWF  x69,F
03A8:  BC    03B8
03AA:  MOVLW  01
03AC:  SUBWF  x6A,F
03AE:  BC    03B8
03B0:  SUBWF  x6B,F
03B2:  BC    03B8
03B4:  SUBWF  x6C,F
03B6:  BNC   03EC
03B8:  MOVF   x67,W
03BA:  SUBWF  x6A,F
03BC:  BC    03C8
03BE:  MOVLW  01
03C0:  SUBWF  x6B,F
03C2:  BC    03C8
03C4:  SUBWF  x6C,F
03C6:  BNC   03EC
03C8:  MOVF   x66,W
03CA:  IORLW  80
03CC:  SUBWF  x6B,F
03CE:  BC    03D6
03D0:  MOVLW  01
03D2:  SUBWF  x6C,F
03D4:  BNC   03EC
03D6:  INCF   03,F
03D8:  BNZ   03EC
03DA:  INCF   02,F
03DC:  BNZ   03EC
03DE:  INCF   01,F
03E0:  BNZ   03EC
03E2:  INCF   00,F
03E4:  BZ    0400
03E6:  RRCF   01,F
03E8:  RRCF   02,F
03EA:  RRCF   03,F
03EC:  MOVFF  62,6D
03F0:  MOVF   x66,W
03F2:  XORWF  x6D,F
03F4:  BTFSS  x6D.7
03F6:  BRA    03FC
03F8:  BSF    01.7
03FA:  BRA    0408
03FC:  BCF    01.7
03FE:  BRA    0408
0400:  CLRF   00
0402:  CLRF   01
0404:  CLRF   02
0406:  CLRF   03
0408:  RETURN 0
040A:  MOVLW  80
040C:  BTFSC  FD8.1
040E:  XORWF  x86,F
0410:  CLRF   x8B
0412:  CLRF   x8C
0414:  MOVFF  82,8A
0418:  MOVF   x86,W
041A:  XORWF  x8A,F
041C:  MOVF   x81,W
041E:  BTFSC  FD8.2
0420:  BRA    05DA
0422:  MOVWF  x89
0424:  MOVWF  00
0426:  MOVF   x85,W
0428:  BTFSC  FD8.2
042A:  BRA    05EC
042C:  SUBWF  x89,F
042E:  BTFSC  FD8.2
0430:  BRA    0534
0432:  BNC   04AE
0434:  MOVFF  86,8F
0438:  BSF    x8F.7
043A:  MOVFF  87,8E
043E:  MOVFF  88,8D
0442:  CLRF   x8C
0444:  BCF    FD8.0
0446:  RRCF   x8F,F
0448:  RRCF   x8E,F
044A:  RRCF   x8D,F
044C:  RRCF   x8C,F
044E:  DECFSZ x89,F
0450:  BRA    0442
0452:  BTFSS  x8A.7
0454:  BRA    045C
0456:  BSF    x8B.0
0458:  BRA    0614
045A:  BCF    x8B.0
045C:  BCF    x89.0
045E:  BSF    x8B.4
0460:  CLRF   FEA
0462:  MOVLW  84
0464:  MOVWF  FE9
0466:  BRA    063A
0468:  BCF    x8B.4
046A:  BTFSC  x8A.7
046C:  BRA    0482
046E:  BTFSS  x89.0
0470:  BRA    0498
0472:  RRCF   x8F,F
0474:  RRCF   x8E,F
0476:  RRCF   x8D,F
0478:  RRCF   x8C,F
047A:  INCF   00,F
047C:  BTFSC  FD8.2
047E:  BRA    060A
0480:  BRA    0498
0482:  BTFSC  x8F.7
0484:  BRA    049E
0486:  BCF    FD8.0
0488:  RLCF   x8C,F
048A:  RLCF   x8D,F
048C:  RLCF   x8E,F
048E:  RLCF   x8F,F
0490:  DECF   00,F
0492:  BTFSC  FD8.2
0494:  BRA    060A
0496:  BRA    0482
0498:  BSF    x8B.6
049A:  BRA    0572
049C:  BCF    x8B.6
049E:  MOVFF  82,8A
04A2:  BTFSS  x82.7
04A4:  BRA    04AA
04A6:  BSF    x8F.7
04A8:  BRA    05FC
04AA:  BCF    x8F.7
04AC:  BRA    05FC
04AE:  MOVFF  85,89
04B2:  MOVFF  85,00
04B6:  MOVF   x81,W
04B8:  SUBWF  x89,F
04BA:  MOVFF  82,8F
04BE:  BSF    x8F.7
04C0:  MOVFF  83,8E
04C4:  MOVFF  84,8D
04C8:  CLRF   x8C
04CA:  BCF    FD8.0
04CC:  RRCF   x8F,F
04CE:  RRCF   x8E,F
04D0:  RRCF   x8D,F
04D2:  RRCF   x8C,F
04D4:  DECFSZ x89,F
04D6:  BRA    04C8
04D8:  BTFSS  x8A.7
04DA:  BRA    04E2
04DC:  BSF    x8B.1
04DE:  BRA    0614
04E0:  BCF    x8B.1
04E2:  BCF    x89.0
04E4:  BSF    x8B.5
04E6:  CLRF   FEA
04E8:  MOVLW  88
04EA:  MOVWF  FE9
04EC:  BRA    063A
04EE:  BCF    x8B.5
04F0:  BTFSC  x8A.7
04F2:  BRA    0508
04F4:  BTFSS  x89.0
04F6:  BRA    051E
04F8:  RRCF   x8F,F
04FA:  RRCF   x8E,F
04FC:  RRCF   x8D,F
04FE:  RRCF   x8C,F
0500:  INCF   00,F
0502:  BTFSC  FD8.2
0504:  BRA    060A
0506:  BRA    051E
0508:  BTFSC  x8F.7
050A:  BRA    0524
050C:  BCF    FD8.0
050E:  RLCF   x8C,F
0510:  RLCF   x8D,F
0512:  RLCF   x8E,F
0514:  RLCF   x8F,F
0516:  DECF   00,F
0518:  BTFSC  FD8.2
051A:  BRA    060A
051C:  BRA    0508
051E:  BSF    x8B.7
0520:  BRA    0572
0522:  BCF    x8B.7
0524:  MOVFF  86,8A
0528:  BTFSS  x86.7
052A:  BRA    0530
052C:  BSF    x8F.7
052E:  BRA    05FC
0530:  BCF    x8F.7
0532:  BRA    05FC
0534:  MOVFF  86,8F
0538:  BSF    x8F.7
053A:  MOVFF  87,8E
053E:  MOVFF  88,8D
0542:  BTFSS  x8A.7
0544:  BRA    054E
0546:  BCF    x8F.7
0548:  BSF    x8B.2
054A:  BRA    0614
054C:  BCF    x8B.2
054E:  CLRF   x8C
0550:  BCF    x89.0
0552:  CLRF   FEA
0554:  MOVLW  84
0556:  MOVWF  FE9
0558:  BRA    063A
055A:  BTFSC  x8A.7
055C:  BRA    0596
055E:  MOVFF  82,8A
0562:  BTFSS  x89.0
0564:  BRA    0572
0566:  RRCF   x8F,F
0568:  RRCF   x8E,F
056A:  RRCF   x8D,F
056C:  RRCF   x8C,F
056E:  INCF   00,F
0570:  BZ    060A
0572:  BTFSS  x8C.7
0574:  BRA    058C
0576:  INCF   x8D,F
0578:  BNZ   058C
057A:  INCF   x8E,F
057C:  BNZ   058C
057E:  INCF   x8F,F
0580:  BNZ   058C
0582:  RRCF   x8F,F
0584:  RRCF   x8E,F
0586:  RRCF   x8D,F
0588:  INCF   00,F
058A:  BZ    060A
058C:  BTFSC  x8B.6
058E:  BRA    049C
0590:  BTFSC  x8B.7
0592:  BRA    0522
0594:  BRA    05CE
0596:  MOVLW  80
0598:  XORWF  x8F,F
059A:  BTFSS  x8F.7
059C:  BRA    05A6
059E:  BRA    0614
05A0:  MOVFF  86,8A
05A4:  BRA    05BA
05A6:  MOVFF  82,8A
05AA:  MOVF   x8F,F
05AC:  BNZ   05BA
05AE:  MOVF   x8E,F
05B0:  BNZ   05BA
05B2:  MOVF   x8D,F
05B4:  BNZ   05BA
05B6:  CLRF   00
05B8:  BRA    05FC
05BA:  BTFSC  x8F.7
05BC:  BRA    05CE
05BE:  BCF    FD8.0
05C0:  RLCF   x8C,F
05C2:  RLCF   x8D,F
05C4:  RLCF   x8E,F
05C6:  RLCF   x8F,F
05C8:  DECFSZ 00,F
05CA:  BRA    05BA
05CC:  BRA    060A
05CE:  BTFSS  x8A.7
05D0:  BRA    05D6
05D2:  BSF    x8F.7
05D4:  BRA    05FC
05D6:  BCF    x8F.7
05D8:  BRA    05FC
05DA:  MOVFF  85,00
05DE:  MOVFF  86,8F
05E2:  MOVFF  87,8E
05E6:  MOVFF  88,8D
05EA:  BRA    05FC
05EC:  MOVFF  81,00
05F0:  MOVFF  82,8F
05F4:  MOVFF  83,8E
05F8:  MOVFF  84,8D
05FC:  MOVFF  8F,01
0600:  MOVFF  8E,02
0604:  MOVFF  8D,03
0608:  BRA    0672
060A:  CLRF   00
060C:  CLRF   01
060E:  CLRF   02
0610:  CLRF   03
0612:  BRA    0672
0614:  CLRF   x8C
0616:  COMF   x8D,F
0618:  COMF   x8E,F
061A:  COMF   x8F,F
061C:  COMF   x8C,F
061E:  INCF   x8C,F
0620:  BNZ   062C
0622:  INCF   x8D,F
0624:  BNZ   062C
0626:  INCF   x8E,F
0628:  BNZ   062C
062A:  INCF   x8F,F
062C:  BTFSC  x8B.0
062E:  BRA    045A
0630:  BTFSC  x8B.1
0632:  BRA    04E0
0634:  BTFSC  x8B.2
0636:  BRA    054C
0638:  BRA    05A0
063A:  MOVF   FEF,W
063C:  ADDWF  x8D,F
063E:  BNC   064A
0640:  INCF   x8E,F
0642:  BNZ   064A
0644:  INCF   x8F,F
0646:  BTFSC  FD8.2
0648:  BSF    x89.0
064A:  MOVF   FED,F
064C:  MOVF   FEF,W
064E:  ADDWF  x8E,F
0650:  BNC   0658
0652:  INCF   x8F,F
0654:  BTFSC  FD8.2
0656:  BSF    x89.0
0658:  MOVF   FED,F
065A:  MOVF   FEF,W
065C:  BTFSC  FEF.7
065E:  BRA    0662
0660:  XORLW  80
0662:  ADDWF  x8F,F
0664:  BTFSC  FD8.0
0666:  BSF    x89.0
0668:  BTFSC  x8B.4
066A:  BRA    0468
066C:  BTFSC  x8B.5
066E:  BRA    04EE
0670:  BRA    055A
0672:  RETURN 0
0674:  MOVF   x81,W
0676:  BTFSC  FD8.2
0678:  BRA    075C
067A:  MOVWF  00
067C:  MOVF   x85,W
067E:  BTFSC  FD8.2
0680:  BRA    075C
0682:  ADDWF  00,F
0684:  BNC   068E
0686:  MOVLW  81
0688:  ADDWF  00,F
068A:  BC    075C
068C:  BRA    0696
068E:  MOVLW  7F
0690:  SUBWF  00,F
0692:  BNC   075C
0694:  BZ    075C
0696:  MOVFF  82,89
069A:  MOVF   x86,W
069C:  XORWF  x89,F
069E:  BSF    x82.7
06A0:  BSF    x86.7
06A2:  MOVF   x84,W
06A4:  MULWF  x88
06A6:  MOVFF  FF4,8B
06AA:  MOVF   x83,W
06AC:  MULWF  x87
06AE:  MOVFF  FF4,03
06B2:  MOVFF  FF3,8A
06B6:  MULWF  x88
06B8:  MOVF   FF3,W
06BA:  ADDWF  x8B,F
06BC:  MOVF   FF4,W
06BE:  ADDWFC x8A,F
06C0:  MOVLW  00
06C2:  ADDWFC 03,F
06C4:  MOVF   x84,W
06C6:  MULWF  x87
06C8:  MOVF   FF3,W
06CA:  ADDWF  x8B,F
06CC:  MOVF   FF4,W
06CE:  ADDWFC x8A,F
06D0:  MOVLW  00
06D2:  CLRF   02
06D4:  ADDWFC 03,F
06D6:  ADDWFC 02,F
06D8:  MOVF   x82,W
06DA:  MULWF  x88
06DC:  MOVF   FF3,W
06DE:  ADDWF  x8A,F
06E0:  MOVF   FF4,W
06E2:  ADDWFC 03,F
06E4:  MOVLW  00
06E6:  ADDWFC 02,F
06E8:  MOVF   x82,W
06EA:  MULWF  x87
06EC:  MOVF   FF3,W
06EE:  ADDWF  03,F
06F0:  MOVF   FF4,W
06F2:  ADDWFC 02,F
06F4:  MOVLW  00
06F6:  CLRF   01
06F8:  ADDWFC 01,F
06FA:  MOVF   x84,W
06FC:  MULWF  x86
06FE:  MOVF   FF3,W
0700:  ADDWF  x8A,F
0702:  MOVF   FF4,W
0704:  ADDWFC 03,F
0706:  MOVLW  00
0708:  ADDWFC 02,F
070A:  ADDWFC 01,F
070C:  MOVF   x83,W
070E:  MULWF  x86
0710:  MOVF   FF3,W
0712:  ADDWF  03,F
0714:  MOVF   FF4,W
0716:  ADDWFC 02,F
0718:  MOVLW  00
071A:  ADDWFC 01,F
071C:  MOVF   x82,W
071E:  MULWF  x86
0720:  MOVF   FF3,W
0722:  ADDWF  02,F
0724:  MOVF   FF4,W
0726:  ADDWFC 01,F
0728:  INCF   00,F
072A:  BTFSC  01.7
072C:  BRA    0738
072E:  RLCF   x8A,F
0730:  RLCF   03,F
0732:  RLCF   02,F
0734:  RLCF   01,F
0736:  DECF   00,F
0738:  MOVLW  00
073A:  BTFSS  x8A.7
073C:  BRA    0752
073E:  INCF   03,F
0740:  ADDWFC 02,F
0742:  ADDWFC 01,F
0744:  MOVF   01,W
0746:  BNZ   0752
0748:  MOVF   02,W
074A:  BNZ   0752
074C:  MOVF   03,W
074E:  BNZ   0752
0750:  INCF   00,F
0752:  BTFSC  x89.7
0754:  BSF    01.7
0756:  BTFSS  x89.7
0758:  BCF    01.7
075A:  BRA    0764
075C:  CLRF   00
075E:  CLRF   01
0760:  CLRF   02
0762:  CLRF   03
0764:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #fuses NOWDT,MCLR,HS,NOUSBDIV,NOIESO,            //Selecciona el oscilador externo 
.................... #use delay(clock=48 Mhz, crystal= 48 MHz)   // Selecciona la velocidad del oscilador interno 
*
0A44:  CLRF   FEA
0A46:  MOVLW  5E
0A48:  MOVWF  FE9
0A4A:  MOVF   FEF,W
0A4C:  BZ    0A6A
0A4E:  MOVLW  0F
0A50:  MOVWF  01
0A52:  CLRF   00
0A54:  DECFSZ 00,F
0A56:  BRA    0A54
0A58:  DECFSZ 01,F
0A5A:  BRA    0A52
0A5C:  MOVLW  8F
0A5E:  MOVWF  00
0A60:  DECFSZ 00,F
0A62:  BRA    0A60
0A64:  NOP   
0A66:  DECFSZ FEF,F
0A68:  BRA    0A4E
0A6A:  RETURN 0
.................... #use i2c(Master,Fast=100000, sda=PIN_D6, scl=PIN_D7,force_sw) 
*
08E6:  MOVLW  08
08E8:  MOVWF  01
08EA:  MOVLW  11
08EC:  MOVWF  00
08EE:  DECFSZ 00,F
08F0:  BRA    08EE
08F2:  BCF    F8C.7
08F4:  BCF    F95.7
08F6:  MOVLW  11
08F8:  MOVWF  00
08FA:  DECFSZ 00,F
08FC:  BRA    08FA
08FE:  RLCF   x62,F
0900:  BCF    F8C.6
0902:  BTFSC  FD8.0
0904:  BSF    F95.6
0906:  BTFSS  FD8.0
0908:  BCF    F95.6
090A:  BSF    F95.7
090C:  BTFSS  F83.7
090E:  BRA    090C
0910:  DECFSZ 01,F
0912:  BRA    08EA
0914:  MOVLW  11
0916:  MOVWF  00
0918:  DECFSZ 00,F
091A:  BRA    0918
091C:  BCF    F8C.7
091E:  BCF    F95.7
0920:  NOP   
0922:  BSF    F95.6
0924:  MOVLW  11
0926:  MOVWF  00
0928:  DECFSZ 00,F
092A:  BRA    0928
092C:  MOVLW  11
092E:  MOVWF  00
0930:  DECFSZ 00,F
0932:  BRA    0930
0934:  BSF    F95.7
0936:  BTFSS  F83.7
0938:  BRA    0936
093A:  CLRF   01
093C:  MOVLW  11
093E:  MOVWF  00
0940:  DECFSZ 00,F
0942:  BRA    0940
0944:  BTFSC  F83.6
0946:  BSF    01.0
0948:  BCF    F8C.7
094A:  BCF    F95.7
094C:  BCF    F8C.6
094E:  BCF    F95.6
0950:  RETURN 0
....................  
.................... #include <stdio.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDIO 
.................... #define _STDIO 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
*
1658:  CLRF   24
165A:  MOVF   FC1,W
165C:  ANDLW  C0
165E:  IORLW  0F
1660:  MOVWF  FC1
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
*
1646:  CLRF   19
1648:  CLRF   1A
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
.................... #ifndef getc 
.................... #define getc getch 
.................... #define getchar getch 
.................... #define puts(s) {printf(s); putchar(13); putchar(10);} 
.................... #define putc putchar 
.................... #endif 
.................... /* maps error number to an error message. Writes a sequence of characters to 
.................... stderr stream thus: if s is not null then string pointed to by s follwed by 
.................... a colon (:) and a space and the appropriate error message returned by strerror 
.................... function with argument errno 
....................  
.................... Returns: no value 
.................... */ 
....................  
.................... #ifdef _ERRNO 
.................... void perror(char *s) 
.................... { 
....................   if(s) 
....................   fprintf(STDERR,"%s: ",s); 
....................   fprintf(STDERR,"%s\r\n",strerror(errno)); 
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... #include <ctype.h> 
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... size_t mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #include "funciones.h" 
.................... /** 
.................... *	\file funciones.h 
.................... *	\brief Resumen del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <i2c_Flex_LCD.h> 
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.0 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD dispay 
.................... //     \1 Set write position on LCD Line 1 
.................... //     \2 Set write position on LCD Line 2 
.................... //     \3 Set write position on LCD Line 3 
.................... //     \4 Set write position on LCD Line 4 
.................... // 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with 
.................... //              an EXPANDER of I/O with connection I2C. The tests of these 
.................... //              routines have been programmed using the IC PCF8574T of Phillips. 
.................... //              I used 4 bits mode programming. The 8 bits mode programming 
.................... //              is possible if you use 2 x PCF8574T. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... //For PCF8574T the addressing is: 
....................  
.................... //Jp3 Jp2 Jp1 
.................... //A2 A1 A0  Hex 
.................... //L L L  0x40 
.................... //L L H  0x42 
.................... //L H L  0x44 
.................... //L H H  0x46 
.................... //H L L  0x48 
.................... //H L H  0x4A 
.................... //H H L  0x4C 
.................... //H H H  0x4E 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module 
....................  
.................... #define ON             1 
.................... #define OFF            0 
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1 
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2 
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3 
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4 
....................   
.................... byte address; 
.................... int1 lcd_backlight=ON; 
....................  
.................... void i2c_lcd_backlight_On(){ 
....................       lcd_backlight=ON; 
.................... } 
....................  
.................... void i2c_lcd_backlight_Off(){ 
....................       lcd_backlight=OFF; 
.................... } 
....................  
.................... void i2c_send_nibble(unsigned char data) 
....................    {    
....................         i2c_start(); 
....................         delay_us(20); 
....................         i2c_write(LCD_ADDR); //the slave addresse 
....................         delay_us(20); 
....................         i2c_write(data); 
....................         delay_us(20); 
....................         i2c_stop(); 
....................         delay_us(20); 
....................    } 
....................  
.................... void lcd_send_byte(unsigned char data) 
....................    { 
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN 
....................         i2c_send_nibble(data); 
....................         data=data-4;       //toggle EN back to 0 
....................         i2c_send_nibble(data); 
....................    } 
....................     
.................... void lcd_clear() 
.................... { 
....................     lcd_send_byte(0x00); 
....................     lcd_send_byte(0x10); 
....................     delay_ms(2); 
.................... } 
....................  
.................... void lcd_init() 
.................... { 
....................     delay_ms(200); //LCD power up delay 
....................         
....................    //Request works on the command by set the RS = 0 R/W = 0 write 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................            //First state in 8 bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x30); 
....................            //Then set to 4-bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x20); 
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h) 
....................         lcd_send_byte(0x20); 
....................         lcd_send_byte(0x80); 
....................            //no need cursor on (0Ch) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0xC0); 
....................            //the cursor moves to the left (06 h) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x60); 
....................            //clears the display 
....................         lcd_clear(); 
.................... } 
....................  
.................... void lcd_gotoxy( byte x, byte y) 
164A:  CLRF   21
.................... {      
.................... static char data; 
....................       
....................    switch(y) 
....................    { 
....................       case 1:  address= lcd_line_one;     break; 
....................       case 2:  address= lcd_line_two;     break; 
....................       case 3:  address= lcd_line_three;   break; 
....................       case 4:  address= lcd_line_four;    break; 
....................       default: address= lcd_line_one;     break;  
....................    } 
....................   
....................    address+=x-1; 
....................    data=address&0xF0; 
....................    lcd_send_byte(data); 
....................    data=address&0x0F; 
....................    data=data<<4; 
....................    lcd_send_byte(data); 
.................... } 
....................  
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... { 
....................  char data;      
....................   switch(in_data) 
....................    {  
....................      case '\f': lcd_clear()    ;  break;                
....................      case '\1': lcd_gotoxy(1,1);  break; 
....................      case '\2': lcd_gotoxy(1,2);  break; 
....................      case '\3': lcd_gotoxy(1,3);  break; 
....................      case '\4': lcd_gotoxy(1,4);  break; 
....................  
....................      default: 
....................         data=in_data&0xF0; 
....................         data=data|RS; //set RS pin to 1 
....................         lcd_send_byte(data); 
....................         data=in_data&0x0F; 
....................         data=data<<4; 
....................         data=data|RS; //set RS pin to 1 
....................         lcd_send_byte(data); 
....................      break; 
....................    } 
.................... }  
....................  
....................  
....................  
.................... #ifndef FUNCIONES_H 
.................... #define FUNCIONES_H 
.................... //Declaracion de estados 
....................  
.................... #define 	PUNTO_TENS_CORR	0 
.................... #define 	CONVERSION_DESFASE	1 
.................... #define 	TENS_CORR_RMS	2 
.................... #define 	CALCULO_POT_ENER	3 
.................... #define 	MOSTRAR_DATOS	4 
....................  
.................... //Prototipos de los eventos 
.................... void maquina_estado(void); 
....................  
.................... #endif 
....................  
.................... #use fast_io(A) 
.................... #use fast_io(B) 
....................  
.................... const long carga= 0xE8AB; 
.................... extern int contador; 
.................... extern long pulso_timer; 
....................  
.................... void inicializar(); 
....................  
.................... void main() 
*
163A:  CLRF   FF8
163C:  BCF    FD0.7
163E:  BSF    07.7
1640:  BSF    20.0
1642:  BSF    20.0
1644:  BSF    20.0
*
164C:  CLRF   22
164E:  CLRF   23
1650:  BSF    20.0
1652:  CLRF   4C
1654:  CLRF   4E
1656:  CLRF   4D
*
1662:  MOVLW  07
1664:  MOVWF  FB4
.................... { 
....................  
.................... //declaracion de variables 
.................... //inicializacion de perifericos 
....................  
.................... 	inicializar() ; 
1666:  GOTO   00F0
....................      
....................     set_timer0(carga); 
166A:  MOVLW  E8
166C:  MOVWF  FD7
166E:  MOVLW  AB
1670:  MOVWF  FD6
.................... 	while(1) 
.................... 	{ 
....................  
.................... 		maquina_estado(); 
1672:  BRA    10F6
1674:  BRA    1672
....................  
.................... 	} 
.................... } 
....................  
1676:  SLEEP 
.................... void Inicializar(){ 
....................     setup_timer_0( RTCC_INTERNAL | T0_DIV_2); 
*
00F0:  MOVLW  80
00F2:  MOVWF  FD5
....................     set_tris_a(0xF9); 
00F4:  MOVLW  F9
00F6:  MOVWF  F92
....................     contador=0; 
00F8:  CLRF   22
....................   /*  lcd_init(); 
....................     lcd_gotoxy(1,1); 
....................     printf(LCD_PUTC,"Primer prueba"); 
....................     lcd_backlight=ON;*/ 
....................     enable_interrupts (INT_RTCC); 
00FA:  BSF    FF2.5
....................     enable_interrupts (GLOBAL); 
00FC:  MOVLW  C0
00FE:  IORWF  FF2,F
....................     output_high (PIN_A0); //pone en alto el chipselect del AD7450 
0100:  BSF    F89.0
....................     output_high (PIN_A1); // pone en alto el chipselect del MAX186 
0102:  BSF    F89.1
0104:  GOTO   166A (RETURN)
.................... } 
....................  
....................  
.................... /** 
.................... *	\file funciones.c 
.................... *	\brief  
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
00BE:  DATA 53,65
00C0:  DATA 20,6D
00C2:  DATA 69,64
00C4:  DATA 69,6F
00C6:  DATA 20,64
00C8:  DATA 65,73
00CA:  DATA 66,61
00CC:  DATA 73,65
00CE:  DATA 00,00
00D0:  DATA 50,6F
00D2:  DATA 74,65
00D4:  DATA 6E,63
00D6:  DATA 69,61
00D8:  DATA 3D,20
00DA:  DATA 25,66
00DC:  DATA 20,57
00DE:  DATA 00,00
00E0:  DATA 54,3D
00E2:  DATA 25,66
00E4:  DATA 20,56
00E6:  DATA 20,20
00E8:  DATA 49,3D
00EA:  DATA 25,66
00EC:  DATA 20,41
00EE:  DATA 00,00
*
0766:  MOVFF  7E,85
076A:  MOVF   x82,W
076C:  XORWF  x85,F
076E:  BTFSS  x85.7
0770:  BRA    077C
0772:  BCF    FD8.2
0774:  BCF    FD8.0
0776:  BTFSC  x7E.7
0778:  BSF    FD8.0
077A:  BRA    07DA
077C:  MOVFF  7E,85
0780:  MOVFF  81,86
0784:  MOVF   x7D,W
0786:  SUBWF  x86,F
0788:  BZ    0796
078A:  BTFSS  x85.7
078C:  BRA    07DA
078E:  MOVF   FD8,W
0790:  XORLW  01
0792:  MOVWF  FD8
0794:  BRA    07DA
0796:  MOVFF  82,86
079A:  MOVF   x7E,W
079C:  SUBWF  x86,F
079E:  BZ    07AC
07A0:  BTFSS  x85.7
07A2:  BRA    07DA
07A4:  MOVF   FD8,W
07A6:  XORLW  01
07A8:  MOVWF  FD8
07AA:  BRA    07DA
07AC:  MOVFF  83,86
07B0:  MOVF   x7F,W
07B2:  SUBWF  x86,F
07B4:  BZ    07C2
07B6:  BTFSS  x85.7
07B8:  BRA    07DA
07BA:  MOVF   FD8,W
07BC:  XORLW  01
07BE:  MOVWF  FD8
07C0:  BRA    07DA
07C2:  MOVFF  84,86
07C6:  MOVF   x80,W
07C8:  SUBWF  x86,F
07CA:  BZ    07D8
07CC:  BTFSS  x85.7
07CE:  BRA    07DA
07D0:  MOVF   FD8,W
07D2:  XORLW  01
07D4:  MOVWF  FD8
07D6:  BRA    07DA
07D8:  BCF    FD8.0
07DA:  RETURN 0
*
0AEE:  TBLRD*+
0AF0:  MOVF   FF5,F
0AF2:  BZ    0B0C
0AF4:  MOVFF  FF6,4F
0AF8:  MOVFF  FF7,50
0AFC:  MOVFF  FF5,5D
0B00:  RCALL  0A80
0B02:  MOVFF  4F,FF6
0B06:  MOVFF  50,FF7
0B0A:  BRA    0AEE
0B0C:  GOTO   14C6 (RETURN)
0B10:  MOVLW  8E
0B12:  MOVWF  00
0B14:  MOVF   x7D,W
0B16:  SUBWF  00,F
0B18:  MOVFF  7E,02
0B1C:  MOVFF  7F,01
0B20:  BSF    02.7
0B22:  MOVF   00,F
0B24:  BZ    0B38
0B26:  BCF    FD8.0
0B28:  MOVF   02,F
0B2A:  BNZ   0B30
0B2C:  MOVF   01,F
0B2E:  BZ    0B38
0B30:  RRCF   02,F
0B32:  RRCF   01,F
0B34:  DECFSZ 00,F
0B36:  BRA    0B26
0B38:  BTFSS  x7E.7
0B3A:  BRA    0B46
0B3C:  COMF   01,F
0B3E:  COMF   02,F
0B40:  INCF   01,F
0B42:  BTFSC  FD8.2
0B44:  INCF   02,F
0B46:  GOTO   0BF6 (RETURN)
*
0E90:  TBLRD*+
0E92:  MOVFF  FF6,50
0E96:  MOVFF  FF7,51
0E9A:  MOVFF  FF5,5D
0E9E:  RCALL  0A80
0EA0:  MOVFF  50,FF6
0EA4:  MOVFF  51,FF7
0EA8:  DECFSZ 4F,F
0EAA:  BRA    0E90
0EAC:  RETURN 0
0EAE:  MOVF   5C,W
0EB0:  SUBLW  B6
0EB2:  MOVWF  5C
0EB4:  CLRF   03
0EB6:  MOVFF  5D,60
0EBA:  BSF    5D.7
0EBC:  BCF    FD8.0
0EBE:  RRCF   5D,F
0EC0:  RRCF   5E,F
0EC2:  RRCF   5F,F
0EC4:  RRCF   03,F
0EC6:  RRCF   02,F
0EC8:  RRCF   01,F
0ECA:  RRCF   00,F
0ECC:  DECFSZ 5C,F
0ECE:  BRA    0EBC
0ED0:  BTFSS  x60.7
0ED2:  BRA    0EEA
0ED4:  COMF   00,F
0ED6:  COMF   01,F
0ED8:  COMF   02,F
0EDA:  COMF   03,F
0EDC:  INCF   00,F
0EDE:  BTFSC  FD8.2
0EE0:  INCF   01,F
0EE2:  BTFSC  FD8.2
0EE4:  INCF   02,F
0EE6:  BTFSC  FD8.2
0EE8:  INCF   03,F
0EEA:  GOTO   0FCC (RETURN)
0EEE:  BTFSC  FD8.1
0EF0:  BRA    0EF8
0EF2:  CLRF   FEA
0EF4:  MOVLW  64
0EF6:  MOVWF  FE9
0EF8:  CLRF   00
0EFA:  CLRF   01
0EFC:  CLRF   02
0EFE:  CLRF   03
0F00:  CLRF   x64
0F02:  CLRF   x65
0F04:  CLRF   x66
0F06:  CLRF   x67
0F08:  MOVF   x63,W
0F0A:  IORWF  x62,W
0F0C:  IORWF  x61,W
0F0E:  IORWF  x60,W
0F10:  BZ    0F6A
0F12:  MOVLW  20
0F14:  MOVWF  x68
0F16:  BCF    FD8.0
0F18:  RLCF   5C,F
0F1A:  RLCF   5D,F
0F1C:  RLCF   5E,F
0F1E:  RLCF   5F,F
0F20:  RLCF   x64,F
0F22:  RLCF   x65,F
0F24:  RLCF   x66,F
0F26:  RLCF   x67,F
0F28:  MOVF   x63,W
0F2A:  SUBWF  x67,W
0F2C:  BNZ   0F3E
0F2E:  MOVF   x62,W
0F30:  SUBWF  x66,W
0F32:  BNZ   0F3E
0F34:  MOVF   x61,W
0F36:  SUBWF  x65,W
0F38:  BNZ   0F3E
0F3A:  MOVF   x60,W
0F3C:  SUBWF  x64,W
0F3E:  BNC   0F5E
0F40:  MOVF   x60,W
0F42:  SUBWF  x64,F
0F44:  MOVF   x61,W
0F46:  BTFSS  FD8.0
0F48:  INCFSZ x61,W
0F4A:  SUBWF  x65,F
0F4C:  MOVF   x62,W
0F4E:  BTFSS  FD8.0
0F50:  INCFSZ x62,W
0F52:  SUBWF  x66,F
0F54:  MOVF   x63,W
0F56:  BTFSS  FD8.0
0F58:  INCFSZ x63,W
0F5A:  SUBWF  x67,F
0F5C:  BSF    FD8.0
0F5E:  RLCF   00,F
0F60:  RLCF   01,F
0F62:  RLCF   02,F
0F64:  RLCF   03,F
0F66:  DECFSZ x68,F
0F68:  BRA    0F16
0F6A:  MOVFF  64,FEF
0F6E:  MOVFF  65,FEC
0F72:  MOVFF  66,FEC
0F76:  MOVFF  67,FEC
0F7A:  RETURN 0
0F7C:  MOVF   FE9,W
0F7E:  MOVWF  54
0F80:  MOVF   53,W
0F82:  MOVWF  56
0F84:  BZ    0FBA
0F86:  MOVFF  52,84
0F8A:  MOVFF  51,83
0F8E:  MOVFF  50,82
0F92:  MOVFF  4F,81
0F96:  CLRF   x88
0F98:  CLRF   x87
0F9A:  MOVLW  20
0F9C:  MOVWF  x86
0F9E:  MOVLW  82
0FA0:  MOVWF  x85
0FA2:  CALL   0674
0FA6:  MOVFF  03,52
0FAA:  MOVFF  02,51
0FAE:  MOVFF  01,50
0FB2:  MOVFF  00,4F
0FB6:  DECFSZ 56,F
0FB8:  BRA    0F86
0FBA:  MOVFF  52,5F
0FBE:  MOVFF  51,5E
0FC2:  MOVFF  50,5D
0FC6:  MOVFF  4F,5C
0FCA:  BRA    0EAE
0FCC:  MOVFF  03,52
0FD0:  MOVFF  02,51
0FD4:  MOVFF  01,50
0FD8:  MOVFF  00,4F
0FDC:  BTFSS  52.7
0FDE:  BRA    0FFA
0FE0:  DECF   54,F
0FE2:  BSF    54.5
0FE4:  COMF   4F,F
0FE6:  COMF   50,F
0FE8:  COMF   51,F
0FEA:  COMF   52,F
0FEC:  INCF   4F,F
0FEE:  BTFSC  FD8.2
0FF0:  INCF   50,F
0FF2:  BTFSC  FD8.2
0FF4:  INCF   51,F
0FF6:  BTFSC  FD8.2
0FF8:  INCF   52,F
0FFA:  MOVLW  3B
0FFC:  MOVWF  5B
0FFE:  MOVLW  9A
1000:  MOVWF  5A
1002:  MOVLW  CA
1004:  MOVWF  59
1006:  CLRF   58
1008:  MOVLW  0A
100A:  MOVWF  56
100C:  MOVF   53,W
100E:  BTFSC  FD8.2
1010:  INCF   54,F
1012:  BSF    FD8.1
1014:  CLRF   FEA
1016:  MOVLW  4F
1018:  MOVWF  FE9
101A:  MOVFF  52,5F
101E:  MOVFF  51,5E
1022:  MOVFF  50,5D
1026:  MOVFF  4F,5C
102A:  MOVFF  5B,63
102E:  MOVFF  5A,62
1032:  MOVFF  59,61
1036:  MOVFF  58,60
103A:  RCALL  0EEE
103C:  MOVF   01,W
103E:  MOVF   00,F
1040:  BNZ   1060
1042:  INCF   53,W
1044:  SUBWF  56,W
1046:  BZ    1060
1048:  MOVF   54,W
104A:  BZ    1064
104C:  ANDLW  0F
104E:  SUBWF  56,W
1050:  BZ    1054
1052:  BC    10C2
1054:  BTFSC  54.7
1056:  BRA    10C2
1058:  BTFSC  54.6
105A:  BRA    1064
105C:  MOVLW  20
105E:  BRA    10BA
1060:  MOVLW  20
1062:  ANDWF  54,F
1064:  BTFSS  54.5
1066:  BRA    1080
1068:  BCF    54.5
106A:  MOVF   53,W
106C:  BTFSS  FD8.2
106E:  DECF   54,F
1070:  MOVF   00,W
1072:  MOVWF  54
1074:  MOVLW  2D
1076:  MOVWF  5D
1078:  RCALL  0A80
107A:  MOVF   54,W
107C:  MOVWF  00
107E:  CLRF   54
1080:  MOVF   53,W
1082:  SUBWF  56,W
1084:  BNZ   109A
1086:  MOVF   00,W
1088:  MOVWF  54
108A:  MOVLW  2E
108C:  MOVWF  5D
108E:  RCALL  0A80
1090:  MOVF   54,W
1092:  MOVWF  00
1094:  MOVLW  20
1096:  ANDWF  54,F
1098:  MOVLW  00
109A:  MOVLW  30
109C:  BTFSS  54.5
109E:  BRA    10BA
10A0:  BCF    54.5
10A2:  MOVF   53,W
10A4:  BTFSS  FD8.2
10A6:  DECF   54,F
10A8:  MOVF   00,W
10AA:  MOVWF  54
10AC:  MOVLW  2D
10AE:  MOVWF  5D
10B0:  RCALL  0A80
10B2:  MOVF   54,W
10B4:  MOVWF  00
10B6:  CLRF   54
10B8:  MOVLW  30
10BA:  ADDWF  00,F
10BC:  MOVFF  00,5D
10C0:  RCALL  0A80
10C2:  BCF    FD8.1
10C4:  MOVFF  5B,5F
10C8:  MOVFF  5A,5E
10CC:  MOVFF  59,5D
10D0:  MOVFF  58,5C
10D4:  CLRF   x63
10D6:  CLRF   x62
10D8:  CLRF   x61
10DA:  MOVLW  0A
10DC:  MOVWF  x60
10DE:  RCALL  0EEE
10E0:  MOVFF  03,5B
10E4:  MOVFF  02,5A
10E8:  MOVFF  01,59
10EC:  MOVFF  00,58
10F0:  DECFSZ 56,F
10F2:  BRA    1012
10F4:  RETURN 0
....................  
.................... #list 
....................  
.................... #fuses NOWDT,MCLR,HS,NOUSBDIV,NOIESO,            //Selecciona el oscilador externo 
.................... #use delay(clock=48 Mhz, crystal= 48 MHz)   // Selecciona la velocidad del oscilador interno 
.................... #use i2c(Master,Fast=100000, sda=PIN_D6, scl=PIN_D7,force_sw) 
.................... int contador = 0 ;int pulso_timer = 0 ; 
.................... #include "funciones.h"  
.................... /** 
.................... *	\file funciones.h 
.................... *	\brief Resumen del archivo 
.................... *	\details Descripcion detallada del archivo 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
.................... #include <i2c_Flex_LCD.h> 
.................... //----------------------------------------------------------------------------- 
.................... // Title:         i2c_Flex_LCD 
.................... // Description:   Driver for common LCD with 1/2/3 or 4 row modules using PCF8574T interface board with I2C protocol. 
.................... // Date:          Nov-2013 
.................... // Ver.Rev.:      1.0 
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of 20X4_LCD_I2C_DRIVER.h from Pumrin S. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // lcd_init() Must be called before any other function. 
.................... // 
.................... // lcd_putc(c) Will display c on the next position of the LCD. 
.................... //  
.................... //     \f Clear LCD dispay 
.................... //     \1 Set write position on LCD Line 1 
.................... //     \2 Set write position on LCD Line 2 
.................... //     \3 Set write position on LCD Line 3 
.................... //     \4 Set write position on LCD Line 4 
.................... // 
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1) 
.................... // 
.................... //----------------------------------------------------------------------------- 
.................... // LCD pins D0-D3 are not used. 
.................... //----------------------------------------------------------------------------- 
.................... // 
.................... // Commment   : Control of a compatible LCD HITACHI from a bus I2C with 
.................... //              an EXPANDER of I/O with connection I2C. The tests of these 
.................... //              routines have been programmed using the IC PCF8574T of Phillips. 
.................... //              I used 4 bits mode programming. The 8 bits mode programming 
.................... //              is possible if you use 2 x PCF8574T. 
.................... // 
.................... // As defined in the following structure the pin connection is as follows: 
.................... // 
.................... //  PCF8574P     LCD 
.................... //  ========     ====== 
.................... //     P0        RS 
.................... //     P1        RW 
.................... //     P2        Enable  
.................... //     P3        Led Backlight 
.................... //     P4        D4 
.................... //     P5        D5 
.................... //     P6        D6 
.................... //     P7        D7 
.................... // 
.................... //  The SCL and SDA pins should be pull-up resistor as shown below: 
.................... // 
.................... //             +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SDA pin  
.................... //(SDA)                      
.................... //              +5v 
.................... //               | 
.................... //               < 
.................... //               > 4.7K        
.................... //               <          
.................... //To PIC         |          To i2c slave 
.................... //pin xx ------------------ SCL pin  
.................... //(SCL) 
.................... // 
.................... //To PIC                    To i2c slave 
.................... //Vss pin ----------------- Vss or ground pin  
.................... //                | 
.................... //              ----- 
.................... //               ---  Ground 
.................... //                -  
.................... //  
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS" 
.................... //----------------------------------------------------------------------------- 
.................... //For PCF8574T the addressing is: 
....................  
.................... //Jp3 Jp2 Jp1 
.................... //A2 A1 A0  Hex 
.................... //L L L  0x40 
.................... //L L H  0x42 
.................... //L H L  0x44 
.................... //L H H  0x46 
.................... //H L L  0x48 
.................... //H L H  0x4A 
.................... //H H L  0x4C 
.................... //H H H  0x4E 
....................  
.................... //---------------------------------------------------------------------------- 
.................... #define LCD_ADDR       0x4E //I2C slave address for LCD module 
....................  
.................... #define ON             1 
.................... #define OFF            0 
.................... #define RS             0b00000001  //P0 - PCF8574T Pin connected to RS 
.................... #define RW             0b00000010  //P1 - PCF8574T Pin connected to RW 
.................... #define EN             0b00000100  //P2 - PCF8574T Pin connected to EN 
.................... #define BACKLIGHT_LED  0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define lcd_line_one   0x80   // LCD RAM address for line 1 
.................... #define lcd_line_two   0xC0   // LCD RAM address for line 2 
.................... #define lcd_line_three 0x94   // LCD RAM address for line 3 
.................... #define lcd_line_four  0xD4   // LCD RAM address for line 4 
....................   
.................... byte address; 
.................... int1 lcd_backlight=ON; 
....................  
.................... void i2c_lcd_backlight_On(){ 
....................       lcd_backlight=ON; 
.................... } 
....................  
.................... void i2c_lcd_backlight_Off(){ 
....................       lcd_backlight=OFF; 
.................... } 
....................  
.................... void i2c_send_nibble(unsigned char data) 
....................    {    
....................         i2c_start(); 
*
0952:  BSF    F95.6
0954:  MOVLW  11
0956:  MOVWF  00
0958:  DECFSZ 00,F
095A:  BRA    0958
095C:  BSF    F95.7
095E:  MOVLW  11
0960:  MOVWF  00
0962:  DECFSZ 00,F
0964:  BRA    0962
0966:  BCF    F8C.6
0968:  BCF    F95.6
096A:  MOVLW  11
096C:  MOVWF  00
096E:  DECFSZ 00,F
0970:  BRA    096E
0972:  BCF    F8C.7
0974:  BCF    F95.7
....................         delay_us(20); 
0976:  MOVLW  4F
0978:  MOVWF  00
097A:  DECFSZ 00,F
097C:  BRA    097A
097E:  BRA    0980
....................         i2c_write(LCD_ADDR); //the slave addresse 
0980:  MOVLW  4E
0982:  MOVWF  x62
0984:  RCALL  08E6
....................         delay_us(20); 
0986:  MOVLW  4F
0988:  MOVWF  00
098A:  DECFSZ 00,F
098C:  BRA    098A
098E:  BRA    0990
....................         i2c_write(data); 
0990:  MOVFF  61,62
0994:  RCALL  08E6
....................         delay_us(20); 
0996:  MOVLW  4F
0998:  MOVWF  00
099A:  DECFSZ 00,F
099C:  BRA    099A
099E:  BRA    09A0
....................         i2c_stop(); 
09A0:  BCF    F95.6
09A2:  NOP   
09A4:  BSF    F95.7
09A6:  BTFSS  F83.7
09A8:  BRA    09A6
09AA:  MOVLW  11
09AC:  MOVWF  00
09AE:  DECFSZ 00,F
09B0:  BRA    09AE
09B2:  BRA    09B4
09B4:  NOP   
09B6:  BSF    F95.6
09B8:  MOVLW  11
09BA:  MOVWF  00
09BC:  DECFSZ 00,F
09BE:  BRA    09BC
....................         delay_us(20); 
09C0:  MOVLW  4F
09C2:  MOVWF  00
09C4:  DECFSZ 00,F
09C6:  BRA    09C4
09C8:  BRA    09CA
09CA:  RETURN 0
....................    } 
....................  
.................... void lcd_send_byte(unsigned char data) 
....................    { 
....................         if (lcd_backlight) data=data|EN|BACKLIGHT_LED; else data=data|EN; //set pin EN 
09CC:  BTFSS  20.0
09CE:  BRA    09DA
09D0:  MOVF   x60,W
09D2:  IORLW  04
09D4:  IORLW  08
09D6:  MOVWF  x60
09D8:  BRA    09DC
09DA:  BSF    x60.2
....................         i2c_send_nibble(data); 
09DC:  MOVFF  60,61
09E0:  RCALL  0952
....................         data=data-4;       //toggle EN back to 0 
09E2:  MOVLW  04
09E4:  SUBWF  x60,F
....................         i2c_send_nibble(data); 
09E6:  MOVFF  60,61
09EA:  RCALL  0952
09EC:  RETURN 0
....................    } 
....................     
.................... void lcd_clear() 
.................... { 
....................     lcd_send_byte(0x00); 
*
0A6C:  CLRF   x60
0A6E:  RCALL  09CC
....................     lcd_send_byte(0x10); 
0A70:  MOVLW  10
0A72:  MOVWF  x60
0A74:  RCALL  09CC
....................     delay_ms(2); 
0A76:  MOVLW  02
0A78:  MOVWF  5E
0A7A:  RCALL  0A44
0A7C:  GOTO   0AEC (RETURN)
.................... } 
....................  
.................... void lcd_init() 
.................... { 
....................     delay_ms(200); //LCD power up delay 
....................         
....................    //Request works on the command by set the RS = 0 R/W = 0 write 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x10); 
....................            //First state in 8 bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x30); 
....................            //Then set to 4-bit mode 
....................         lcd_send_byte(0x30); 
....................         lcd_send_byte(0x20); 
....................            //mode 4 bits, 2 lines, characters 5 x 7 (28 h) 
....................         lcd_send_byte(0x20); 
....................         lcd_send_byte(0x80); 
....................            //no need cursor on (0Ch) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0xC0); 
....................            //the cursor moves to the left (06 h) 
....................         lcd_send_byte(0x00); 
....................         lcd_send_byte(0x60); 
....................            //clears the display 
....................         lcd_clear(); 
.................... } 
....................  
.................... void lcd_gotoxy( byte x, byte y) 
.................... {      
.................... static char data; 
....................       
....................    switch(y) 
*
09EE:  MOVF   5F,W
09F0:  XORLW  01
09F2:  BZ    0A02
09F4:  XORLW  03
09F6:  BZ    0A08
09F8:  XORLW  01
09FA:  BZ    0A0E
09FC:  XORLW  07
09FE:  BZ    0A14
0A00:  BRA    0A1A
....................    { 
....................       case 1:  address= lcd_line_one;     break; 
0A02:  MOVLW  80
0A04:  MOVWF  1F
0A06:  BRA    0A1E
....................       case 2:  address= lcd_line_two;     break; 
0A08:  MOVLW  C0
0A0A:  MOVWF  1F
0A0C:  BRA    0A1E
....................       case 3:  address= lcd_line_three;   break; 
0A0E:  MOVLW  94
0A10:  MOVWF  1F
0A12:  BRA    0A1E
....................       case 4:  address= lcd_line_four;    break; 
0A14:  MOVLW  D4
0A16:  MOVWF  1F
0A18:  BRA    0A1E
....................       default: address= lcd_line_one;     break;  
0A1A:  MOVLW  80
0A1C:  MOVWF  1F
....................    } 
....................   
....................    address+=x-1; 
0A1E:  MOVLW  01
0A20:  SUBWF  5E,W
0A22:  ADDWF  1F,F
....................    data=address&0xF0; 
0A24:  MOVF   1F,W
0A26:  ANDLW  F0
0A28:  MOVWF  24
....................    lcd_send_byte(data); 
0A2A:  MOVFF  24,60
0A2E:  RCALL  09CC
....................    data=address&0x0F; 
0A30:  MOVF   1F,W
0A32:  ANDLW  0F
0A34:  MOVWF  24
....................    data=data<<4; 
0A36:  SWAPF  24,F
0A38:  MOVLW  F0
0A3A:  ANDWF  24,F
....................    lcd_send_byte(data); 
0A3C:  MOVFF  24,60
0A40:  RCALL  09CC
0A42:  RETURN 0
.................... } 
....................  
.................... //Display the character on LCD screen. 
.................... void LCD_PUTC(char in_data) 
.................... { 
....................  char data;      
....................   switch(in_data) 
*
0A80:  MOVF   5D,W
0A82:  XORLW  0C
0A84:  BZ    0A98
0A86:  XORLW  0D
0A88:  BZ    0A9C
0A8A:  XORLW  03
0A8C:  BZ    0AA6
0A8E:  XORLW  01
0A90:  BZ    0AB2
0A92:  XORLW  07
0A94:  BZ    0ABE
0A96:  BRA    0ACA
....................    {  
....................      case '\f': lcd_clear()    ;  break;                
0A98:  BRA    0A6C
0A9A:  BRA    0AEC
....................      case '\1': lcd_gotoxy(1,1);  break; 
0A9C:  MOVLW  01
0A9E:  MOVWF  5E
0AA0:  MOVWF  5F
0AA2:  RCALL  09EE
0AA4:  BRA    0AEC
....................      case '\2': lcd_gotoxy(1,2);  break; 
0AA6:  MOVLW  01
0AA8:  MOVWF  5E
0AAA:  MOVLW  02
0AAC:  MOVWF  5F
0AAE:  RCALL  09EE
0AB0:  BRA    0AEC
....................      case '\3': lcd_gotoxy(1,3);  break; 
0AB2:  MOVLW  01
0AB4:  MOVWF  5E
0AB6:  MOVLW  03
0AB8:  MOVWF  5F
0ABA:  RCALL  09EE
0ABC:  BRA    0AEC
....................      case '\4': lcd_gotoxy(1,4);  break; 
0ABE:  MOVLW  01
0AC0:  MOVWF  5E
0AC2:  MOVLW  04
0AC4:  MOVWF  5F
0AC6:  RCALL  09EE
0AC8:  BRA    0AEC
....................  
....................      default: 
....................         data=in_data&0xF0; 
0ACA:  MOVF   5D,W
0ACC:  ANDLW  F0
0ACE:  MOVWF  5E
....................         data=data|RS; //set RS pin to 1 
0AD0:  BSF    5E.0
....................         lcd_send_byte(data); 
0AD2:  MOVFF  5E,60
0AD6:  RCALL  09CC
....................         data=in_data&0x0F; 
0AD8:  MOVF   5D,W
0ADA:  ANDLW  0F
0ADC:  MOVWF  5E
....................         data=data<<4; 
0ADE:  SWAPF  5E,F
0AE0:  MOVLW  F0
0AE2:  ANDWF  5E,F
....................         data=data|RS; //set RS pin to 1 
0AE4:  BSF    5E.0
....................         lcd_send_byte(data); 
0AE6:  MOVFF  5E,60
0AEA:  RCALL  09CC
....................      break; 
....................    } 
0AEC:  RETURN 0
.................... }  
....................  
....................  
....................  
.................... #ifndef FUNCIONES_H 
.................... #define FUNCIONES_H 
.................... //Declaracion de estados 
....................  
.................... #define 	PUNTO_TENS_CORR	0 
.................... #define 	CONVERSION_DESFASE	1 
.................... #define 	TENS_CORR_RMS	2 
.................... #define 	CALCULO_POT_ENER	3 
.................... #define 	MOSTRAR_DATOS	4 
....................  
.................... //Prototipos de los eventos 
.................... void maquina_estado(void); 
....................  
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
*
07DC:  MOVFF  56,80
07E0:  MOVFF  55,7F
07E4:  MOVFF  54,7E
07E8:  MOVFF  53,7D
07EC:  CLRF   x84
07EE:  CLRF   x83
07F0:  CLRF   x82
07F2:  CLRF   x81
07F4:  RCALL  0766
07F6:  BC    07FA
07F8:  BNZ   0804
....................       return(0.0); 
07FA:  CLRF   00
07FC:  CLRF   01
07FE:  CLRF   02
0800:  CLRF   03
0802:  BRA    08E4
....................  
....................    y=x; 
0804:  MOVFF  56,5A
0808:  MOVFF  55,59
080C:  MOVFF  54,58
0810:  MOVFF  53,57
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
0814:  CLRF   x60
0816:  MOVLW  57
0818:  MOVWF  5F
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
081A:  MOVFF  5F,FE9
081E:  MOVFF  60,FEA
0822:  MOVF   FEF,W
0824:  CLRF   x64
0826:  MOVWF  x63
0828:  MOVLW  7F
082A:  ADDWF  x63,F
082C:  MOVLW  00
082E:  ADDWFC x64,F
0830:  BCF    FD8.0
0832:  RRCF   x64,W
0834:  RRCF   x63,W
0836:  MOVFF  60,FEA
083A:  MOVFF  5F,FE9
083E:  MOVWF  FEF
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
0840:  MOVFF  5A,5E
0844:  MOVFF  59,5D
0848:  MOVFF  58,5C
084C:  MOVFF  57,5B
....................       y+=(x/y); 
0850:  MOVFF  56,64
0854:  MOVFF  55,63
0858:  MOVFF  54,62
085C:  MOVFF  53,61
0860:  MOVFF  5A,68
0864:  MOVFF  59,67
0868:  MOVFF  58,66
086C:  MOVFF  57,65
0870:  RCALL  02B0
0872:  BCF    FD8.1
0874:  MOVFF  5A,84
0878:  MOVFF  59,83
087C:  MOVFF  58,82
0880:  MOVFF  57,81
0884:  MOVFF  03,88
0888:  MOVFF  02,87
088C:  MOVFF  01,86
0890:  MOVFF  00,85
0894:  RCALL  040A
0896:  MOVFF  03,5A
089A:  MOVFF  02,59
089E:  MOVFF  01,58
08A2:  MOVFF  00,57
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
08A6:  MOVFF  5F,FE9
08AA:  MOVFF  60,FEA
08AE:  DECF   FEF,F
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
08B0:  MOVFF  5E,80
08B4:  MOVFF  5D,7F
08B8:  MOVFF  5C,7E
08BC:  MOVFF  5B,7D
08C0:  MOVFF  5A,84
08C4:  MOVFF  59,83
08C8:  MOVFF  58,82
08CC:  MOVFF  57,81
08D0:  RCALL  0766
08D2:  BNZ   0840
....................  
....................    return(res); 
08D4:  MOVFF  5B,00
08D8:  MOVFF  5C,01
08DC:  MOVFF  5D,02
08E0:  MOVFF  5E,03
08E4:  RETURN 0
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
0B4A:  CLRF   x62
0B4C:  CLRF   x61
0B4E:  CLRF   x60
0B50:  MOVLW  7F
0B52:  MOVWF  5F
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
0B54:  MOVLW  7E
0B56:  MOVWF  x69
0B58:  MOVLW  80
0B5A:  MOVWF  x6A
0B5C:  CLRF   x6B
0B5E:  CLRF   x6C
0B60:  MOVLW  7A
0B62:  MOVWF  x6D
0B64:  MOVLW  2A
0B66:  MOVWF  x6E
0B68:  MOVLW  AA
0B6A:  MOVWF  x6F
0B6C:  MOVLW  A3
0B6E:  MOVWF  x70
0B70:  MOVLW  75
0B72:  MOVWF  x71
0B74:  MOVLW  B6
0B76:  MOVWF  x72
0B78:  MOVLW  09
0B7A:  MOVWF  x73
0B7C:  MOVLW  B4
0B7E:  MOVWF  x74
0B80:  MOVLW  6F
0B82:  MOVWF  x75
0B84:  MOVLW  4F
0B86:  MOVWF  x76
0B88:  MOVLW  B6
0B8A:  MOVWF  x77
0B8C:  MOVLW  AA
0B8E:  MOVWF  x78
0B90:  MOVLW  69
0B92:  MOVWF  x79
0B94:  MOVLW  8B
0B96:  MOVWF  x7A
0B98:  MOVLW  F6
0B9A:  MOVWF  x7B
0B9C:  MOVLW  E8
0B9E:  MOVWF  x7C
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
0BA0:  MOVFF  56,80
0BA4:  MOVFF  55,7F
0BA8:  MOVFF  54,7E
0BAC:  MOVFF  53,7D
0BB0:  CLRF   x84
0BB2:  CLRF   x83
0BB4:  CLRF   x82
0BB6:  CLRF   x81
0BB8:  RCALL  0766
0BBA:  BNC   0BC2
0BBC:  MOVF   54,W
0BBE:  XORLW  80
0BC0:  MOVWF  54
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
0BC2:  MOVFF  56,84
0BC6:  MOVFF  55,83
0BCA:  MOVFF  54,82
0BCE:  MOVFF  53,81
0BD2:  MOVLW  83
0BD4:  MOVWF  x88
0BD6:  MOVLW  F9
0BD8:  MOVWF  x87
0BDA:  MOVLW  22
0BDC:  MOVWF  x86
0BDE:  MOVLW  7E
0BE0:  MOVWF  x85
0BE2:  RCALL  0674
0BE4:  MOVFF  03,80
0BE8:  MOVFF  02,7F
0BEC:  MOVFF  01,7E
0BF0:  MOVFF  00,7D
0BF4:  BRA    0B10
0BF6:  MOVFF  01,63
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
0BFA:  MOVFF  56,84
0BFE:  MOVFF  55,83
0C02:  MOVFF  54,82
0C06:  MOVFF  53,81
0C0A:  MOVLW  83
0C0C:  MOVWF  x88
0C0E:  MOVLW  F9
0C10:  MOVWF  x87
0C12:  MOVLW  22
0C14:  MOVWF  x86
0C16:  MOVLW  7E
0C18:  MOVWF  x85
0C1A:  RCALL  0674
0C1C:  MOVFF  03,80
0C20:  MOVFF  02,7F
0C24:  MOVFF  01,7E
0C28:  MOVFF  00,7D
0C2C:  CLRF   x82
0C2E:  MOVFF  63,81
0C32:  CALL   027A
0C36:  BSF    FD8.1
0C38:  MOVFF  80,84
0C3C:  MOVFF  7F,83
0C40:  MOVFF  7E,82
0C44:  MOVFF  7D,81
0C48:  MOVFF  03,88
0C4C:  MOVFF  02,87
0C50:  MOVFF  01,86
0C54:  MOVFF  00,85
0C58:  CALL   040A
0C5C:  MOVFF  03,68
0C60:  MOVFF  02,67
0C64:  MOVFF  01,66
0C68:  MOVFF  00,65
....................    quad = quad % 4;                    // quadrant (0 to 3) 
0C6C:  MOVLW  03
0C6E:  ANDWF  x63,F
....................  
....................    if (quad == 0 || quad == 2) 
0C70:  MOVF   x63,F
0C72:  BZ    0C7A
0C74:  MOVF   x63,W
0C76:  SUBLW  02
0C78:  BNZ   0CAE
....................       t = frac * PI_DIV_BY_TWO; 
0C7A:  MOVFF  68,84
0C7E:  MOVFF  67,83
0C82:  MOVFF  66,82
0C86:  MOVFF  65,81
0C8A:  MOVLW  DB
0C8C:  MOVWF  x88
0C8E:  MOVLW  0F
0C90:  MOVWF  x87
0C92:  MOVLW  49
0C94:  MOVWF  x86
0C96:  MOVLW  7F
0C98:  MOVWF  x85
0C9A:  RCALL  0674
0C9C:  MOVFF  03,5E
0CA0:  MOVFF  02,5D
0CA4:  MOVFF  01,5C
0CA8:  MOVFF  00,5B
0CAC:  BRA    0D78
....................    else if (quad == 1) 
0CAE:  DECFSZ x63,W
0CB0:  BRA    0D16
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0CB2:  BSF    FD8.1
0CB4:  CLRF   x84
0CB6:  CLRF   x83
0CB8:  CLRF   x82
0CBA:  MOVLW  7F
0CBC:  MOVWF  x81
0CBE:  MOVFF  68,88
0CC2:  MOVFF  67,87
0CC6:  MOVFF  66,86
0CCA:  MOVFF  65,85
0CCE:  CALL   040A
0CD2:  MOVFF  03,80
0CD6:  MOVFF  02,7F
0CDA:  MOVFF  01,7E
0CDE:  MOVFF  00,7D
0CE2:  MOVFF  03,84
0CE6:  MOVFF  02,83
0CEA:  MOVFF  01,82
0CEE:  MOVFF  00,81
0CF2:  MOVLW  DB
0CF4:  MOVWF  x88
0CF6:  MOVLW  0F
0CF8:  MOVWF  x87
0CFA:  MOVLW  49
0CFC:  MOVWF  x86
0CFE:  MOVLW  7F
0D00:  MOVWF  x85
0D02:  RCALL  0674
0D04:  MOVFF  03,5E
0D08:  MOVFF  02,5D
0D0C:  MOVFF  01,5C
0D10:  MOVFF  00,5B
0D14:  BRA    0D78
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0D16:  BSF    FD8.1
0D18:  MOVFF  68,84
0D1C:  MOVFF  67,83
0D20:  MOVFF  66,82
0D24:  MOVFF  65,81
0D28:  CLRF   x88
0D2A:  CLRF   x87
0D2C:  CLRF   x86
0D2E:  MOVLW  7F
0D30:  MOVWF  x85
0D32:  CALL   040A
0D36:  MOVFF  03,80
0D3A:  MOVFF  02,7F
0D3E:  MOVFF  01,7E
0D42:  MOVFF  00,7D
0D46:  MOVFF  03,84
0D4A:  MOVFF  02,83
0D4E:  MOVFF  01,82
0D52:  MOVFF  00,81
0D56:  MOVLW  DB
0D58:  MOVWF  x88
0D5A:  MOVLW  0F
0D5C:  MOVWF  x87
0D5E:  MOVLW  49
0D60:  MOVWF  x86
0D62:  MOVLW  7F
0D64:  MOVWF  x85
0D66:  RCALL  0674
0D68:  MOVFF  03,5E
0D6C:  MOVFF  02,5D
0D70:  MOVFF  01,5C
0D74:  MOVFF  00,5B
....................  
....................    y = 1.0; 
0D78:  CLRF   5A
0D7A:  CLRF   59
0D7C:  CLRF   58
0D7E:  MOVLW  7F
0D80:  MOVWF  57
....................    t = t * t; 
0D82:  MOVFF  5E,84
0D86:  MOVFF  5D,83
0D8A:  MOVFF  5C,82
0D8E:  MOVFF  5B,81
0D92:  MOVFF  5E,88
0D96:  MOVFF  5D,87
0D9A:  MOVFF  5C,86
0D9E:  MOVFF  5B,85
0DA2:  RCALL  0674
0DA4:  MOVFF  03,5E
0DA8:  MOVFF  02,5D
0DAC:  MOVFF  01,5C
0DB0:  MOVFF  00,5B
....................    for (i = 0; i <= 4; i++) 
0DB4:  CLRF   x64
0DB6:  MOVF   x64,W
0DB8:  SUBLW  04
0DBA:  BNC   0E6C
....................    { 
....................       t2 = t2 * t; 
0DBC:  MOVFF  62,84
0DC0:  MOVFF  61,83
0DC4:  MOVFF  60,82
0DC8:  MOVFF  5F,81
0DCC:  MOVFF  5E,88
0DD0:  MOVFF  5D,87
0DD4:  MOVFF  5C,86
0DD8:  MOVFF  5B,85
0DDC:  RCALL  0674
0DDE:  MOVFF  03,62
0DE2:  MOVFF  02,61
0DE6:  MOVFF  01,60
0DEA:  MOVFF  00,5F
....................       y = y + p[i] * t2; 
0DEE:  MOVF   x64,W
0DF0:  MULLW  04
0DF2:  MOVF   FF3,W
0DF4:  CLRF   03
0DF6:  ADDLW  69
0DF8:  MOVWF  FE9
0DFA:  MOVLW  00
0DFC:  ADDWFC 03,W
0DFE:  MOVWF  FEA
0E00:  MOVFF  FEF,81
0E04:  MOVFF  FEC,82
0E08:  MOVFF  FEC,83
0E0C:  MOVFF  FEC,84
0E10:  MOVFF  62,88
0E14:  MOVFF  61,87
0E18:  MOVFF  60,86
0E1C:  MOVFF  5F,85
0E20:  RCALL  0674
0E22:  MOVFF  FEA,7E
0E26:  MOVFF  FE9,7D
0E2A:  BCF    FD8.1
0E2C:  MOVFF  5A,84
0E30:  MOVFF  59,83
0E34:  MOVFF  58,82
0E38:  MOVFF  57,81
0E3C:  MOVFF  03,88
0E40:  MOVFF  02,87
0E44:  MOVFF  01,86
0E48:  MOVFF  00,85
0E4C:  CALL   040A
0E50:  MOVFF  7E,FEA
0E54:  MOVFF  7D,FE9
0E58:  MOVFF  03,5A
0E5C:  MOVFF  02,59
0E60:  MOVFF  01,58
0E64:  MOVFF  00,57
0E68:  INCF   x64,F
0E6A:  BRA    0DB6
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
0E6C:  MOVF   x63,W
0E6E:  SUBLW  02
0E70:  BZ    0E76
0E72:  DECFSZ x63,W
0E74:  BRA    0E7C
....................       y = -y;  // correct sign 
0E76:  MOVF   58,W
0E78:  XORLW  80
0E7A:  MOVWF  58
....................  
....................    return (y); 
0E7C:  MOVFF  57,00
0E80:  MOVFF  58,01
0E84:  MOVFF  59,02
0E88:  MOVFF  5A,03
0E8C:  GOTO   151E (RETURN)
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <Control_ADCs.h> 
.................... /*  
....................  * File:   MAX191.h 
....................  * Author: MARCOS 
....................  * 
....................  * Created on 23 de septiembre de 2016, 08:14 
....................  */ 
....................  
.................... #ifndef Control_ADCs_H 
.................... #define Control_ADCs_H 
....................  
.................... #define ADC_CSCorriente PIN_A0 
.................... #define ADC_CSTension PIN_A1 
.................... #define ADC_SCLK PIN_A2 
.................... #define ADC_DOUT PIN_A3  // por aqui ingresa la info de los ADC, SDATA en AD7450 
.................... #define ADC_DIN PIN_A4 // se envia la informacion al MAX186 
.................... #define ADC_SSTRB PIN_A5 
....................  
.................... //control AD7450 
.................... long leer_Tension(){ 
*
0108:  CLRF   50
010A:  CLRF   4F
....................     signed long dato=0x00,dato_t; 
....................     int i; 
....................     output_low (ADC_CSTension); 
010C:  BCF    F92.1
010E:  BCF    F89.1
....................     delay_us(1); 
0110:  MOVLW  03
0112:  MOVWF  00
0114:  DECFSZ 00,F
0116:  BRA    0114
0118:  BRA    011A
....................     output_low (ADC_SCLK); 
011A:  BCF    F92.2
011C:  BCF    F89.2
....................     delay_us(1); 
011E:  MOVLW  03
0120:  MOVWF  00
0122:  DECFSZ 00,F
0124:  BRA    0122
0126:  BRA    0128
....................     output_high (ADC_SCLK); 
0128:  BCF    F92.2
012A:  BSF    F89.2
....................     delay_us(1); 
012C:  MOVLW  03
012E:  MOVWF  00
0130:  DECFSZ 00,F
0132:  BRA    0130
0134:  BRA    0136
....................      
....................         for(i=0;i<15;i++){ 
0136:  CLRF   53
0138:  MOVF   53,W
013A:  SUBLW  0E
013C:  BNC   016E
....................           shift_left(&dato,2,input(ADC_DOUT)); 
013E:  BSF    F92.3
0140:  BTFSC  F80.3
0142:  BRA    0148
0144:  BCF    FD8.0
0146:  BRA    014A
0148:  BSF    FD8.0
014A:  RLCF   4F,F
014C:  RLCF   50,F
....................           output_low(ADC_SCLK); 
014E:  BCF    F92.2
0150:  BCF    F89.2
....................           delay_us(1);  
0152:  MOVLW  03
0154:  MOVWF  00
0156:  DECFSZ 00,F
0158:  BRA    0156
015A:  BRA    015C
....................           output_high(ADC_SCLK);  
015C:  BCF    F92.2
015E:  BSF    F89.2
....................           delay_us(1); 
0160:  MOVLW  03
0162:  MOVWF  00
0164:  DECFSZ 00,F
0166:  BRA    0164
0168:  BRA    016A
016A:  INCF   53,F
016C:  BRA    0138
....................         } 
....................  
....................        // output_high (ADC_SCLK); 
....................        // delay_us(1); 
....................         output_high (ADC_CSTension); 
016E:  BCF    F92.1
0170:  BSF    F89.1
....................          
....................        dato_t=(dato&0x0800); 
0172:  CLRF   51
0174:  MOVF   50,W
0176:  ANDLW  08
0178:  MOVWF  52
....................          
....................       if (dato_t==0x0800){ 
017A:  MOVF   51,F
017C:  BNZ   0198
017E:  MOVF   52,W
0180:  SUBLW  08
0182:  BNZ   0198
....................             dato=-2048+(dato&0xF7FF); 
0184:  MOVFF  4F,00
0188:  MOVF   50,W
018A:  ANDLW  F7
018C:  MOVWF  03
018E:  MOVFF  4F,4F
0192:  MOVLW  F8
0194:  ADDWF  03,W
0196:  MOVWF  50
....................         } 
....................         
....................     return(dato); 
0198:  MOVFF  4F,01
019C:  MOVFF  50,02
01A0:  GOTO   1118 (RETURN)
.................... } 
....................  
.................... //control MAX186 
.................... long leer_Corriente(){ 
01A4:  MOVLW  8E
01A6:  MOVWF  51
....................     long dato; 
....................     BYTE config= 0b10001110; 
....................     int i; 
....................     output_low (ADC_CSCorriente); 
01A8:  BCF    F92.0
01AA:  BCF    F89.0
....................     output_low (ADC_DIN); 
01AC:  BCF    F92.4
01AE:  BCF    F89.4
....................     delay_us(1); 
01B0:  MOVLW  03
01B2:  MOVWF  00
01B4:  DECFSZ 00,F
01B6:  BRA    01B4
01B8:  BRA    01BA
....................      
....................     for(i=0; i<8; i++) { 
01BA:  CLRF   52
01BC:  MOVF   52,W
01BE:  SUBLW  07
01C0:  BNC   01F0
....................       output_bit(ADC_DIN, shift_left(&config,1,0)); 
01C2:  BCF    FD8.0
01C4:  RLCF   51,F
01C6:  BC    01CC
01C8:  BCF    F89.4
01CA:  BRA    01CE
01CC:  BSF    F89.4
01CE:  BCF    F92.4
....................       output_high(ADC_SCLK); 
01D0:  BCF    F92.2
01D2:  BSF    F89.2
....................       delay_us(1); 
01D4:  MOVLW  03
01D6:  MOVWF  00
01D8:  DECFSZ 00,F
01DA:  BRA    01D8
01DC:  BRA    01DE
....................       output_low(ADC_SCLK);	 
01DE:  BCF    F92.2
01E0:  BCF    F89.2
....................       delay_us(1); 
01E2:  MOVLW  03
01E4:  MOVWF  00
01E6:  DECFSZ 00,F
01E8:  BRA    01E6
01EA:  BRA    01EC
01EC:  INCF   52,F
01EE:  BRA    01BC
....................    } 
....................  
....................     output_high(ADC_CSCorriente); 
01F0:  BCF    F92.0
01F2:  BSF    F89.0
....................      
....................     while(input(ADC_SSTRB)=='0');    
....................          
....................         output_low (ADC_CSCorriente); 
01F4:  BCF    F92.0
01F6:  BCF    F89.0
....................         output_high (ADC_SCLK); 
01F8:  BCF    F92.2
01FA:  BSF    F89.2
....................         delay_us(1); 
01FC:  MOVLW  03
01FE:  MOVWF  00
0200:  DECFSZ 00,F
0202:  BRA    0200
0204:  BRA    0206
....................         output_low (ADC_SCLK); 
0206:  BCF    F92.2
0208:  BCF    F89.2
....................         delay_us(1); 
020A:  MOVLW  03
020C:  MOVWF  00
020E:  DECFSZ 00,F
0210:  BRA    020E
0212:  BRA    0214
....................          
....................         for(i=0;i<15;i++){ 
0214:  CLRF   52
0216:  MOVF   52,W
0218:  SUBLW  0E
021A:  BNC   024C
....................           output_high(ADC_SCLK); 
021C:  BCF    F92.2
021E:  BSF    F89.2
....................           delay_us(1); 
0220:  MOVLW  03
0222:  MOVWF  00
0224:  DECFSZ 00,F
0226:  BRA    0224
0228:  BRA    022A
....................           shift_left(&dato,2,input(ADC_DOUT));  
022A:  BSF    F92.3
022C:  BTFSC  F80.3
022E:  BRA    0234
0230:  BCF    FD8.0
0232:  BRA    0236
0234:  BSF    FD8.0
0236:  RLCF   4F,F
0238:  RLCF   50,F
....................           output_low(ADC_SCLK); 
023A:  BCF    F92.2
023C:  BCF    F89.2
....................           delay_us(1); 
023E:  MOVLW  03
0240:  MOVWF  00
0242:  DECFSZ 00,F
0244:  BRA    0242
0246:  BRA    0248
0248:  INCF   52,F
024A:  BRA    0216
....................         } 
....................   
....................          
....................         output_high (ADC_CSCorriente); 
024C:  BCF    F92.0
024E:  BSF    F89.0
....................      
....................  
....................     dato= (dato>>3)& 0x0FFF; 
0250:  RRCF   50,W
0252:  MOVWF  54
0254:  RRCF   4F,W
0256:  MOVWF  53
0258:  RRCF   54,F
025A:  RRCF   53,F
025C:  RRCF   54,F
025E:  RRCF   53,F
0260:  MOVLW  1F
0262:  ANDWF  54,F
0264:  MOVFF  53,4F
0268:  MOVF   54,W
026A:  ANDLW  0F
026C:  MOVWF  50
....................     return(dato); 
026E:  MOVFF  4F,01
0272:  MOVFF  50,02
0276:  GOTO   1124 (RETURN)
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... //Implementacion Switch-Case 
....................  
.................... /** 
.................... *	\fn void maquina_estado() 
.................... *	\brief Implementacion Switch-Case 
.................... *	\details  
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
....................  **/ 
.................... unsigned long punto1, punto2; 
.................... int8 pos_V,pos_I,pos_V_A,pos_I_A; 
.................... int control_V, control_I; 
.................... int desfase; 
.................... float tension, corriente, tension_RMS,corriente_RMS, t_desfase, potencia_ins,angulo; 
....................  
.................... const long carga= 0xE8AB; 
....................  
.................... #INT_RTCC                // interrupcion para demora de 1 ms 
.................... void interrtimer_0(){ 
....................     set_timer0(carga);   // interrupcion cada 1 ms 
*
00AE:  MOVLW  E8
00B0:  MOVWF  FD7
00B2:  MOVLW  AB
00B4:  MOVWF  FD6
....................     pulso_timer++; 
00B6:  INCF   23,F
....................  
00B8:  BCF    FF2.2
00BA:  GOTO   0060
....................    } 
....................  
.................... void maquina_estado() 
.................... { 
.................... 		static int estado = PUNTO_TENS_CORR; 
....................  
.................... 		switch(estado) 
*
10F6:  MOVF   4C,W
10F8:  XORLW  00
10FA:  BZ    1114
10FC:  XORLW  01
10FE:  BZ    116C
1100:  XORLW  03
1102:  BTFSC  FD8.2
1104:  BRA    12AC
1106:  XORLW  01
1108:  BTFSC  FD8.2
110A:  BRA    1382
110C:  XORLW  07
110E:  BTFSC  FD8.2
1110:  BRA    1566
1112:  BRA    1634
.................... 		{ 
.................... 			case PUNTO_TENS_CORR: 
....................                 punto1= leer_Tension(); 
1114:  GOTO   0108
1118:  MOVFF  02,26
111C:  MOVFF  01,25
....................                 punto2= leer_Corriente(); // comprobar si funciona con el tiempo de demora de la lectura del externo 
1120:  GOTO   01A4
1124:  MOVFF  02,28
1128:  MOVFF  01,27
....................                 // convierte los valores de long a float 
....................                 tension=punto1; 
112C:  MOVFF  26,82
1130:  MOVFF  25,81
1134:  CALL   027A
1138:  MOVFF  03,33
113C:  MOVFF  02,32
1140:  MOVFF  01,31
1144:  MOVFF  00,30
....................                 corriente=punto2; 
1148:  MOVFF  28,82
114C:  MOVFF  27,81
1150:  CALL   027A
1154:  MOVFF  03,37
1158:  MOVFF  02,36
115C:  MOVFF  01,35
1160:  MOVFF  00,34
....................                 contador++; 
1164:  INCF   22,F
.................... 					estado = CONVERSION_DESFASE; 
1166:  MOVLW  01
1168:  MOVWF  4C
....................  
.................... 				break; 
116A:  BRA    1636
.................... 			 
.................... 			case CONVERSION_DESFASE: 
....................                 tension= (tension)/1000-2.54; 
116C:  MOVFF  33,64
1170:  MOVFF  32,63
1174:  MOVFF  31,62
1178:  MOVFF  30,61
117C:  CLRF   x68
117E:  CLRF   x67
1180:  MOVLW  7A
1182:  MOVWF  x66
1184:  MOVLW  88
1186:  MOVWF  x65
1188:  CALL   02B0
118C:  MOVFF  03,52
1190:  MOVFF  02,51
1194:  MOVFF  01,50
1198:  MOVFF  00,4F
119C:  BSF    FD8.1
119E:  MOVFF  03,84
11A2:  MOVFF  02,83
11A6:  MOVFF  01,82
11AA:  MOVFF  00,81
11AE:  MOVLW  5C
11B0:  MOVWF  x88
11B2:  MOVLW  8F
11B4:  MOVWF  x87
11B6:  MOVLW  22
11B8:  MOVWF  x86
11BA:  MOVLW  80
11BC:  MOVWF  x85
11BE:  CALL   040A
11C2:  MOVFF  03,33
11C6:  MOVFF  02,32
11CA:  MOVFF  01,31
11CE:  MOVFF  00,30
....................                 corriente= (corriente*5)/1024-2.5; 
11D2:  MOVFF  37,84
11D6:  MOVFF  36,83
11DA:  MOVFF  35,82
11DE:  MOVFF  34,81
11E2:  CLRF   x88
11E4:  CLRF   x87
11E6:  MOVLW  20
11E8:  MOVWF  x86
11EA:  MOVLW  81
11EC:  MOVWF  x85
11EE:  CALL   0674
11F2:  MOVFF  03,52
11F6:  MOVFF  02,51
11FA:  MOVFF  01,50
11FE:  MOVFF  00,4F
1202:  MOVFF  03,64
1206:  MOVFF  02,63
120A:  MOVFF  01,62
120E:  MOVFF  00,61
1212:  CLRF   x68
1214:  CLRF   x67
1216:  CLRF   x66
1218:  MOVLW  89
121A:  MOVWF  x65
121C:  CALL   02B0
1220:  MOVFF  03,52
1224:  MOVFF  02,51
1228:  MOVFF  01,50
122C:  MOVFF  00,4F
1230:  BSF    FD8.1
1232:  MOVFF  03,84
1236:  MOVFF  02,83
123A:  MOVFF  01,82
123E:  MOVFF  00,81
1242:  CLRF   x88
1244:  CLRF   x87
1246:  MOVLW  20
1248:  MOVWF  x86
124A:  MOVLW  80
124C:  MOVWF  x85
124E:  CALL   040A
1252:  MOVFF  03,37
1256:  MOVFF  02,36
125A:  MOVFF  01,35
125E:  MOVFF  00,34
....................                  
....................                 // Analisis del punto POSITVO O NEGATIVO 
....................                 // valor positivo estado=0-- valor negativo estado=1 
....................                  
....................                 //TENSION 
....................                 #asm 
....................                 clrf &pos_V; 
1262:  CLRF   29
....................                 btfsc (&tension + 0x01), 7; 
1264:  BTFSC  31.7
....................                 bsf &pos_V,0; 
1266:  BSF    29.0
....................                 #endasm 
.................... 				 
....................                 //CORRIENTE 
....................                 #asm 
....................                 clrf &pos_I; 
1268:  CLRF   2A
....................                 btfsc (&corriente + 0x01), 7; // comprueba signo en un bit de los 4 byte del float 
126A:  BTFSC  35.7
....................                 bsf &pos_I,0; 
126C:  BSF    2A.0
....................                 #endasm 
....................  
....................                  
....................                  
.................... 				 
....................                 // si el punto actual de tension es positivo, el anterior es negativo  
....................                 //y se tiene mas de un punto (contaodr distinto de cero) 
....................                 if (pos_V==1 && contador!=0 && pos_V_A==0 && control_V != 0){  
126E:  DECFSZ 29,W
1270:  BRA    1286
1272:  MOVF   22,F
1274:  BZ    1286
1276:  MOVF   2B,F
1278:  BNZ   1286
127A:  MOVF   2D,F
127C:  BZ    1286
....................                  control_V= contador; // tiempo en el que cruzó la tension  
127E:  MOVFF  22,2D
....................                  desfase=1; 
1282:  MOVLW  01
1284:  MOVWF  2F
....................                 } 
....................                  
....................                 // si el punto actual de tension es positivo, el anterior es negativo  
....................                 //y se tiene mas de un punto (contaodr distinto de cero) 
....................                 if (pos_I==1 && contador!=0 && pos_I_A==0 && control_I != 0){ 
1286:  DECFSZ 2A,W
1288:  BRA    129E
128A:  MOVF   22,F
128C:  BZ    129E
128E:  MOVF   2C,F
1290:  BNZ   129E
1292:  MOVF   2E,F
1294:  BZ    129E
....................                      
....................                  control_I= contador; // tiempo en el que cruzó la corriente 
1296:  MOVFF  22,2E
....................                  desfase=2; 
129A:  MOVLW  02
129C:  MOVWF  2F
....................                 } 
....................                  
....................                 pos_V_A=pos_V; 
129E:  MOVFF  29,2B
....................                 pos_I_A=pos_I; 
12A2:  MOVFF  2A,2C
....................                  
....................                  
.................... 					estado = TENS_CORR_RMS; 
12A6:  MOVLW  02
12A8:  MOVWF  4C
.................... 		 
.................... 				 
....................  
.................... 				break; 
12AA:  BRA    1636
.................... 			 
.................... 			case TENS_CORR_RMS: 
.................... 			 
.................... 				if((contador<30)&& (pulso_timer==1)) 
12AC:  MOVF   22,W
12AE:  SUBLW  1D
12B0:  BNC   1380
12B2:  DECFSZ 23,W
12B4:  BRA    1380
.................... 				{ 
.................... 					tension_RMS=tension_RMS+ tension * tension;       //calcula tension eficaz 
12B6:  MOVFF  33,84
12BA:  MOVFF  32,83
12BE:  MOVFF  31,82
12C2:  MOVFF  30,81
12C6:  MOVFF  33,88
12CA:  MOVFF  32,87
12CE:  MOVFF  31,86
12D2:  MOVFF  30,85
12D6:  CALL   0674
12DA:  BCF    FD8.1
12DC:  MOVFF  3B,84
12E0:  MOVFF  3A,83
12E4:  MOVFF  39,82
12E8:  MOVFF  38,81
12EC:  MOVFF  03,88
12F0:  MOVFF  02,87
12F4:  MOVFF  01,86
12F8:  MOVFF  00,85
12FC:  CALL   040A
1300:  MOVFF  03,3B
1304:  MOVFF  02,3A
1308:  MOVFF  01,39
130C:  MOVFF  00,38
....................                     corriente_RMS= corriente_RMS+ corriente * corriente; // calcula corriente eficaz 
1310:  MOVFF  37,84
1314:  MOVFF  36,83
1318:  MOVFF  35,82
131C:  MOVFF  34,81
1320:  MOVFF  37,88
1324:  MOVFF  36,87
1328:  MOVFF  35,86
132C:  MOVFF  34,85
1330:  CALL   0674
1334:  BCF    FD8.1
1336:  MOVFF  3F,84
133A:  MOVFF  3E,83
133E:  MOVFF  3D,82
1342:  MOVFF  3C,81
1346:  MOVFF  03,88
134A:  MOVFF  02,87
134E:  MOVFF  01,86
1352:  MOVFF  00,85
1356:  CALL   040A
135A:  MOVFF  03,3F
135E:  MOVFF  02,3E
1362:  MOVFF  01,3D
1366:  MOVFF  00,3C
....................                     pulso_timer=0; 
136A:  CLRF   23
....................                      
.................... 					estado = PUNTO_TENS_CORR; 
136C:  CLRF   4C
....................                      
....................                     if((contador== 29)){ 
136E:  MOVF   22,W
1370:  SUBLW  1D
1372:  BNZ   1380
.................... 					disable_interrupts(GLOBAL); 
1374:  BCF    FF2.6
1376:  BCF    FF2.7
1378:  BTFSC  FF2.7
137A:  BRA    1376
.................... 					estado = CALCULO_POT_ENER; 
137C:  MOVLW  03
137E:  MOVWF  4C
....................                       // lcd_gotoxy(1,1);   
....................                       // printf(LCD_PUTC,"entro timer \%d",contador); 
.................... 				} 
.................... 				} 
.................... 				 
....................  
.................... 				break; 
1380:  BRA    1636
.................... 			 
.................... 			case CALCULO_POT_ENER: // falta calculo de energia 
....................                 //calcula las raices para completar el calculo RMS 
.................... 				tension_RMS= sqrt(tension_RMS/30); 
1382:  MOVFF  3B,64
1386:  MOVFF  3A,63
138A:  MOVFF  39,62
138E:  MOVFF  38,61
1392:  CLRF   x68
1394:  CLRF   x67
1396:  MOVLW  70
1398:  MOVWF  x66
139A:  MOVLW  83
139C:  MOVWF  x65
139E:  CALL   02B0
13A2:  MOVFF  03,52
13A6:  MOVFF  02,51
13AA:  MOVFF  01,50
13AE:  MOVFF  00,4F
13B2:  MOVFF  03,56
13B6:  MOVFF  02,55
13BA:  MOVFF  01,54
13BE:  MOVFF  00,53
13C2:  CALL   07DC
13C6:  MOVFF  03,3B
13CA:  MOVFF  02,3A
13CE:  MOVFF  01,39
13D2:  MOVFF  00,38
....................                 corriente_RMS= sqrt(corriente_RMS/30); 
13D6:  MOVFF  3F,64
13DA:  MOVFF  3E,63
13DE:  MOVFF  3D,62
13E2:  MOVFF  3C,61
13E6:  CLRF   x68
13E8:  CLRF   x67
13EA:  MOVLW  70
13EC:  MOVWF  x66
13EE:  MOVLW  83
13F0:  MOVWF  x65
13F2:  CALL   02B0
13F6:  MOVFF  03,52
13FA:  MOVFF  02,51
13FE:  MOVFF  01,50
1402:  MOVFF  00,4F
1406:  MOVFF  03,56
140A:  MOVFF  02,55
140E:  MOVFF  01,54
1412:  MOVFF  00,53
1416:  CALL   07DC
141A:  MOVFF  03,3F
141E:  MOVFF  02,3E
1422:  MOVFF  01,3D
1426:  MOVFF  00,3C
....................                  
....................                 // se controla si se pudo calcular desfase en el estado anterior  
....................                 // se realiza las diferencia de cruce por cero y se convierte de tiempo a radianes 
....................                 if (desfase==2){ 
142A:  MOVF   2F,W
142C:  SUBLW  02
142E:  BNZ   14D6
....................                     t_desfase= (control_I-control_V); 
1430:  MOVF   2D,W
1432:  SUBWF  2E,W
1434:  CLRF   x82
1436:  MOVWF  x81
1438:  CALL   027A
143C:  MOVFF  03,43
1440:  MOVFF  02,42
1444:  MOVFF  01,41
1448:  MOVFF  00,40
....................                     angulo= (t_desfase*pi)/20;      // angulo de desfase en radianes. 
144C:  MOVFF  43,84
1450:  MOVFF  42,83
1454:  MOVFF  41,82
1458:  MOVFF  40,81
145C:  MOVLW  DB
145E:  MOVWF  x88
1460:  MOVLW  0F
1462:  MOVWF  x87
1464:  MOVLW  49
1466:  MOVWF  x86
1468:  MOVLW  80
146A:  MOVWF  x85
146C:  CALL   0674
1470:  MOVFF  03,52
1474:  MOVFF  02,51
1478:  MOVFF  01,50
147C:  MOVFF  00,4F
1480:  MOVFF  03,64
1484:  MOVFF  02,63
1488:  MOVFF  01,62
148C:  MOVFF  00,61
1490:  CLRF   x68
1492:  CLRF   x67
1494:  MOVLW  20
1496:  MOVWF  x66
1498:  MOVLW  83
149A:  MOVWF  x65
149C:  CALL   02B0
14A0:  MOVFF  03,4B
14A4:  MOVFF  02,4A
14A8:  MOVFF  01,49
14AC:  MOVFF  00,48
....................                      lcd_gotoxy(1,1); 
14B0:  MOVLW  01
14B2:  MOVWF  5E
14B4:  MOVWF  5F
14B6:  CALL   09EE
....................                      printf(LCD_PUTC,"Se midio desfase"); 
14BA:  MOVLW  BE
14BC:  MOVWF  FF6
14BE:  MOVLW  00
14C0:  MOVWF  FF7
14C2:  GOTO   0AEE
....................                      delay_ms(1000); 
14C6:  MOVLW  04
14C8:  MOVWF  4F
14CA:  MOVLW  FA
14CC:  MOVWF  5E
14CE:  CALL   0A44
14D2:  DECFSZ 4F,F
14D4:  BRA    14CA
....................                 }                 
....................                // calculo de potencia  
....................                 potencia_ins= tension_RMS*corriente_RMS* cos(angulo); 
14D6:  MOVFF  3B,84
14DA:  MOVFF  3A,83
14DE:  MOVFF  39,82
14E2:  MOVFF  38,81
14E6:  MOVFF  3F,88
14EA:  MOVFF  3E,87
14EE:  MOVFF  3D,86
14F2:  MOVFF  3C,85
14F6:  CALL   0674
14FA:  MOVFF  03,52
14FE:  MOVFF  02,51
1502:  MOVFF  01,50
1506:  MOVFF  00,4F
150A:  MOVFF  4B,56
150E:  MOVFF  4A,55
1512:  MOVFF  49,54
1516:  MOVFF  48,53
151A:  GOTO   0B4A
151E:  MOVFF  52,84
1522:  MOVFF  51,83
1526:  MOVFF  50,82
152A:  MOVFF  4F,81
152E:  MOVFF  03,88
1532:  MOVFF  02,87
1536:  MOVFF  01,86
153A:  MOVFF  00,85
153E:  CALL   0674
1542:  MOVFF  03,47
1546:  MOVFF  02,46
154A:  MOVFF  01,45
154E:  MOVFF  00,44
....................                 //se limpian las variables para la próxima tanta de muestreo 
....................                 control_V=0;       
1552:  CLRF   2D
....................                 control_I=0; 
1554:  CLRF   2E
....................                 angulo=0; 
1556:  CLRF   4B
1558:  CLRF   4A
155A:  CLRF   49
155C:  CLRF   48
....................                 desfase=0;  
155E:  CLRF   2F
....................                  
.................... 					estado = MOSTRAR_DATOS; 
1560:  MOVLW  04
1562:  MOVWF  4C
.................... 				break; 
1564:  BRA    1636
.................... 			 
.................... 			case MOSTRAR_DATOS: 
....................                 //este estado solo muestra los datos en la pantalla LCD 
....................                 lcd_gotoxy(1,1); 
1566:  MOVLW  01
1568:  MOVWF  5E
156A:  MOVWF  5F
156C:  CALL   09EE
....................                 printf(LCD_PUTC,"Potencia= \%f W",potencia_ins); 
1570:  MOVLW  D0
1572:  MOVWF  FF6
1574:  MOVLW  00
1576:  MOVWF  FF7
1578:  MOVLW  0A
157A:  MOVWF  4F
157C:  RCALL  0E90
157E:  MOVLW  89
1580:  MOVWF  FE9
1582:  MOVFF  47,52
1586:  MOVFF  46,51
158A:  MOVFF  45,50
158E:  MOVFF  44,4F
1592:  MOVLW  02
1594:  MOVWF  53
1596:  RCALL  0F7C
1598:  MOVLW  20
159A:  MOVWF  5D
159C:  CALL   0A80
15A0:  MOVLW  57
15A2:  MOVWF  5D
15A4:  CALL   0A80
....................                 lcd_gotoxy(1,2); 
15A8:  MOVLW  01
15AA:  MOVWF  5E
15AC:  MOVLW  02
15AE:  MOVWF  5F
15B0:  CALL   09EE
....................                 printf (LCD_PUTC, "T=\%f V  I=\%f A",tension_RMS,corriente_RMS); 
15B4:  MOVLW  54
15B6:  MOVWF  5D
15B8:  CALL   0A80
15BC:  MOVLW  3D
15BE:  MOVWF  5D
15C0:  CALL   0A80
15C4:  MOVLW  89
15C6:  MOVWF  FE9
15C8:  MOVFF  3B,52
15CC:  MOVFF  3A,51
15D0:  MOVFF  39,50
15D4:  MOVFF  38,4F
15D8:  MOVLW  02
15DA:  MOVWF  53
15DC:  RCALL  0F7C
15DE:  MOVLW  E4
15E0:  MOVWF  FF6
15E2:  MOVLW  00
15E4:  MOVWF  FF7
15E6:  MOVLW  06
15E8:  MOVWF  4F
15EA:  RCALL  0E90
15EC:  MOVLW  89
15EE:  MOVWF  FE9
15F0:  MOVFF  3F,52
15F4:  MOVFF  3E,51
15F8:  MOVFF  3D,50
15FC:  MOVFF  3C,4F
1600:  MOVLW  02
1602:  MOVWF  53
1604:  RCALL  0F7C
1606:  MOVLW  20
1608:  MOVWF  5D
160A:  CALL   0A80
160E:  MOVLW  41
1610:  MOVWF  5D
1612:  CALL   0A80
....................                 delay_ms(1000); 
1616:  MOVLW  04
1618:  MOVWF  4F
161A:  MOVLW  FA
161C:  MOVWF  5E
161E:  CALL   0A44
1622:  DECFSZ 4F,F
1624:  BRA    161A
....................                 enable_interrupts(GLOBAL); 
1626:  MOVLW  C0
1628:  IORWF  FF2,F
....................                 set_timer0(0x1D);   // se carga 29 para un desborde en 500 us teniendo en cuenta los tiempos en C 
162A:  CLRF   FD7
162C:  MOVLW  1D
162E:  MOVWF  FD6
.................... 					 
.................... 					estado = PUNTO_TENS_CORR; 
1630:  CLRF   4C
.................... 		 
....................  
.................... 				break; 
1632:  BRA    1636
.................... 			 
.................... 			default: estado = PUNTO_TENS_CORR; 
1634:  CLRF   4C
.................... 		} 
1636:  GOTO   1674 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Funciones asociadas a los eventos 
....................  
.................... /** 
.................... *	\fn int -(void) 
.................... *	\brief Resumen 
.................... *	\details Detalles 
.................... *	\author Postemsky Marcos 
.................... *	\date 17-09-2016 11:39:08 
.................... */ 
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 4C07   PLL12 CPUDIV1 NOUSBDIV HS FCMEN NOIESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
